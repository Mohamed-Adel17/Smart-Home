
Smart_Home_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000349c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000332  00800060  0000349c  00003530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800392  00800392  00003862  2**0
                  ALLOC
  3 .stab         00003e58  00000000  00000000  00003864  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000168d  00000000  00000000  000076bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00008d49  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000021c  00000000  00000000  00008f09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000023f5  00000000  00000000  00009125  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000013db  00000000  00000000  0000b51a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001339  00000000  00000000  0000c8f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000dc30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000347  00000000  00000000  0000de10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c84  00000000  00000000  0000e157  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eddb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__vector_4>
      14:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__vector_9>
      28:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ac 19 	call	0x3358	; 0x3358 <main>
      8a:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 a1 04 	call	0x942	; 0x942 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 9d 02 	call	0x53a	; 0x53a <__subsf3>
      be:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__floatundisf>:
      ea:	a2 e0       	ldi	r26, 0x02	; 2
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 15 1a 	jmp	0x342a	; 0x342a <__prologue_saves__>
      f6:	12 2f       	mov	r17, r18
      f8:	b3 2e       	mov	r11, r19
      fa:	a4 2e       	mov	r10, r20
      fc:	95 2e       	mov	r9, r21
      fe:	86 2e       	mov	r8, r22
     100:	37 2e       	mov	r3, r23
     102:	28 2e       	mov	r2, r24
     104:	9a 83       	std	Y+2, r25	; 0x02
     106:	c2 2e       	mov	r12, r18
     108:	d3 2e       	mov	r13, r19
     10a:	e4 2e       	mov	r14, r20
     10c:	f5 2e       	mov	r15, r21
     10e:	a7 01       	movw	r20, r14
     110:	96 01       	movw	r18, r12
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	70 e0       	ldi	r23, 0x00	; 0
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	21 17       	cp	r18, r17
     11c:	a1 f4       	brne	.+40     	; 0x146 <__floatundisf+0x5c>
     11e:	3b 15       	cp	r19, r11
     120:	91 f4       	brne	.+36     	; 0x146 <__floatundisf+0x5c>
     122:	4a 15       	cp	r20, r10
     124:	81 f4       	brne	.+32     	; 0x146 <__floatundisf+0x5c>
     126:	59 15       	cp	r21, r9
     128:	71 f4       	brne	.+28     	; 0x146 <__floatundisf+0x5c>
     12a:	68 15       	cp	r22, r8
     12c:	61 f4       	brne	.+24     	; 0x146 <__floatundisf+0x5c>
     12e:	73 15       	cp	r23, r3
     130:	51 f4       	brne	.+20     	; 0x146 <__floatundisf+0x5c>
     132:	82 15       	cp	r24, r2
     134:	41 f4       	brne	.+16     	; 0x146 <__floatundisf+0x5c>
     136:	aa 81       	ldd	r26, Y+2	; 0x02
     138:	9a 17       	cp	r25, r26
     13a:	29 f4       	brne	.+10     	; 0x146 <__floatundisf+0x5c>
     13c:	c7 01       	movw	r24, r14
     13e:	b6 01       	movw	r22, r12
     140:	0e 94 83 05 	call	0xb06	; 0xb06 <__floatunsisf>
     144:	aa c0       	rjmp	.+340    	; 0x29a <__floatundisf+0x1b0>
     146:	21 2f       	mov	r18, r17
     148:	3b 2d       	mov	r19, r11
     14a:	4a 2d       	mov	r20, r10
     14c:	59 2d       	mov	r21, r9
     14e:	68 2d       	mov	r22, r8
     150:	73 2d       	mov	r23, r3
     152:	82 2d       	mov	r24, r2
     154:	9a 81       	ldd	r25, Y+2	; 0x02
     156:	00 e2       	ldi	r16, 0x20	; 32
     158:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__lshrdi3>
     15c:	c9 01       	movw	r24, r18
     15e:	da 01       	movw	r26, r20
     160:	80 30       	cpi	r24, 0x00	; 0
     162:	e0 e0       	ldi	r30, 0x00	; 0
     164:	9e 07       	cpc	r25, r30
     166:	e1 e0       	ldi	r30, 0x01	; 1
     168:	ae 07       	cpc	r26, r30
     16a:	e0 e0       	ldi	r30, 0x00	; 0
     16c:	be 07       	cpc	r27, r30
     16e:	80 f4       	brcc	.+32     	; 0x190 <__floatundisf+0xa6>
     170:	8f 3f       	cpi	r24, 0xFF	; 255
     172:	91 05       	cpc	r25, r1
     174:	a1 05       	cpc	r26, r1
     176:	b1 05       	cpc	r27, r1
     178:	31 f0       	breq	.+12     	; 0x186 <__floatundisf+0x9c>
     17a:	28 f0       	brcs	.+10     	; 0x186 <__floatundisf+0x9c>
     17c:	28 e0       	ldi	r18, 0x08	; 8
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	40 e0       	ldi	r20, 0x00	; 0
     182:	50 e0       	ldi	r21, 0x00	; 0
     184:	16 c0       	rjmp	.+44     	; 0x1b2 <__floatundisf+0xc8>
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	40 e0       	ldi	r20, 0x00	; 0
     18c:	50 e0       	ldi	r21, 0x00	; 0
     18e:	11 c0       	rjmp	.+34     	; 0x1b2 <__floatundisf+0xc8>
     190:	80 30       	cpi	r24, 0x00	; 0
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	9f 07       	cpc	r25, r31
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	af 07       	cpc	r26, r31
     19a:	f1 e0       	ldi	r31, 0x01	; 1
     19c:	bf 07       	cpc	r27, r31
     19e:	28 f0       	brcs	.+10     	; 0x1aa <__floatundisf+0xc0>
     1a0:	28 e1       	ldi	r18, 0x18	; 24
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	40 e0       	ldi	r20, 0x00	; 0
     1a6:	50 e0       	ldi	r21, 0x00	; 0
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__floatundisf+0xc8>
     1aa:	20 e1       	ldi	r18, 0x10	; 16
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	40 e0       	ldi	r20, 0x00	; 0
     1b0:	50 e0       	ldi	r21, 0x00	; 0
     1b2:	02 2e       	mov	r0, r18
     1b4:	04 c0       	rjmp	.+8      	; 0x1be <__floatundisf+0xd4>
     1b6:	b6 95       	lsr	r27
     1b8:	a7 95       	ror	r26
     1ba:	97 95       	ror	r25
     1bc:	87 95       	ror	r24
     1be:	0a 94       	dec	r0
     1c0:	d2 f7       	brpl	.-12     	; 0x1b6 <__floatundisf+0xcc>
     1c2:	fc 01       	movw	r30, r24
     1c4:	e6 58       	subi	r30, 0x86	; 134
     1c6:	fd 4f       	sbci	r31, 0xFD	; 253
     1c8:	80 81       	ld	r24, Z
     1ca:	29 01       	movw	r4, r18
     1cc:	3a 01       	movw	r6, r20
     1ce:	48 0e       	add	r4, r24
     1d0:	51 1c       	adc	r5, r1
     1d2:	61 1c       	adc	r6, r1
     1d4:	71 1c       	adc	r7, r1
     1d6:	49 82       	std	Y+1, r4	; 0x01
     1d8:	21 2f       	mov	r18, r17
     1da:	3b 2d       	mov	r19, r11
     1dc:	4a 2d       	mov	r20, r10
     1de:	59 2d       	mov	r21, r9
     1e0:	68 2d       	mov	r22, r8
     1e2:	73 2d       	mov	r23, r3
     1e4:	82 2d       	mov	r24, r2
     1e6:	9a 81       	ldd	r25, Y+2	; 0x02
     1e8:	04 2d       	mov	r16, r4
     1ea:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__lshrdi3>
     1ee:	c9 01       	movw	r24, r18
     1f0:	da 01       	movw	r26, r20
     1f2:	4c 01       	movw	r8, r24
     1f4:	5d 01       	movw	r10, r26
     1f6:	80 e2       	ldi	r24, 0x20	; 32
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	84 19       	sub	r24, r4
     1fc:	95 09       	sbc	r25, r5
     1fe:	04 c0       	rjmp	.+8      	; 0x208 <__floatundisf+0x11e>
     200:	cc 0c       	add	r12, r12
     202:	dd 1c       	adc	r13, r13
     204:	ee 1c       	adc	r14, r14
     206:	ff 1c       	adc	r15, r15
     208:	8a 95       	dec	r24
     20a:	d2 f7       	brpl	.-12     	; 0x200 <__floatundisf+0x116>
     20c:	c1 14       	cp	r12, r1
     20e:	d1 04       	cpc	r13, r1
     210:	e1 04       	cpc	r14, r1
     212:	f1 04       	cpc	r15, r1
     214:	41 f0       	breq	.+16     	; 0x226 <__floatundisf+0x13c>
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	a0 e0       	ldi	r26, 0x00	; 0
     21c:	b0 e0       	ldi	r27, 0x00	; 0
     21e:	88 2a       	or	r8, r24
     220:	99 2a       	or	r9, r25
     222:	aa 2a       	or	r10, r26
     224:	bb 2a       	or	r11, r27
     226:	90 e2       	ldi	r25, 0x20	; 32
     228:	49 16       	cp	r4, r25
     22a:	51 04       	cpc	r5, r1
     22c:	61 04       	cpc	r6, r1
     22e:	71 04       	cpc	r7, r1
     230:	59 f4       	brne	.+22     	; 0x248 <__floatundisf+0x15e>
     232:	0f 2e       	mov	r0, r31
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	ef 2e       	mov	r14, r31
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	ff 2e       	mov	r15, r31
     23c:	f0 e8       	ldi	r31, 0x80	; 128
     23e:	0f 2f       	mov	r16, r31
     240:	ff e4       	ldi	r31, 0x4F	; 79
     242:	1f 2f       	mov	r17, r31
     244:	f0 2d       	mov	r31, r0
     246:	21 c0       	rjmp	.+66     	; 0x28a <__floatundisf+0x1a0>
     248:	af e1       	ldi	r26, 0x1F	; 31
     24a:	4a 16       	cp	r4, r26
     24c:	51 04       	cpc	r5, r1
     24e:	61 04       	cpc	r6, r1
     250:	71 04       	cpc	r7, r1
     252:	59 f4       	brne	.+22     	; 0x26a <__floatundisf+0x180>
     254:	0f 2e       	mov	r0, r31
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	ef 2e       	mov	r14, r31
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	ff 2e       	mov	r15, r31
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	0f 2f       	mov	r16, r31
     262:	ff e4       	ldi	r31, 0x4F	; 79
     264:	1f 2f       	mov	r17, r31
     266:	f0 2d       	mov	r31, r0
     268:	10 c0       	rjmp	.+32     	; 0x28a <__floatundisf+0x1a0>
     26a:	61 e0       	ldi	r22, 0x01	; 1
     26c:	70 e0       	ldi	r23, 0x00	; 0
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	09 80       	ldd	r0, Y+1	; 0x01
     274:	04 c0       	rjmp	.+8      	; 0x27e <__floatundisf+0x194>
     276:	66 0f       	add	r22, r22
     278:	77 1f       	adc	r23, r23
     27a:	88 1f       	adc	r24, r24
     27c:	99 1f       	adc	r25, r25
     27e:	0a 94       	dec	r0
     280:	d2 f7       	brpl	.-12     	; 0x276 <__floatundisf+0x18c>
     282:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__floatsisf>
     286:	7b 01       	movw	r14, r22
     288:	8c 01       	movw	r16, r24
     28a:	c5 01       	movw	r24, r10
     28c:	b4 01       	movw	r22, r8
     28e:	0e 94 83 05 	call	0xb06	; 0xb06 <__floatunsisf>
     292:	a8 01       	movw	r20, r16
     294:	97 01       	movw	r18, r14
     296:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
     29a:	22 96       	adiw	r28, 0x02	; 2
     29c:	e2 e1       	ldi	r30, 0x12	; 18
     29e:	0c 94 31 1a 	jmp	0x3462	; 0x3462 <__epilogue_restores__>

000002a2 <_fpadd_parts>:
     2a2:	a0 e0       	ldi	r26, 0x00	; 0
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	e7 e5       	ldi	r30, 0x57	; 87
     2a8:	f1 e0       	ldi	r31, 0x01	; 1
     2aa:	0c 94 15 1a 	jmp	0x342a	; 0x342a <__prologue_saves__>
     2ae:	dc 01       	movw	r26, r24
     2b0:	2b 01       	movw	r4, r22
     2b2:	fa 01       	movw	r30, r20
     2b4:	9c 91       	ld	r25, X
     2b6:	92 30       	cpi	r25, 0x02	; 2
     2b8:	08 f4       	brcc	.+2      	; 0x2bc <_fpadd_parts+0x1a>
     2ba:	39 c1       	rjmp	.+626    	; 0x52e <_fpadd_parts+0x28c>
     2bc:	eb 01       	movw	r28, r22
     2be:	88 81       	ld	r24, Y
     2c0:	82 30       	cpi	r24, 0x02	; 2
     2c2:	08 f4       	brcc	.+2      	; 0x2c6 <_fpadd_parts+0x24>
     2c4:	33 c1       	rjmp	.+614    	; 0x52c <_fpadd_parts+0x28a>
     2c6:	94 30       	cpi	r25, 0x04	; 4
     2c8:	69 f4       	brne	.+26     	; 0x2e4 <_fpadd_parts+0x42>
     2ca:	84 30       	cpi	r24, 0x04	; 4
     2cc:	09 f0       	breq	.+2      	; 0x2d0 <_fpadd_parts+0x2e>
     2ce:	2f c1       	rjmp	.+606    	; 0x52e <_fpadd_parts+0x28c>
     2d0:	11 96       	adiw	r26, 0x01	; 1
     2d2:	9c 91       	ld	r25, X
     2d4:	11 97       	sbiw	r26, 0x01	; 1
     2d6:	89 81       	ldd	r24, Y+1	; 0x01
     2d8:	98 17       	cp	r25, r24
     2da:	09 f4       	brne	.+2      	; 0x2de <_fpadd_parts+0x3c>
     2dc:	28 c1       	rjmp	.+592    	; 0x52e <_fpadd_parts+0x28c>
     2de:	a2 e7       	ldi	r26, 0x72	; 114
     2e0:	b2 e0       	ldi	r27, 0x02	; 2
     2e2:	25 c1       	rjmp	.+586    	; 0x52e <_fpadd_parts+0x28c>
     2e4:	84 30       	cpi	r24, 0x04	; 4
     2e6:	09 f4       	brne	.+2      	; 0x2ea <_fpadd_parts+0x48>
     2e8:	21 c1       	rjmp	.+578    	; 0x52c <_fpadd_parts+0x28a>
     2ea:	82 30       	cpi	r24, 0x02	; 2
     2ec:	a9 f4       	brne	.+42     	; 0x318 <_fpadd_parts+0x76>
     2ee:	92 30       	cpi	r25, 0x02	; 2
     2f0:	09 f0       	breq	.+2      	; 0x2f4 <_fpadd_parts+0x52>
     2f2:	1d c1       	rjmp	.+570    	; 0x52e <_fpadd_parts+0x28c>
     2f4:	9a 01       	movw	r18, r20
     2f6:	ad 01       	movw	r20, r26
     2f8:	88 e0       	ldi	r24, 0x08	; 8
     2fa:	ea 01       	movw	r28, r20
     2fc:	09 90       	ld	r0, Y+
     2fe:	ae 01       	movw	r20, r28
     300:	e9 01       	movw	r28, r18
     302:	09 92       	st	Y+, r0
     304:	9e 01       	movw	r18, r28
     306:	81 50       	subi	r24, 0x01	; 1
     308:	c1 f7       	brne	.-16     	; 0x2fa <_fpadd_parts+0x58>
     30a:	e2 01       	movw	r28, r4
     30c:	89 81       	ldd	r24, Y+1	; 0x01
     30e:	11 96       	adiw	r26, 0x01	; 1
     310:	9c 91       	ld	r25, X
     312:	89 23       	and	r24, r25
     314:	81 83       	std	Z+1, r24	; 0x01
     316:	08 c1       	rjmp	.+528    	; 0x528 <_fpadd_parts+0x286>
     318:	92 30       	cpi	r25, 0x02	; 2
     31a:	09 f4       	brne	.+2      	; 0x31e <_fpadd_parts+0x7c>
     31c:	07 c1       	rjmp	.+526    	; 0x52c <_fpadd_parts+0x28a>
     31e:	12 96       	adiw	r26, 0x02	; 2
     320:	2d 90       	ld	r2, X+
     322:	3c 90       	ld	r3, X
     324:	13 97       	sbiw	r26, 0x03	; 3
     326:	eb 01       	movw	r28, r22
     328:	8a 81       	ldd	r24, Y+2	; 0x02
     32a:	9b 81       	ldd	r25, Y+3	; 0x03
     32c:	14 96       	adiw	r26, 0x04	; 4
     32e:	ad 90       	ld	r10, X+
     330:	bd 90       	ld	r11, X+
     332:	cd 90       	ld	r12, X+
     334:	dc 90       	ld	r13, X
     336:	17 97       	sbiw	r26, 0x07	; 7
     338:	ec 80       	ldd	r14, Y+4	; 0x04
     33a:	fd 80       	ldd	r15, Y+5	; 0x05
     33c:	0e 81       	ldd	r16, Y+6	; 0x06
     33e:	1f 81       	ldd	r17, Y+7	; 0x07
     340:	91 01       	movw	r18, r2
     342:	28 1b       	sub	r18, r24
     344:	39 0b       	sbc	r19, r25
     346:	b9 01       	movw	r22, r18
     348:	37 ff       	sbrs	r19, 7
     34a:	04 c0       	rjmp	.+8      	; 0x354 <_fpadd_parts+0xb2>
     34c:	66 27       	eor	r22, r22
     34e:	77 27       	eor	r23, r23
     350:	62 1b       	sub	r22, r18
     352:	73 0b       	sbc	r23, r19
     354:	60 32       	cpi	r22, 0x20	; 32
     356:	71 05       	cpc	r23, r1
     358:	0c f0       	brlt	.+2      	; 0x35c <_fpadd_parts+0xba>
     35a:	61 c0       	rjmp	.+194    	; 0x41e <_fpadd_parts+0x17c>
     35c:	12 16       	cp	r1, r18
     35e:	13 06       	cpc	r1, r19
     360:	6c f5       	brge	.+90     	; 0x3bc <_fpadd_parts+0x11a>
     362:	37 01       	movw	r6, r14
     364:	48 01       	movw	r8, r16
     366:	06 2e       	mov	r0, r22
     368:	04 c0       	rjmp	.+8      	; 0x372 <_fpadd_parts+0xd0>
     36a:	96 94       	lsr	r9
     36c:	87 94       	ror	r8
     36e:	77 94       	ror	r7
     370:	67 94       	ror	r6
     372:	0a 94       	dec	r0
     374:	d2 f7       	brpl	.-12     	; 0x36a <_fpadd_parts+0xc8>
     376:	21 e0       	ldi	r18, 0x01	; 1
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	40 e0       	ldi	r20, 0x00	; 0
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	04 c0       	rjmp	.+8      	; 0x388 <_fpadd_parts+0xe6>
     380:	22 0f       	add	r18, r18
     382:	33 1f       	adc	r19, r19
     384:	44 1f       	adc	r20, r20
     386:	55 1f       	adc	r21, r21
     388:	6a 95       	dec	r22
     38a:	d2 f7       	brpl	.-12     	; 0x380 <_fpadd_parts+0xde>
     38c:	21 50       	subi	r18, 0x01	; 1
     38e:	30 40       	sbci	r19, 0x00	; 0
     390:	40 40       	sbci	r20, 0x00	; 0
     392:	50 40       	sbci	r21, 0x00	; 0
     394:	2e 21       	and	r18, r14
     396:	3f 21       	and	r19, r15
     398:	40 23       	and	r20, r16
     39a:	51 23       	and	r21, r17
     39c:	21 15       	cp	r18, r1
     39e:	31 05       	cpc	r19, r1
     3a0:	41 05       	cpc	r20, r1
     3a2:	51 05       	cpc	r21, r1
     3a4:	21 f0       	breq	.+8      	; 0x3ae <_fpadd_parts+0x10c>
     3a6:	21 e0       	ldi	r18, 0x01	; 1
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	79 01       	movw	r14, r18
     3b0:	8a 01       	movw	r16, r20
     3b2:	e6 28       	or	r14, r6
     3b4:	f7 28       	or	r15, r7
     3b6:	08 29       	or	r16, r8
     3b8:	19 29       	or	r17, r9
     3ba:	3c c0       	rjmp	.+120    	; 0x434 <_fpadd_parts+0x192>
     3bc:	23 2b       	or	r18, r19
     3be:	d1 f1       	breq	.+116    	; 0x434 <_fpadd_parts+0x192>
     3c0:	26 0e       	add	r2, r22
     3c2:	37 1e       	adc	r3, r23
     3c4:	35 01       	movw	r6, r10
     3c6:	46 01       	movw	r8, r12
     3c8:	06 2e       	mov	r0, r22
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <_fpadd_parts+0x132>
     3cc:	96 94       	lsr	r9
     3ce:	87 94       	ror	r8
     3d0:	77 94       	ror	r7
     3d2:	67 94       	ror	r6
     3d4:	0a 94       	dec	r0
     3d6:	d2 f7       	brpl	.-12     	; 0x3cc <_fpadd_parts+0x12a>
     3d8:	21 e0       	ldi	r18, 0x01	; 1
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	50 e0       	ldi	r21, 0x00	; 0
     3e0:	04 c0       	rjmp	.+8      	; 0x3ea <_fpadd_parts+0x148>
     3e2:	22 0f       	add	r18, r18
     3e4:	33 1f       	adc	r19, r19
     3e6:	44 1f       	adc	r20, r20
     3e8:	55 1f       	adc	r21, r21
     3ea:	6a 95       	dec	r22
     3ec:	d2 f7       	brpl	.-12     	; 0x3e2 <_fpadd_parts+0x140>
     3ee:	21 50       	subi	r18, 0x01	; 1
     3f0:	30 40       	sbci	r19, 0x00	; 0
     3f2:	40 40       	sbci	r20, 0x00	; 0
     3f4:	50 40       	sbci	r21, 0x00	; 0
     3f6:	2a 21       	and	r18, r10
     3f8:	3b 21       	and	r19, r11
     3fa:	4c 21       	and	r20, r12
     3fc:	5d 21       	and	r21, r13
     3fe:	21 15       	cp	r18, r1
     400:	31 05       	cpc	r19, r1
     402:	41 05       	cpc	r20, r1
     404:	51 05       	cpc	r21, r1
     406:	21 f0       	breq	.+8      	; 0x410 <_fpadd_parts+0x16e>
     408:	21 e0       	ldi	r18, 0x01	; 1
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	59 01       	movw	r10, r18
     412:	6a 01       	movw	r12, r20
     414:	a6 28       	or	r10, r6
     416:	b7 28       	or	r11, r7
     418:	c8 28       	or	r12, r8
     41a:	d9 28       	or	r13, r9
     41c:	0b c0       	rjmp	.+22     	; 0x434 <_fpadd_parts+0x192>
     41e:	82 15       	cp	r24, r2
     420:	93 05       	cpc	r25, r3
     422:	2c f0       	brlt	.+10     	; 0x42e <_fpadd_parts+0x18c>
     424:	1c 01       	movw	r2, r24
     426:	aa 24       	eor	r10, r10
     428:	bb 24       	eor	r11, r11
     42a:	65 01       	movw	r12, r10
     42c:	03 c0       	rjmp	.+6      	; 0x434 <_fpadd_parts+0x192>
     42e:	ee 24       	eor	r14, r14
     430:	ff 24       	eor	r15, r15
     432:	87 01       	movw	r16, r14
     434:	11 96       	adiw	r26, 0x01	; 1
     436:	9c 91       	ld	r25, X
     438:	d2 01       	movw	r26, r4
     43a:	11 96       	adiw	r26, 0x01	; 1
     43c:	8c 91       	ld	r24, X
     43e:	98 17       	cp	r25, r24
     440:	09 f4       	brne	.+2      	; 0x444 <_fpadd_parts+0x1a2>
     442:	45 c0       	rjmp	.+138    	; 0x4ce <_fpadd_parts+0x22c>
     444:	99 23       	and	r25, r25
     446:	39 f0       	breq	.+14     	; 0x456 <_fpadd_parts+0x1b4>
     448:	a8 01       	movw	r20, r16
     44a:	97 01       	movw	r18, r14
     44c:	2a 19       	sub	r18, r10
     44e:	3b 09       	sbc	r19, r11
     450:	4c 09       	sbc	r20, r12
     452:	5d 09       	sbc	r21, r13
     454:	06 c0       	rjmp	.+12     	; 0x462 <_fpadd_parts+0x1c0>
     456:	a6 01       	movw	r20, r12
     458:	95 01       	movw	r18, r10
     45a:	2e 19       	sub	r18, r14
     45c:	3f 09       	sbc	r19, r15
     45e:	40 0b       	sbc	r20, r16
     460:	51 0b       	sbc	r21, r17
     462:	57 fd       	sbrc	r21, 7
     464:	08 c0       	rjmp	.+16     	; 0x476 <_fpadd_parts+0x1d4>
     466:	11 82       	std	Z+1, r1	; 0x01
     468:	33 82       	std	Z+3, r3	; 0x03
     46a:	22 82       	std	Z+2, r2	; 0x02
     46c:	24 83       	std	Z+4, r18	; 0x04
     46e:	35 83       	std	Z+5, r19	; 0x05
     470:	46 83       	std	Z+6, r20	; 0x06
     472:	57 83       	std	Z+7, r21	; 0x07
     474:	1d c0       	rjmp	.+58     	; 0x4b0 <_fpadd_parts+0x20e>
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	81 83       	std	Z+1, r24	; 0x01
     47a:	33 82       	std	Z+3, r3	; 0x03
     47c:	22 82       	std	Z+2, r2	; 0x02
     47e:	88 27       	eor	r24, r24
     480:	99 27       	eor	r25, r25
     482:	dc 01       	movw	r26, r24
     484:	82 1b       	sub	r24, r18
     486:	93 0b       	sbc	r25, r19
     488:	a4 0b       	sbc	r26, r20
     48a:	b5 0b       	sbc	r27, r21
     48c:	84 83       	std	Z+4, r24	; 0x04
     48e:	95 83       	std	Z+5, r25	; 0x05
     490:	a6 83       	std	Z+6, r26	; 0x06
     492:	b7 83       	std	Z+7, r27	; 0x07
     494:	0d c0       	rjmp	.+26     	; 0x4b0 <_fpadd_parts+0x20e>
     496:	22 0f       	add	r18, r18
     498:	33 1f       	adc	r19, r19
     49a:	44 1f       	adc	r20, r20
     49c:	55 1f       	adc	r21, r21
     49e:	24 83       	std	Z+4, r18	; 0x04
     4a0:	35 83       	std	Z+5, r19	; 0x05
     4a2:	46 83       	std	Z+6, r20	; 0x06
     4a4:	57 83       	std	Z+7, r21	; 0x07
     4a6:	82 81       	ldd	r24, Z+2	; 0x02
     4a8:	93 81       	ldd	r25, Z+3	; 0x03
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	93 83       	std	Z+3, r25	; 0x03
     4ae:	82 83       	std	Z+2, r24	; 0x02
     4b0:	24 81       	ldd	r18, Z+4	; 0x04
     4b2:	35 81       	ldd	r19, Z+5	; 0x05
     4b4:	46 81       	ldd	r20, Z+6	; 0x06
     4b6:	57 81       	ldd	r21, Z+7	; 0x07
     4b8:	da 01       	movw	r26, r20
     4ba:	c9 01       	movw	r24, r18
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	a1 09       	sbc	r26, r1
     4c0:	b1 09       	sbc	r27, r1
     4c2:	8f 5f       	subi	r24, 0xFF	; 255
     4c4:	9f 4f       	sbci	r25, 0xFF	; 255
     4c6:	af 4f       	sbci	r26, 0xFF	; 255
     4c8:	bf 43       	sbci	r27, 0x3F	; 63
     4ca:	28 f3       	brcs	.-54     	; 0x496 <_fpadd_parts+0x1f4>
     4cc:	0b c0       	rjmp	.+22     	; 0x4e4 <_fpadd_parts+0x242>
     4ce:	91 83       	std	Z+1, r25	; 0x01
     4d0:	33 82       	std	Z+3, r3	; 0x03
     4d2:	22 82       	std	Z+2, r2	; 0x02
     4d4:	ea 0c       	add	r14, r10
     4d6:	fb 1c       	adc	r15, r11
     4d8:	0c 1d       	adc	r16, r12
     4da:	1d 1d       	adc	r17, r13
     4dc:	e4 82       	std	Z+4, r14	; 0x04
     4de:	f5 82       	std	Z+5, r15	; 0x05
     4e0:	06 83       	std	Z+6, r16	; 0x06
     4e2:	17 83       	std	Z+7, r17	; 0x07
     4e4:	83 e0       	ldi	r24, 0x03	; 3
     4e6:	80 83       	st	Z, r24
     4e8:	24 81       	ldd	r18, Z+4	; 0x04
     4ea:	35 81       	ldd	r19, Z+5	; 0x05
     4ec:	46 81       	ldd	r20, Z+6	; 0x06
     4ee:	57 81       	ldd	r21, Z+7	; 0x07
     4f0:	57 ff       	sbrs	r21, 7
     4f2:	1a c0       	rjmp	.+52     	; 0x528 <_fpadd_parts+0x286>
     4f4:	c9 01       	movw	r24, r18
     4f6:	aa 27       	eor	r26, r26
     4f8:	97 fd       	sbrc	r25, 7
     4fa:	a0 95       	com	r26
     4fc:	ba 2f       	mov	r27, r26
     4fe:	81 70       	andi	r24, 0x01	; 1
     500:	90 70       	andi	r25, 0x00	; 0
     502:	a0 70       	andi	r26, 0x00	; 0
     504:	b0 70       	andi	r27, 0x00	; 0
     506:	56 95       	lsr	r21
     508:	47 95       	ror	r20
     50a:	37 95       	ror	r19
     50c:	27 95       	ror	r18
     50e:	82 2b       	or	r24, r18
     510:	93 2b       	or	r25, r19
     512:	a4 2b       	or	r26, r20
     514:	b5 2b       	or	r27, r21
     516:	84 83       	std	Z+4, r24	; 0x04
     518:	95 83       	std	Z+5, r25	; 0x05
     51a:	a6 83       	std	Z+6, r26	; 0x06
     51c:	b7 83       	std	Z+7, r27	; 0x07
     51e:	82 81       	ldd	r24, Z+2	; 0x02
     520:	93 81       	ldd	r25, Z+3	; 0x03
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	93 83       	std	Z+3, r25	; 0x03
     526:	82 83       	std	Z+2, r24	; 0x02
     528:	df 01       	movw	r26, r30
     52a:	01 c0       	rjmp	.+2      	; 0x52e <_fpadd_parts+0x28c>
     52c:	d2 01       	movw	r26, r4
     52e:	cd 01       	movw	r24, r26
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	e2 e1       	ldi	r30, 0x12	; 18
     536:	0c 94 31 1a 	jmp	0x3462	; 0x3462 <__epilogue_restores__>

0000053a <__subsf3>:
     53a:	a0 e2       	ldi	r26, 0x20	; 32
     53c:	b0 e0       	ldi	r27, 0x00	; 0
     53e:	e3 ea       	ldi	r30, 0xA3	; 163
     540:	f2 e0       	ldi	r31, 0x02	; 2
     542:	0c 94 21 1a 	jmp	0x3442	; 0x3442 <__prologue_saves__+0x18>
     546:	69 83       	std	Y+1, r22	; 0x01
     548:	7a 83       	std	Y+2, r23	; 0x02
     54a:	8b 83       	std	Y+3, r24	; 0x03
     54c:	9c 83       	std	Y+4, r25	; 0x04
     54e:	2d 83       	std	Y+5, r18	; 0x05
     550:	3e 83       	std	Y+6, r19	; 0x06
     552:	4f 83       	std	Y+7, r20	; 0x07
     554:	58 87       	std	Y+8, r21	; 0x08
     556:	e9 e0       	ldi	r30, 0x09	; 9
     558:	ee 2e       	mov	r14, r30
     55a:	f1 2c       	mov	r15, r1
     55c:	ec 0e       	add	r14, r28
     55e:	fd 1e       	adc	r15, r29
     560:	ce 01       	movw	r24, r28
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	b7 01       	movw	r22, r14
     566:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__unpack_f>
     56a:	8e 01       	movw	r16, r28
     56c:	0f 5e       	subi	r16, 0xEF	; 239
     56e:	1f 4f       	sbci	r17, 0xFF	; 255
     570:	ce 01       	movw	r24, r28
     572:	05 96       	adiw	r24, 0x05	; 5
     574:	b8 01       	movw	r22, r16
     576:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__unpack_f>
     57a:	8a 89       	ldd	r24, Y+18	; 0x12
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	89 27       	eor	r24, r25
     580:	8a 8b       	std	Y+18, r24	; 0x12
     582:	c7 01       	movw	r24, r14
     584:	b8 01       	movw	r22, r16
     586:	ae 01       	movw	r20, r28
     588:	47 5e       	subi	r20, 0xE7	; 231
     58a:	5f 4f       	sbci	r21, 0xFF	; 255
     58c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_fpadd_parts>
     590:	0e 94 ca 06 	call	0xd94	; 0xd94 <__pack_f>
     594:	a0 96       	adiw	r28, 0x20	; 32
     596:	e6 e0       	ldi	r30, 0x06	; 6
     598:	0c 94 3d 1a 	jmp	0x347a	; 0x347a <__epilogue_restores__+0x18>

0000059c <__addsf3>:
     59c:	a0 e2       	ldi	r26, 0x20	; 32
     59e:	b0 e0       	ldi	r27, 0x00	; 0
     5a0:	e4 ed       	ldi	r30, 0xD4	; 212
     5a2:	f2 e0       	ldi	r31, 0x02	; 2
     5a4:	0c 94 21 1a 	jmp	0x3442	; 0x3442 <__prologue_saves__+0x18>
     5a8:	69 83       	std	Y+1, r22	; 0x01
     5aa:	7a 83       	std	Y+2, r23	; 0x02
     5ac:	8b 83       	std	Y+3, r24	; 0x03
     5ae:	9c 83       	std	Y+4, r25	; 0x04
     5b0:	2d 83       	std	Y+5, r18	; 0x05
     5b2:	3e 83       	std	Y+6, r19	; 0x06
     5b4:	4f 83       	std	Y+7, r20	; 0x07
     5b6:	58 87       	std	Y+8, r21	; 0x08
     5b8:	f9 e0       	ldi	r31, 0x09	; 9
     5ba:	ef 2e       	mov	r14, r31
     5bc:	f1 2c       	mov	r15, r1
     5be:	ec 0e       	add	r14, r28
     5c0:	fd 1e       	adc	r15, r29
     5c2:	ce 01       	movw	r24, r28
     5c4:	01 96       	adiw	r24, 0x01	; 1
     5c6:	b7 01       	movw	r22, r14
     5c8:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__unpack_f>
     5cc:	8e 01       	movw	r16, r28
     5ce:	0f 5e       	subi	r16, 0xEF	; 239
     5d0:	1f 4f       	sbci	r17, 0xFF	; 255
     5d2:	ce 01       	movw	r24, r28
     5d4:	05 96       	adiw	r24, 0x05	; 5
     5d6:	b8 01       	movw	r22, r16
     5d8:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__unpack_f>
     5dc:	c7 01       	movw	r24, r14
     5de:	b8 01       	movw	r22, r16
     5e0:	ae 01       	movw	r20, r28
     5e2:	47 5e       	subi	r20, 0xE7	; 231
     5e4:	5f 4f       	sbci	r21, 0xFF	; 255
     5e6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_fpadd_parts>
     5ea:	0e 94 ca 06 	call	0xd94	; 0xd94 <__pack_f>
     5ee:	a0 96       	adiw	r28, 0x20	; 32
     5f0:	e6 e0       	ldi	r30, 0x06	; 6
     5f2:	0c 94 3d 1a 	jmp	0x347a	; 0x347a <__epilogue_restores__+0x18>

000005f6 <__mulsf3>:
     5f6:	a0 e2       	ldi	r26, 0x20	; 32
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f3 e0       	ldi	r31, 0x03	; 3
     5fe:	0c 94 15 1a 	jmp	0x342a	; 0x342a <__prologue_saves__>
     602:	69 83       	std	Y+1, r22	; 0x01
     604:	7a 83       	std	Y+2, r23	; 0x02
     606:	8b 83       	std	Y+3, r24	; 0x03
     608:	9c 83       	std	Y+4, r25	; 0x04
     60a:	2d 83       	std	Y+5, r18	; 0x05
     60c:	3e 83       	std	Y+6, r19	; 0x06
     60e:	4f 83       	std	Y+7, r20	; 0x07
     610:	58 87       	std	Y+8, r21	; 0x08
     612:	ce 01       	movw	r24, r28
     614:	01 96       	adiw	r24, 0x01	; 1
     616:	be 01       	movw	r22, r28
     618:	67 5f       	subi	r22, 0xF7	; 247
     61a:	7f 4f       	sbci	r23, 0xFF	; 255
     61c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__unpack_f>
     620:	ce 01       	movw	r24, r28
     622:	05 96       	adiw	r24, 0x05	; 5
     624:	be 01       	movw	r22, r28
     626:	6f 5e       	subi	r22, 0xEF	; 239
     628:	7f 4f       	sbci	r23, 0xFF	; 255
     62a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__unpack_f>
     62e:	99 85       	ldd	r25, Y+9	; 0x09
     630:	92 30       	cpi	r25, 0x02	; 2
     632:	88 f0       	brcs	.+34     	; 0x656 <__mulsf3+0x60>
     634:	89 89       	ldd	r24, Y+17	; 0x11
     636:	82 30       	cpi	r24, 0x02	; 2
     638:	c8 f0       	brcs	.+50     	; 0x66c <__mulsf3+0x76>
     63a:	94 30       	cpi	r25, 0x04	; 4
     63c:	19 f4       	brne	.+6      	; 0x644 <__mulsf3+0x4e>
     63e:	82 30       	cpi	r24, 0x02	; 2
     640:	51 f4       	brne	.+20     	; 0x656 <__mulsf3+0x60>
     642:	04 c0       	rjmp	.+8      	; 0x64c <__mulsf3+0x56>
     644:	84 30       	cpi	r24, 0x04	; 4
     646:	29 f4       	brne	.+10     	; 0x652 <__mulsf3+0x5c>
     648:	92 30       	cpi	r25, 0x02	; 2
     64a:	81 f4       	brne	.+32     	; 0x66c <__mulsf3+0x76>
     64c:	82 e7       	ldi	r24, 0x72	; 114
     64e:	92 e0       	ldi	r25, 0x02	; 2
     650:	c6 c0       	rjmp	.+396    	; 0x7de <__mulsf3+0x1e8>
     652:	92 30       	cpi	r25, 0x02	; 2
     654:	49 f4       	brne	.+18     	; 0x668 <__mulsf3+0x72>
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	9a 85       	ldd	r25, Y+10	; 0x0a
     65a:	8a 89       	ldd	r24, Y+18	; 0x12
     65c:	98 13       	cpse	r25, r24
     65e:	21 e0       	ldi	r18, 0x01	; 1
     660:	2a 87       	std	Y+10, r18	; 0x0a
     662:	ce 01       	movw	r24, r28
     664:	09 96       	adiw	r24, 0x09	; 9
     666:	bb c0       	rjmp	.+374    	; 0x7de <__mulsf3+0x1e8>
     668:	82 30       	cpi	r24, 0x02	; 2
     66a:	49 f4       	brne	.+18     	; 0x67e <__mulsf3+0x88>
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	9a 85       	ldd	r25, Y+10	; 0x0a
     670:	8a 89       	ldd	r24, Y+18	; 0x12
     672:	98 13       	cpse	r25, r24
     674:	21 e0       	ldi	r18, 0x01	; 1
     676:	2a 8b       	std	Y+18, r18	; 0x12
     678:	ce 01       	movw	r24, r28
     67a:	41 96       	adiw	r24, 0x11	; 17
     67c:	b0 c0       	rjmp	.+352    	; 0x7de <__mulsf3+0x1e8>
     67e:	2d 84       	ldd	r2, Y+13	; 0x0d
     680:	3e 84       	ldd	r3, Y+14	; 0x0e
     682:	4f 84       	ldd	r4, Y+15	; 0x0f
     684:	58 88       	ldd	r5, Y+16	; 0x10
     686:	6d 88       	ldd	r6, Y+21	; 0x15
     688:	7e 88       	ldd	r7, Y+22	; 0x16
     68a:	8f 88       	ldd	r8, Y+23	; 0x17
     68c:	98 8c       	ldd	r9, Y+24	; 0x18
     68e:	ee 24       	eor	r14, r14
     690:	ff 24       	eor	r15, r15
     692:	87 01       	movw	r16, r14
     694:	aa 24       	eor	r10, r10
     696:	bb 24       	eor	r11, r11
     698:	65 01       	movw	r12, r10
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	e0 e0       	ldi	r30, 0x00	; 0
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	c1 01       	movw	r24, r2
     6a8:	81 70       	andi	r24, 0x01	; 1
     6aa:	90 70       	andi	r25, 0x00	; 0
     6ac:	89 2b       	or	r24, r25
     6ae:	e9 f0       	breq	.+58     	; 0x6ea <__mulsf3+0xf4>
     6b0:	e6 0c       	add	r14, r6
     6b2:	f7 1c       	adc	r15, r7
     6b4:	08 1d       	adc	r16, r8
     6b6:	19 1d       	adc	r17, r9
     6b8:	9a 01       	movw	r18, r20
     6ba:	ab 01       	movw	r20, r22
     6bc:	2a 0d       	add	r18, r10
     6be:	3b 1d       	adc	r19, r11
     6c0:	4c 1d       	adc	r20, r12
     6c2:	5d 1d       	adc	r21, r13
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	a0 e0       	ldi	r26, 0x00	; 0
     6ca:	b0 e0       	ldi	r27, 0x00	; 0
     6cc:	e6 14       	cp	r14, r6
     6ce:	f7 04       	cpc	r15, r7
     6d0:	08 05       	cpc	r16, r8
     6d2:	19 05       	cpc	r17, r9
     6d4:	20 f4       	brcc	.+8      	; 0x6de <__mulsf3+0xe8>
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	a0 e0       	ldi	r26, 0x00	; 0
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	ba 01       	movw	r22, r20
     6e0:	a9 01       	movw	r20, r18
     6e2:	48 0f       	add	r20, r24
     6e4:	59 1f       	adc	r21, r25
     6e6:	6a 1f       	adc	r22, r26
     6e8:	7b 1f       	adc	r23, r27
     6ea:	aa 0c       	add	r10, r10
     6ec:	bb 1c       	adc	r11, r11
     6ee:	cc 1c       	adc	r12, r12
     6f0:	dd 1c       	adc	r13, r13
     6f2:	97 fe       	sbrs	r9, 7
     6f4:	08 c0       	rjmp	.+16     	; 0x706 <__mulsf3+0x110>
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	a0 e0       	ldi	r26, 0x00	; 0
     6fc:	b0 e0       	ldi	r27, 0x00	; 0
     6fe:	a8 2a       	or	r10, r24
     700:	b9 2a       	or	r11, r25
     702:	ca 2a       	or	r12, r26
     704:	db 2a       	or	r13, r27
     706:	31 96       	adiw	r30, 0x01	; 1
     708:	e0 32       	cpi	r30, 0x20	; 32
     70a:	f1 05       	cpc	r31, r1
     70c:	49 f0       	breq	.+18     	; 0x720 <__mulsf3+0x12a>
     70e:	66 0c       	add	r6, r6
     710:	77 1c       	adc	r7, r7
     712:	88 1c       	adc	r8, r8
     714:	99 1c       	adc	r9, r9
     716:	56 94       	lsr	r5
     718:	47 94       	ror	r4
     71a:	37 94       	ror	r3
     71c:	27 94       	ror	r2
     71e:	c3 cf       	rjmp	.-122    	; 0x6a6 <__mulsf3+0xb0>
     720:	fa 85       	ldd	r31, Y+10	; 0x0a
     722:	ea 89       	ldd	r30, Y+18	; 0x12
     724:	2b 89       	ldd	r18, Y+19	; 0x13
     726:	3c 89       	ldd	r19, Y+20	; 0x14
     728:	8b 85       	ldd	r24, Y+11	; 0x0b
     72a:	9c 85       	ldd	r25, Y+12	; 0x0c
     72c:	28 0f       	add	r18, r24
     72e:	39 1f       	adc	r19, r25
     730:	2e 5f       	subi	r18, 0xFE	; 254
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	17 c0       	rjmp	.+46     	; 0x764 <__mulsf3+0x16e>
     736:	ca 01       	movw	r24, r20
     738:	81 70       	andi	r24, 0x01	; 1
     73a:	90 70       	andi	r25, 0x00	; 0
     73c:	89 2b       	or	r24, r25
     73e:	61 f0       	breq	.+24     	; 0x758 <__mulsf3+0x162>
     740:	16 95       	lsr	r17
     742:	07 95       	ror	r16
     744:	f7 94       	ror	r15
     746:	e7 94       	ror	r14
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	a0 e0       	ldi	r26, 0x00	; 0
     74e:	b0 e8       	ldi	r27, 0x80	; 128
     750:	e8 2a       	or	r14, r24
     752:	f9 2a       	or	r15, r25
     754:	0a 2b       	or	r16, r26
     756:	1b 2b       	or	r17, r27
     758:	76 95       	lsr	r23
     75a:	67 95       	ror	r22
     75c:	57 95       	ror	r21
     75e:	47 95       	ror	r20
     760:	2f 5f       	subi	r18, 0xFF	; 255
     762:	3f 4f       	sbci	r19, 0xFF	; 255
     764:	77 fd       	sbrc	r23, 7
     766:	e7 cf       	rjmp	.-50     	; 0x736 <__mulsf3+0x140>
     768:	0c c0       	rjmp	.+24     	; 0x782 <__mulsf3+0x18c>
     76a:	44 0f       	add	r20, r20
     76c:	55 1f       	adc	r21, r21
     76e:	66 1f       	adc	r22, r22
     770:	77 1f       	adc	r23, r23
     772:	17 fd       	sbrc	r17, 7
     774:	41 60       	ori	r20, 0x01	; 1
     776:	ee 0c       	add	r14, r14
     778:	ff 1c       	adc	r15, r15
     77a:	00 1f       	adc	r16, r16
     77c:	11 1f       	adc	r17, r17
     77e:	21 50       	subi	r18, 0x01	; 1
     780:	30 40       	sbci	r19, 0x00	; 0
     782:	40 30       	cpi	r20, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	59 07       	cpc	r21, r25
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	69 07       	cpc	r22, r25
     78c:	90 e4       	ldi	r25, 0x40	; 64
     78e:	79 07       	cpc	r23, r25
     790:	60 f3       	brcs	.-40     	; 0x76a <__mulsf3+0x174>
     792:	2b 8f       	std	Y+27, r18	; 0x1b
     794:	3c 8f       	std	Y+28, r19	; 0x1c
     796:	db 01       	movw	r26, r22
     798:	ca 01       	movw	r24, r20
     79a:	8f 77       	andi	r24, 0x7F	; 127
     79c:	90 70       	andi	r25, 0x00	; 0
     79e:	a0 70       	andi	r26, 0x00	; 0
     7a0:	b0 70       	andi	r27, 0x00	; 0
     7a2:	80 34       	cpi	r24, 0x40	; 64
     7a4:	91 05       	cpc	r25, r1
     7a6:	a1 05       	cpc	r26, r1
     7a8:	b1 05       	cpc	r27, r1
     7aa:	61 f4       	brne	.+24     	; 0x7c4 <__mulsf3+0x1ce>
     7ac:	47 fd       	sbrc	r20, 7
     7ae:	0a c0       	rjmp	.+20     	; 0x7c4 <__mulsf3+0x1ce>
     7b0:	e1 14       	cp	r14, r1
     7b2:	f1 04       	cpc	r15, r1
     7b4:	01 05       	cpc	r16, r1
     7b6:	11 05       	cpc	r17, r1
     7b8:	29 f0       	breq	.+10     	; 0x7c4 <__mulsf3+0x1ce>
     7ba:	40 5c       	subi	r20, 0xC0	; 192
     7bc:	5f 4f       	sbci	r21, 0xFF	; 255
     7be:	6f 4f       	sbci	r22, 0xFF	; 255
     7c0:	7f 4f       	sbci	r23, 0xFF	; 255
     7c2:	40 78       	andi	r20, 0x80	; 128
     7c4:	1a 8e       	std	Y+26, r1	; 0x1a
     7c6:	fe 17       	cp	r31, r30
     7c8:	11 f0       	breq	.+4      	; 0x7ce <__mulsf3+0x1d8>
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	8a 8f       	std	Y+26, r24	; 0x1a
     7ce:	4d 8f       	std	Y+29, r20	; 0x1d
     7d0:	5e 8f       	std	Y+30, r21	; 0x1e
     7d2:	6f 8f       	std	Y+31, r22	; 0x1f
     7d4:	78 a3       	std	Y+32, r23	; 0x20
     7d6:	83 e0       	ldi	r24, 0x03	; 3
     7d8:	89 8f       	std	Y+25, r24	; 0x19
     7da:	ce 01       	movw	r24, r28
     7dc:	49 96       	adiw	r24, 0x19	; 25
     7de:	0e 94 ca 06 	call	0xd94	; 0xd94 <__pack_f>
     7e2:	a0 96       	adiw	r28, 0x20	; 32
     7e4:	e2 e1       	ldi	r30, 0x12	; 18
     7e6:	0c 94 31 1a 	jmp	0x3462	; 0x3462 <__epilogue_restores__>

000007ea <__divsf3>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__prologue_saves__+0x10>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	b9 e0       	ldi	r27, 0x09	; 9
     808:	eb 2e       	mov	r14, r27
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__unpack_f>
     82a:	29 85       	ldd	r18, Y+9	; 0x09
     82c:	22 30       	cpi	r18, 0x02	; 2
     82e:	08 f4       	brcc	.+2      	; 0x832 <__divsf3+0x48>
     830:	7e c0       	rjmp	.+252    	; 0x92e <__stack+0xcf>
     832:	39 89       	ldd	r19, Y+17	; 0x11
     834:	32 30       	cpi	r19, 0x02	; 2
     836:	10 f4       	brcc	.+4      	; 0x83c <__divsf3+0x52>
     838:	b8 01       	movw	r22, r16
     83a:	7c c0       	rjmp	.+248    	; 0x934 <__stack+0xd5>
     83c:	8a 85       	ldd	r24, Y+10	; 0x0a
     83e:	9a 89       	ldd	r25, Y+18	; 0x12
     840:	89 27       	eor	r24, r25
     842:	8a 87       	std	Y+10, r24	; 0x0a
     844:	24 30       	cpi	r18, 0x04	; 4
     846:	11 f0       	breq	.+4      	; 0x84c <__divsf3+0x62>
     848:	22 30       	cpi	r18, 0x02	; 2
     84a:	31 f4       	brne	.+12     	; 0x858 <__divsf3+0x6e>
     84c:	23 17       	cp	r18, r19
     84e:	09 f0       	breq	.+2      	; 0x852 <__divsf3+0x68>
     850:	6e c0       	rjmp	.+220    	; 0x92e <__stack+0xcf>
     852:	62 e7       	ldi	r22, 0x72	; 114
     854:	72 e0       	ldi	r23, 0x02	; 2
     856:	6e c0       	rjmp	.+220    	; 0x934 <__stack+0xd5>
     858:	34 30       	cpi	r19, 0x04	; 4
     85a:	39 f4       	brne	.+14     	; 0x86a <__stack+0xb>
     85c:	1d 86       	std	Y+13, r1	; 0x0d
     85e:	1e 86       	std	Y+14, r1	; 0x0e
     860:	1f 86       	std	Y+15, r1	; 0x0f
     862:	18 8a       	std	Y+16, r1	; 0x10
     864:	1c 86       	std	Y+12, r1	; 0x0c
     866:	1b 86       	std	Y+11, r1	; 0x0b
     868:	04 c0       	rjmp	.+8      	; 0x872 <__stack+0x13>
     86a:	32 30       	cpi	r19, 0x02	; 2
     86c:	21 f4       	brne	.+8      	; 0x876 <__stack+0x17>
     86e:	84 e0       	ldi	r24, 0x04	; 4
     870:	89 87       	std	Y+9, r24	; 0x09
     872:	b7 01       	movw	r22, r14
     874:	5f c0       	rjmp	.+190    	; 0x934 <__stack+0xd5>
     876:	2b 85       	ldd	r18, Y+11	; 0x0b
     878:	3c 85       	ldd	r19, Y+12	; 0x0c
     87a:	8b 89       	ldd	r24, Y+19	; 0x13
     87c:	9c 89       	ldd	r25, Y+20	; 0x14
     87e:	28 1b       	sub	r18, r24
     880:	39 0b       	sbc	r19, r25
     882:	3c 87       	std	Y+12, r19	; 0x0c
     884:	2b 87       	std	Y+11, r18	; 0x0b
     886:	ed 84       	ldd	r14, Y+13	; 0x0d
     888:	fe 84       	ldd	r15, Y+14	; 0x0e
     88a:	0f 85       	ldd	r16, Y+15	; 0x0f
     88c:	18 89       	ldd	r17, Y+16	; 0x10
     88e:	ad 88       	ldd	r10, Y+21	; 0x15
     890:	be 88       	ldd	r11, Y+22	; 0x16
     892:	cf 88       	ldd	r12, Y+23	; 0x17
     894:	d8 8c       	ldd	r13, Y+24	; 0x18
     896:	ea 14       	cp	r14, r10
     898:	fb 04       	cpc	r15, r11
     89a:	0c 05       	cpc	r16, r12
     89c:	1d 05       	cpc	r17, r13
     89e:	40 f4       	brcc	.+16     	; 0x8b0 <__stack+0x51>
     8a0:	ee 0c       	add	r14, r14
     8a2:	ff 1c       	adc	r15, r15
     8a4:	00 1f       	adc	r16, r16
     8a6:	11 1f       	adc	r17, r17
     8a8:	21 50       	subi	r18, 0x01	; 1
     8aa:	30 40       	sbci	r19, 0x00	; 0
     8ac:	3c 87       	std	Y+12, r19	; 0x0c
     8ae:	2b 87       	std	Y+11, r18	; 0x0b
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	a0 e0       	ldi	r26, 0x00	; 0
     8be:	b0 e4       	ldi	r27, 0x40	; 64
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	ea 14       	cp	r14, r10
     8c6:	fb 04       	cpc	r15, r11
     8c8:	0c 05       	cpc	r16, r12
     8ca:	1d 05       	cpc	r17, r13
     8cc:	40 f0       	brcs	.+16     	; 0x8de <__stack+0x7f>
     8ce:	28 2b       	or	r18, r24
     8d0:	39 2b       	or	r19, r25
     8d2:	4a 2b       	or	r20, r26
     8d4:	5b 2b       	or	r21, r27
     8d6:	ea 18       	sub	r14, r10
     8d8:	fb 08       	sbc	r15, r11
     8da:	0c 09       	sbc	r16, r12
     8dc:	1d 09       	sbc	r17, r13
     8de:	b6 95       	lsr	r27
     8e0:	a7 95       	ror	r26
     8e2:	97 95       	ror	r25
     8e4:	87 95       	ror	r24
     8e6:	ee 0c       	add	r14, r14
     8e8:	ff 1c       	adc	r15, r15
     8ea:	00 1f       	adc	r16, r16
     8ec:	11 1f       	adc	r17, r17
     8ee:	6f 5f       	subi	r22, 0xFF	; 255
     8f0:	7f 4f       	sbci	r23, 0xFF	; 255
     8f2:	6f 31       	cpi	r22, 0x1F	; 31
     8f4:	71 05       	cpc	r23, r1
     8f6:	31 f7       	brne	.-52     	; 0x8c4 <__stack+0x65>
     8f8:	da 01       	movw	r26, r20
     8fa:	c9 01       	movw	r24, r18
     8fc:	8f 77       	andi	r24, 0x7F	; 127
     8fe:	90 70       	andi	r25, 0x00	; 0
     900:	a0 70       	andi	r26, 0x00	; 0
     902:	b0 70       	andi	r27, 0x00	; 0
     904:	80 34       	cpi	r24, 0x40	; 64
     906:	91 05       	cpc	r25, r1
     908:	a1 05       	cpc	r26, r1
     90a:	b1 05       	cpc	r27, r1
     90c:	61 f4       	brne	.+24     	; 0x926 <__stack+0xc7>
     90e:	27 fd       	sbrc	r18, 7
     910:	0a c0       	rjmp	.+20     	; 0x926 <__stack+0xc7>
     912:	e1 14       	cp	r14, r1
     914:	f1 04       	cpc	r15, r1
     916:	01 05       	cpc	r16, r1
     918:	11 05       	cpc	r17, r1
     91a:	29 f0       	breq	.+10     	; 0x926 <__stack+0xc7>
     91c:	20 5c       	subi	r18, 0xC0	; 192
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	20 78       	andi	r18, 0x80	; 128
     926:	2d 87       	std	Y+13, r18	; 0x0d
     928:	3e 87       	std	Y+14, r19	; 0x0e
     92a:	4f 87       	std	Y+15, r20	; 0x0f
     92c:	58 8b       	std	Y+16, r21	; 0x10
     92e:	be 01       	movw	r22, r28
     930:	67 5f       	subi	r22, 0xF7	; 247
     932:	7f 4f       	sbci	r23, 0xFF	; 255
     934:	cb 01       	movw	r24, r22
     936:	0e 94 ca 06 	call	0xd94	; 0xd94 <__pack_f>
     93a:	68 96       	adiw	r28, 0x18	; 24
     93c:	ea e0       	ldi	r30, 0x0A	; 10
     93e:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__epilogue_restores__+0x10>

00000942 <__gesf2>:
     942:	a8 e1       	ldi	r26, 0x18	; 24
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 21 1a 	jmp	0x3442	; 0x3442 <__prologue_saves__+0x18>
     94e:	69 83       	std	Y+1, r22	; 0x01
     950:	7a 83       	std	Y+2, r23	; 0x02
     952:	8b 83       	std	Y+3, r24	; 0x03
     954:	9c 83       	std	Y+4, r25	; 0x04
     956:	2d 83       	std	Y+5, r18	; 0x05
     958:	3e 83       	std	Y+6, r19	; 0x06
     95a:	4f 83       	std	Y+7, r20	; 0x07
     95c:	58 87       	std	Y+8, r21	; 0x08
     95e:	89 e0       	ldi	r24, 0x09	; 9
     960:	e8 2e       	mov	r14, r24
     962:	f1 2c       	mov	r15, r1
     964:	ec 0e       	add	r14, r28
     966:	fd 1e       	adc	r15, r29
     968:	ce 01       	movw	r24, r28
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	b7 01       	movw	r22, r14
     96e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__unpack_f>
     972:	8e 01       	movw	r16, r28
     974:	0f 5e       	subi	r16, 0xEF	; 239
     976:	1f 4f       	sbci	r17, 0xFF	; 255
     978:	ce 01       	movw	r24, r28
     97a:	05 96       	adiw	r24, 0x05	; 5
     97c:	b8 01       	movw	r22, r16
     97e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__unpack_f>
     982:	89 85       	ldd	r24, Y+9	; 0x09
     984:	82 30       	cpi	r24, 0x02	; 2
     986:	40 f0       	brcs	.+16     	; 0x998 <__gesf2+0x56>
     988:	89 89       	ldd	r24, Y+17	; 0x11
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	28 f0       	brcs	.+10     	; 0x998 <__gesf2+0x56>
     98e:	c7 01       	movw	r24, r14
     990:	b8 01       	movw	r22, r16
     992:	0e 94 17 08 	call	0x102e	; 0x102e <__fpcmp_parts_f>
     996:	01 c0       	rjmp	.+2      	; 0x99a <__gesf2+0x58>
     998:	8f ef       	ldi	r24, 0xFF	; 255
     99a:	68 96       	adiw	r28, 0x18	; 24
     99c:	e6 e0       	ldi	r30, 0x06	; 6
     99e:	0c 94 3d 1a 	jmp	0x347a	; 0x347a <__epilogue_restores__+0x18>

000009a2 <__floatsisf>:
     9a2:	a8 e0       	ldi	r26, 0x08	; 8
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	e7 ed       	ldi	r30, 0xD7	; 215
     9a8:	f4 e0       	ldi	r31, 0x04	; 4
     9aa:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <__prologue_saves__+0x12>
     9ae:	9b 01       	movw	r18, r22
     9b0:	ac 01       	movw	r20, r24
     9b2:	83 e0       	ldi	r24, 0x03	; 3
     9b4:	89 83       	std	Y+1, r24	; 0x01
     9b6:	da 01       	movw	r26, r20
     9b8:	c9 01       	movw	r24, r18
     9ba:	88 27       	eor	r24, r24
     9bc:	b7 fd       	sbrc	r27, 7
     9be:	83 95       	inc	r24
     9c0:	99 27       	eor	r25, r25
     9c2:	aa 27       	eor	r26, r26
     9c4:	bb 27       	eor	r27, r27
     9c6:	b8 2e       	mov	r11, r24
     9c8:	21 15       	cp	r18, r1
     9ca:	31 05       	cpc	r19, r1
     9cc:	41 05       	cpc	r20, r1
     9ce:	51 05       	cpc	r21, r1
     9d0:	19 f4       	brne	.+6      	; 0x9d8 <__floatsisf+0x36>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	3a c0       	rjmp	.+116    	; 0xa4c <__floatsisf+0xaa>
     9d8:	88 23       	and	r24, r24
     9da:	a9 f0       	breq	.+42     	; 0xa06 <__floatsisf+0x64>
     9dc:	20 30       	cpi	r18, 0x00	; 0
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	38 07       	cpc	r19, r24
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	48 07       	cpc	r20, r24
     9e6:	80 e8       	ldi	r24, 0x80	; 128
     9e8:	58 07       	cpc	r21, r24
     9ea:	29 f4       	brne	.+10     	; 0x9f6 <__floatsisf+0x54>
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	9f ec       	ldi	r25, 0xCF	; 207
     9f4:	30 c0       	rjmp	.+96     	; 0xa56 <__floatsisf+0xb4>
     9f6:	ee 24       	eor	r14, r14
     9f8:	ff 24       	eor	r15, r15
     9fa:	87 01       	movw	r16, r14
     9fc:	e2 1a       	sub	r14, r18
     9fe:	f3 0a       	sbc	r15, r19
     a00:	04 0b       	sbc	r16, r20
     a02:	15 0b       	sbc	r17, r21
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <__floatsisf+0x68>
     a06:	79 01       	movw	r14, r18
     a08:	8a 01       	movw	r16, r20
     a0a:	8e e1       	ldi	r24, 0x1E	; 30
     a0c:	c8 2e       	mov	r12, r24
     a0e:	d1 2c       	mov	r13, r1
     a10:	dc 82       	std	Y+4, r13	; 0x04
     a12:	cb 82       	std	Y+3, r12	; 0x03
     a14:	ed 82       	std	Y+5, r14	; 0x05
     a16:	fe 82       	std	Y+6, r15	; 0x06
     a18:	0f 83       	std	Y+7, r16	; 0x07
     a1a:	18 87       	std	Y+8, r17	; 0x08
     a1c:	c8 01       	movw	r24, r16
     a1e:	b7 01       	movw	r22, r14
     a20:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__clzsi2>
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	18 16       	cp	r1, r24
     a28:	19 06       	cpc	r1, r25
     a2a:	84 f4       	brge	.+32     	; 0xa4c <__floatsisf+0xaa>
     a2c:	08 2e       	mov	r0, r24
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__floatsisf+0x96>
     a30:	ee 0c       	add	r14, r14
     a32:	ff 1c       	adc	r15, r15
     a34:	00 1f       	adc	r16, r16
     a36:	11 1f       	adc	r17, r17
     a38:	0a 94       	dec	r0
     a3a:	d2 f7       	brpl	.-12     	; 0xa30 <__floatsisf+0x8e>
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 1a       	sub	r12, r24
     a46:	d9 0a       	sbc	r13, r25
     a48:	dc 82       	std	Y+4, r13	; 0x04
     a4a:	cb 82       	std	Y+3, r12	; 0x03
     a4c:	ba 82       	std	Y+2, r11	; 0x02
     a4e:	ce 01       	movw	r24, r28
     a50:	01 96       	adiw	r24, 0x01	; 1
     a52:	0e 94 ca 06 	call	0xd94	; 0xd94 <__pack_f>
     a56:	28 96       	adiw	r28, 0x08	; 8
     a58:	e9 e0       	ldi	r30, 0x09	; 9
     a5a:	0c 94 3a 1a 	jmp	0x3474	; 0x3474 <__epilogue_restores__+0x12>

00000a5e <__fixsfsi>:
     a5e:	ac e0       	ldi	r26, 0x0C	; 12
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	e5 e3       	ldi	r30, 0x35	; 53
     a64:	f5 e0       	ldi	r31, 0x05	; 5
     a66:	0c 94 25 1a 	jmp	0x344a	; 0x344a <__prologue_saves__+0x20>
     a6a:	69 83       	std	Y+1, r22	; 0x01
     a6c:	7a 83       	std	Y+2, r23	; 0x02
     a6e:	8b 83       	std	Y+3, r24	; 0x03
     a70:	9c 83       	std	Y+4, r25	; 0x04
     a72:	ce 01       	movw	r24, r28
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	be 01       	movw	r22, r28
     a78:	6b 5f       	subi	r22, 0xFB	; 251
     a7a:	7f 4f       	sbci	r23, 0xFF	; 255
     a7c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__unpack_f>
     a80:	8d 81       	ldd	r24, Y+5	; 0x05
     a82:	82 30       	cpi	r24, 0x02	; 2
     a84:	61 f1       	breq	.+88     	; 0xade <__fixsfsi+0x80>
     a86:	82 30       	cpi	r24, 0x02	; 2
     a88:	50 f1       	brcs	.+84     	; 0xade <__fixsfsi+0x80>
     a8a:	84 30       	cpi	r24, 0x04	; 4
     a8c:	21 f4       	brne	.+8      	; 0xa96 <__fixsfsi+0x38>
     a8e:	8e 81       	ldd	r24, Y+6	; 0x06
     a90:	88 23       	and	r24, r24
     a92:	51 f1       	breq	.+84     	; 0xae8 <__fixsfsi+0x8a>
     a94:	2e c0       	rjmp	.+92     	; 0xaf2 <__fixsfsi+0x94>
     a96:	2f 81       	ldd	r18, Y+7	; 0x07
     a98:	38 85       	ldd	r19, Y+8	; 0x08
     a9a:	37 fd       	sbrc	r19, 7
     a9c:	20 c0       	rjmp	.+64     	; 0xade <__fixsfsi+0x80>
     a9e:	6e 81       	ldd	r22, Y+6	; 0x06
     aa0:	2f 31       	cpi	r18, 0x1F	; 31
     aa2:	31 05       	cpc	r19, r1
     aa4:	1c f0       	brlt	.+6      	; 0xaac <__fixsfsi+0x4e>
     aa6:	66 23       	and	r22, r22
     aa8:	f9 f0       	breq	.+62     	; 0xae8 <__fixsfsi+0x8a>
     aaa:	23 c0       	rjmp	.+70     	; 0xaf2 <__fixsfsi+0x94>
     aac:	8e e1       	ldi	r24, 0x1E	; 30
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	82 1b       	sub	r24, r18
     ab2:	93 0b       	sbc	r25, r19
     ab4:	29 85       	ldd	r18, Y+9	; 0x09
     ab6:	3a 85       	ldd	r19, Y+10	; 0x0a
     ab8:	4b 85       	ldd	r20, Y+11	; 0x0b
     aba:	5c 85       	ldd	r21, Y+12	; 0x0c
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__fixsfsi+0x68>
     abe:	56 95       	lsr	r21
     ac0:	47 95       	ror	r20
     ac2:	37 95       	ror	r19
     ac4:	27 95       	ror	r18
     ac6:	8a 95       	dec	r24
     ac8:	d2 f7       	brpl	.-12     	; 0xabe <__fixsfsi+0x60>
     aca:	66 23       	and	r22, r22
     acc:	b1 f0       	breq	.+44     	; 0xafa <__fixsfsi+0x9c>
     ace:	50 95       	com	r21
     ad0:	40 95       	com	r20
     ad2:	30 95       	com	r19
     ad4:	21 95       	neg	r18
     ad6:	3f 4f       	sbci	r19, 0xFF	; 255
     ad8:	4f 4f       	sbci	r20, 0xFF	; 255
     ada:	5f 4f       	sbci	r21, 0xFF	; 255
     adc:	0e c0       	rjmp	.+28     	; 0xafa <__fixsfsi+0x9c>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	40 e0       	ldi	r20, 0x00	; 0
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	09 c0       	rjmp	.+18     	; 0xafa <__fixsfsi+0x9c>
     ae8:	2f ef       	ldi	r18, 0xFF	; 255
     aea:	3f ef       	ldi	r19, 0xFF	; 255
     aec:	4f ef       	ldi	r20, 0xFF	; 255
     aee:	5f e7       	ldi	r21, 0x7F	; 127
     af0:	04 c0       	rjmp	.+8      	; 0xafa <__fixsfsi+0x9c>
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	40 e0       	ldi	r20, 0x00	; 0
     af8:	50 e8       	ldi	r21, 0x80	; 128
     afa:	b9 01       	movw	r22, r18
     afc:	ca 01       	movw	r24, r20
     afe:	2c 96       	adiw	r28, 0x0c	; 12
     b00:	e2 e0       	ldi	r30, 0x02	; 2
     b02:	0c 94 41 1a 	jmp	0x3482	; 0x3482 <__epilogue_restores__+0x20>

00000b06 <__floatunsisf>:
     b06:	a8 e0       	ldi	r26, 0x08	; 8
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	e9 e8       	ldi	r30, 0x89	; 137
     b0c:	f5 e0       	ldi	r31, 0x05	; 5
     b0e:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__prologue_saves__+0x10>
     b12:	7b 01       	movw	r14, r22
     b14:	8c 01       	movw	r16, r24
     b16:	61 15       	cp	r22, r1
     b18:	71 05       	cpc	r23, r1
     b1a:	81 05       	cpc	r24, r1
     b1c:	91 05       	cpc	r25, r1
     b1e:	19 f4       	brne	.+6      	; 0xb26 <__floatunsisf+0x20>
     b20:	82 e0       	ldi	r24, 0x02	; 2
     b22:	89 83       	std	Y+1, r24	; 0x01
     b24:	60 c0       	rjmp	.+192    	; 0xbe6 <__floatunsisf+0xe0>
     b26:	83 e0       	ldi	r24, 0x03	; 3
     b28:	89 83       	std	Y+1, r24	; 0x01
     b2a:	8e e1       	ldi	r24, 0x1E	; 30
     b2c:	c8 2e       	mov	r12, r24
     b2e:	d1 2c       	mov	r13, r1
     b30:	dc 82       	std	Y+4, r13	; 0x04
     b32:	cb 82       	std	Y+3, r12	; 0x03
     b34:	ed 82       	std	Y+5, r14	; 0x05
     b36:	fe 82       	std	Y+6, r15	; 0x06
     b38:	0f 83       	std	Y+7, r16	; 0x07
     b3a:	18 87       	std	Y+8, r17	; 0x08
     b3c:	c8 01       	movw	r24, r16
     b3e:	b7 01       	movw	r22, r14
     b40:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__clzsi2>
     b44:	fc 01       	movw	r30, r24
     b46:	31 97       	sbiw	r30, 0x01	; 1
     b48:	f7 ff       	sbrs	r31, 7
     b4a:	3b c0       	rjmp	.+118    	; 0xbc2 <__floatunsisf+0xbc>
     b4c:	22 27       	eor	r18, r18
     b4e:	33 27       	eor	r19, r19
     b50:	2e 1b       	sub	r18, r30
     b52:	3f 0b       	sbc	r19, r31
     b54:	57 01       	movw	r10, r14
     b56:	68 01       	movw	r12, r16
     b58:	02 2e       	mov	r0, r18
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__floatunsisf+0x5e>
     b5c:	d6 94       	lsr	r13
     b5e:	c7 94       	ror	r12
     b60:	b7 94       	ror	r11
     b62:	a7 94       	ror	r10
     b64:	0a 94       	dec	r0
     b66:	d2 f7       	brpl	.-12     	; 0xb5c <__floatunsisf+0x56>
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	a0 e0       	ldi	r26, 0x00	; 0
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__floatunsisf+0x7c>
     b7a:	88 0f       	add	r24, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	aa 1f       	adc	r26, r26
     b80:	bb 1f       	adc	r27, r27
     b82:	2a 95       	dec	r18
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__floatunsisf+0x74>
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	a1 09       	sbc	r26, r1
     b8a:	b1 09       	sbc	r27, r1
     b8c:	8e 21       	and	r24, r14
     b8e:	9f 21       	and	r25, r15
     b90:	a0 23       	and	r26, r16
     b92:	b1 23       	and	r27, r17
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	a1 05       	cpc	r26, r1
     b98:	b1 05       	cpc	r27, r1
     b9a:	21 f0       	breq	.+8      	; 0xba4 <__floatunsisf+0x9e>
     b9c:	41 e0       	ldi	r20, 0x01	; 1
     b9e:	50 e0       	ldi	r21, 0x00	; 0
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	4a 29       	or	r20, r10
     ba6:	5b 29       	or	r21, r11
     ba8:	6c 29       	or	r22, r12
     baa:	7d 29       	or	r23, r13
     bac:	4d 83       	std	Y+5, r20	; 0x05
     bae:	5e 83       	std	Y+6, r21	; 0x06
     bb0:	6f 83       	std	Y+7, r22	; 0x07
     bb2:	78 87       	std	Y+8, r23	; 0x08
     bb4:	8e e1       	ldi	r24, 0x1E	; 30
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	8e 1b       	sub	r24, r30
     bba:	9f 0b       	sbc	r25, r31
     bbc:	9c 83       	std	Y+4, r25	; 0x04
     bbe:	8b 83       	std	Y+3, r24	; 0x03
     bc0:	12 c0       	rjmp	.+36     	; 0xbe6 <__floatunsisf+0xe0>
     bc2:	30 97       	sbiw	r30, 0x00	; 0
     bc4:	81 f0       	breq	.+32     	; 0xbe6 <__floatunsisf+0xe0>
     bc6:	0e 2e       	mov	r0, r30
     bc8:	04 c0       	rjmp	.+8      	; 0xbd2 <__floatunsisf+0xcc>
     bca:	ee 0c       	add	r14, r14
     bcc:	ff 1c       	adc	r15, r15
     bce:	00 1f       	adc	r16, r16
     bd0:	11 1f       	adc	r17, r17
     bd2:	0a 94       	dec	r0
     bd4:	d2 f7       	brpl	.-12     	; 0xbca <__floatunsisf+0xc4>
     bd6:	ed 82       	std	Y+5, r14	; 0x05
     bd8:	fe 82       	std	Y+6, r15	; 0x06
     bda:	0f 83       	std	Y+7, r16	; 0x07
     bdc:	18 87       	std	Y+8, r17	; 0x08
     bde:	ce 1a       	sub	r12, r30
     be0:	df 0a       	sbc	r13, r31
     be2:	dc 82       	std	Y+4, r13	; 0x04
     be4:	cb 82       	std	Y+3, r12	; 0x03
     be6:	1a 82       	std	Y+2, r1	; 0x02
     be8:	ce 01       	movw	r24, r28
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	0e 94 ca 06 	call	0xd94	; 0xd94 <__pack_f>
     bf0:	28 96       	adiw	r28, 0x08	; 8
     bf2:	ea e0       	ldi	r30, 0x0A	; 10
     bf4:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__epilogue_restores__+0x10>

00000bf8 <__lshrdi3>:
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	df 93       	push	r29
     c00:	cf 93       	push	r28
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	60 97       	sbiw	r28, 0x10	; 16
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	cd bf       	out	0x3d, r28	; 61
     c12:	a8 2f       	mov	r26, r24
     c14:	00 23       	and	r16, r16
     c16:	09 f4       	brne	.+2      	; 0xc1a <__lshrdi3+0x22>
     c18:	61 c0       	rjmp	.+194    	; 0xcdc <__lshrdi3+0xe4>
     c1a:	7e 01       	movw	r14, r28
     c1c:	08 94       	sec
     c1e:	e1 1c       	adc	r14, r1
     c20:	f1 1c       	adc	r15, r1
     c22:	88 e0       	ldi	r24, 0x08	; 8
     c24:	f7 01       	movw	r30, r14
     c26:	11 92       	st	Z+, r1
     c28:	8a 95       	dec	r24
     c2a:	e9 f7       	brne	.-6      	; 0xc26 <__lshrdi3+0x2e>
     c2c:	29 83       	std	Y+1, r18	; 0x01
     c2e:	3a 83       	std	Y+2, r19	; 0x02
     c30:	4b 83       	std	Y+3, r20	; 0x03
     c32:	5c 83       	std	Y+4, r21	; 0x04
     c34:	6d 83       	std	Y+5, r22	; 0x05
     c36:	7e 83       	std	Y+6, r23	; 0x06
     c38:	af 83       	std	Y+7, r26	; 0x07
     c3a:	98 87       	std	Y+8, r25	; 0x08
     c3c:	80 e2       	ldi	r24, 0x20	; 32
     c3e:	80 1b       	sub	r24, r16
     c40:	e8 2f       	mov	r30, r24
     c42:	ff 27       	eor	r31, r31
     c44:	e7 fd       	sbrc	r30, 7
     c46:	f0 95       	com	r31
     c48:	4d 81       	ldd	r20, Y+5	; 0x05
     c4a:	5e 81       	ldd	r21, Y+6	; 0x06
     c4c:	6f 81       	ldd	r22, Y+7	; 0x07
     c4e:	78 85       	ldd	r23, Y+8	; 0x08
     c50:	18 16       	cp	r1, r24
     c52:	84 f0       	brlt	.+32     	; 0xc74 <__lshrdi3+0x7c>
     c54:	1d 86       	std	Y+13, r1	; 0x0d
     c56:	1e 86       	std	Y+14, r1	; 0x0e
     c58:	1f 86       	std	Y+15, r1	; 0x0f
     c5a:	18 8a       	std	Y+16, r1	; 0x10
     c5c:	88 27       	eor	r24, r24
     c5e:	99 27       	eor	r25, r25
     c60:	8e 1b       	sub	r24, r30
     c62:	9f 0b       	sbc	r25, r31
     c64:	04 c0       	rjmp	.+8      	; 0xc6e <__lshrdi3+0x76>
     c66:	76 95       	lsr	r23
     c68:	67 95       	ror	r22
     c6a:	57 95       	ror	r21
     c6c:	47 95       	ror	r20
     c6e:	8a 95       	dec	r24
     c70:	d2 f7       	brpl	.-12     	; 0xc66 <__lshrdi3+0x6e>
     c72:	28 c0       	rjmp	.+80     	; 0xcc4 <__lshrdi3+0xcc>
     c74:	20 2f       	mov	r18, r16
     c76:	33 27       	eor	r19, r19
     c78:	27 fd       	sbrc	r18, 7
     c7a:	30 95       	com	r19
     c7c:	db 01       	movw	r26, r22
     c7e:	ca 01       	movw	r24, r20
     c80:	02 2e       	mov	r0, r18
     c82:	04 c0       	rjmp	.+8      	; 0xc8c <__lshrdi3+0x94>
     c84:	b6 95       	lsr	r27
     c86:	a7 95       	ror	r26
     c88:	97 95       	ror	r25
     c8a:	87 95       	ror	r24
     c8c:	0a 94       	dec	r0
     c8e:	d2 f7       	brpl	.-12     	; 0xc84 <__lshrdi3+0x8c>
     c90:	8d 87       	std	Y+13, r24	; 0x0d
     c92:	9e 87       	std	Y+14, r25	; 0x0e
     c94:	af 87       	std	Y+15, r26	; 0x0f
     c96:	b8 8b       	std	Y+16, r27	; 0x10
     c98:	04 c0       	rjmp	.+8      	; 0xca2 <__lshrdi3+0xaa>
     c9a:	44 0f       	add	r20, r20
     c9c:	55 1f       	adc	r21, r21
     c9e:	66 1f       	adc	r22, r22
     ca0:	77 1f       	adc	r23, r23
     ca2:	ea 95       	dec	r30
     ca4:	d2 f7       	brpl	.-12     	; 0xc9a <__lshrdi3+0xa2>
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	9a 81       	ldd	r25, Y+2	; 0x02
     caa:	ab 81       	ldd	r26, Y+3	; 0x03
     cac:	bc 81       	ldd	r27, Y+4	; 0x04
     cae:	04 c0       	rjmp	.+8      	; 0xcb8 <__lshrdi3+0xc0>
     cb0:	b6 95       	lsr	r27
     cb2:	a7 95       	ror	r26
     cb4:	97 95       	ror	r25
     cb6:	87 95       	ror	r24
     cb8:	2a 95       	dec	r18
     cba:	d2 f7       	brpl	.-12     	; 0xcb0 <__lshrdi3+0xb8>
     cbc:	48 2b       	or	r20, r24
     cbe:	59 2b       	or	r21, r25
     cc0:	6a 2b       	or	r22, r26
     cc2:	7b 2b       	or	r23, r27
     cc4:	49 87       	std	Y+9, r20	; 0x09
     cc6:	5a 87       	std	Y+10, r21	; 0x0a
     cc8:	6b 87       	std	Y+11, r22	; 0x0b
     cca:	7c 87       	std	Y+12, r23	; 0x0c
     ccc:	29 85       	ldd	r18, Y+9	; 0x09
     cce:	3a 85       	ldd	r19, Y+10	; 0x0a
     cd0:	4b 85       	ldd	r20, Y+11	; 0x0b
     cd2:	5c 85       	ldd	r21, Y+12	; 0x0c
     cd4:	6d 85       	ldd	r22, Y+13	; 0x0d
     cd6:	7e 85       	ldd	r23, Y+14	; 0x0e
     cd8:	af 85       	ldd	r26, Y+15	; 0x0f
     cda:	98 89       	ldd	r25, Y+16	; 0x10
     cdc:	8a 2f       	mov	r24, r26
     cde:	60 96       	adiw	r28, 0x10	; 16
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	08 95       	ret

00000cf6 <__clzsi2>:
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	7b 01       	movw	r14, r22
     d00:	8c 01       	movw	r16, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	e8 16       	cp	r14, r24
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	f8 06       	cpc	r15, r24
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	08 07       	cpc	r16, r24
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	18 07       	cpc	r17, r24
     d12:	88 f4       	brcc	.+34     	; 0xd36 <__clzsi2+0x40>
     d14:	8f ef       	ldi	r24, 0xFF	; 255
     d16:	e8 16       	cp	r14, r24
     d18:	f1 04       	cpc	r15, r1
     d1a:	01 05       	cpc	r16, r1
     d1c:	11 05       	cpc	r17, r1
     d1e:	31 f0       	breq	.+12     	; 0xd2c <__clzsi2+0x36>
     d20:	28 f0       	brcs	.+10     	; 0xd2c <__clzsi2+0x36>
     d22:	88 e0       	ldi	r24, 0x08	; 8
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a0 e0       	ldi	r26, 0x00	; 0
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	17 c0       	rjmp	.+46     	; 0xd5a <__clzsi2+0x64>
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	a0 e0       	ldi	r26, 0x00	; 0
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	12 c0       	rjmp	.+36     	; 0xd5a <__clzsi2+0x64>
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	e8 16       	cp	r14, r24
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	f8 06       	cpc	r15, r24
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	08 07       	cpc	r16, r24
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	18 07       	cpc	r17, r24
     d46:	28 f0       	brcs	.+10     	; 0xd52 <__clzsi2+0x5c>
     d48:	88 e1       	ldi	r24, 0x18	; 24
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	a0 e0       	ldi	r26, 0x00	; 0
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	04 c0       	rjmp	.+8      	; 0xd5a <__clzsi2+0x64>
     d52:	80 e1       	ldi	r24, 0x10	; 16
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	a0 e0       	ldi	r26, 0x00	; 0
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	20 e2       	ldi	r18, 0x20	; 32
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	40 e0       	ldi	r20, 0x00	; 0
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	28 1b       	sub	r18, r24
     d64:	39 0b       	sbc	r19, r25
     d66:	4a 0b       	sbc	r20, r26
     d68:	5b 0b       	sbc	r21, r27
     d6a:	04 c0       	rjmp	.+8      	; 0xd74 <__clzsi2+0x7e>
     d6c:	16 95       	lsr	r17
     d6e:	07 95       	ror	r16
     d70:	f7 94       	ror	r15
     d72:	e7 94       	ror	r14
     d74:	8a 95       	dec	r24
     d76:	d2 f7       	brpl	.-12     	; 0xd6c <__clzsi2+0x76>
     d78:	f7 01       	movw	r30, r14
     d7a:	e6 58       	subi	r30, 0x86	; 134
     d7c:	fd 4f       	sbci	r31, 0xFD	; 253
     d7e:	80 81       	ld	r24, Z
     d80:	28 1b       	sub	r18, r24
     d82:	31 09       	sbc	r19, r1
     d84:	41 09       	sbc	r20, r1
     d86:	51 09       	sbc	r21, r1
     d88:	c9 01       	movw	r24, r18
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	ff 90       	pop	r15
     d90:	ef 90       	pop	r14
     d92:	08 95       	ret

00000d94 <__pack_f>:
     d94:	df 92       	push	r13
     d96:	ef 92       	push	r14
     d98:	ff 92       	push	r15
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	fc 01       	movw	r30, r24
     da0:	e4 80       	ldd	r14, Z+4	; 0x04
     da2:	f5 80       	ldd	r15, Z+5	; 0x05
     da4:	06 81       	ldd	r16, Z+6	; 0x06
     da6:	17 81       	ldd	r17, Z+7	; 0x07
     da8:	d1 80       	ldd	r13, Z+1	; 0x01
     daa:	80 81       	ld	r24, Z
     dac:	82 30       	cpi	r24, 0x02	; 2
     dae:	48 f4       	brcc	.+18     	; 0xdc2 <__pack_f+0x2e>
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	a0 e1       	ldi	r26, 0x10	; 16
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e8 2a       	or	r14, r24
     dba:	f9 2a       	or	r15, r25
     dbc:	0a 2b       	or	r16, r26
     dbe:	1b 2b       	or	r17, r27
     dc0:	a5 c0       	rjmp	.+330    	; 0xf0c <__pack_f+0x178>
     dc2:	84 30       	cpi	r24, 0x04	; 4
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <__pack_f+0x34>
     dc6:	9f c0       	rjmp	.+318    	; 0xf06 <__pack_f+0x172>
     dc8:	82 30       	cpi	r24, 0x02	; 2
     dca:	21 f4       	brne	.+8      	; 0xdd4 <__pack_f+0x40>
     dcc:	ee 24       	eor	r14, r14
     dce:	ff 24       	eor	r15, r15
     dd0:	87 01       	movw	r16, r14
     dd2:	05 c0       	rjmp	.+10     	; 0xdde <__pack_f+0x4a>
     dd4:	e1 14       	cp	r14, r1
     dd6:	f1 04       	cpc	r15, r1
     dd8:	01 05       	cpc	r16, r1
     dda:	11 05       	cpc	r17, r1
     ddc:	19 f4       	brne	.+6      	; 0xde4 <__pack_f+0x50>
     dde:	e0 e0       	ldi	r30, 0x00	; 0
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	96 c0       	rjmp	.+300    	; 0xf10 <__pack_f+0x17c>
     de4:	62 81       	ldd	r22, Z+2	; 0x02
     de6:	73 81       	ldd	r23, Z+3	; 0x03
     de8:	9f ef       	ldi	r25, 0xFF	; 255
     dea:	62 38       	cpi	r22, 0x82	; 130
     dec:	79 07       	cpc	r23, r25
     dee:	0c f0       	brlt	.+2      	; 0xdf2 <__pack_f+0x5e>
     df0:	5b c0       	rjmp	.+182    	; 0xea8 <__pack_f+0x114>
     df2:	22 e8       	ldi	r18, 0x82	; 130
     df4:	3f ef       	ldi	r19, 0xFF	; 255
     df6:	26 1b       	sub	r18, r22
     df8:	37 0b       	sbc	r19, r23
     dfa:	2a 31       	cpi	r18, 0x1A	; 26
     dfc:	31 05       	cpc	r19, r1
     dfe:	2c f0       	brlt	.+10     	; 0xe0a <__pack_f+0x76>
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	2a c0       	rjmp	.+84     	; 0xe5e <__pack_f+0xca>
     e0a:	b8 01       	movw	r22, r16
     e0c:	a7 01       	movw	r20, r14
     e0e:	02 2e       	mov	r0, r18
     e10:	04 c0       	rjmp	.+8      	; 0xe1a <__pack_f+0x86>
     e12:	76 95       	lsr	r23
     e14:	67 95       	ror	r22
     e16:	57 95       	ror	r21
     e18:	47 95       	ror	r20
     e1a:	0a 94       	dec	r0
     e1c:	d2 f7       	brpl	.-12     	; 0xe12 <__pack_f+0x7e>
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	a0 e0       	ldi	r26, 0x00	; 0
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	04 c0       	rjmp	.+8      	; 0xe30 <__pack_f+0x9c>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	aa 1f       	adc	r26, r26
     e2e:	bb 1f       	adc	r27, r27
     e30:	2a 95       	dec	r18
     e32:	d2 f7       	brpl	.-12     	; 0xe28 <__pack_f+0x94>
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	a1 09       	sbc	r26, r1
     e38:	b1 09       	sbc	r27, r1
     e3a:	8e 21       	and	r24, r14
     e3c:	9f 21       	and	r25, r15
     e3e:	a0 23       	and	r26, r16
     e40:	b1 23       	and	r27, r17
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	a1 05       	cpc	r26, r1
     e46:	b1 05       	cpc	r27, r1
     e48:	21 f0       	breq	.+8      	; 0xe52 <__pack_f+0xbe>
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	a0 e0       	ldi	r26, 0x00	; 0
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	9a 01       	movw	r18, r20
     e54:	ab 01       	movw	r20, r22
     e56:	28 2b       	or	r18, r24
     e58:	39 2b       	or	r19, r25
     e5a:	4a 2b       	or	r20, r26
     e5c:	5b 2b       	or	r21, r27
     e5e:	da 01       	movw	r26, r20
     e60:	c9 01       	movw	r24, r18
     e62:	8f 77       	andi	r24, 0x7F	; 127
     e64:	90 70       	andi	r25, 0x00	; 0
     e66:	a0 70       	andi	r26, 0x00	; 0
     e68:	b0 70       	andi	r27, 0x00	; 0
     e6a:	80 34       	cpi	r24, 0x40	; 64
     e6c:	91 05       	cpc	r25, r1
     e6e:	a1 05       	cpc	r26, r1
     e70:	b1 05       	cpc	r27, r1
     e72:	39 f4       	brne	.+14     	; 0xe82 <__pack_f+0xee>
     e74:	27 ff       	sbrs	r18, 7
     e76:	09 c0       	rjmp	.+18     	; 0xe8a <__pack_f+0xf6>
     e78:	20 5c       	subi	r18, 0xC0	; 192
     e7a:	3f 4f       	sbci	r19, 0xFF	; 255
     e7c:	4f 4f       	sbci	r20, 0xFF	; 255
     e7e:	5f 4f       	sbci	r21, 0xFF	; 255
     e80:	04 c0       	rjmp	.+8      	; 0xe8a <__pack_f+0xf6>
     e82:	21 5c       	subi	r18, 0xC1	; 193
     e84:	3f 4f       	sbci	r19, 0xFF	; 255
     e86:	4f 4f       	sbci	r20, 0xFF	; 255
     e88:	5f 4f       	sbci	r21, 0xFF	; 255
     e8a:	e0 e0       	ldi	r30, 0x00	; 0
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	20 30       	cpi	r18, 0x00	; 0
     e90:	a0 e0       	ldi	r26, 0x00	; 0
     e92:	3a 07       	cpc	r19, r26
     e94:	a0 e0       	ldi	r26, 0x00	; 0
     e96:	4a 07       	cpc	r20, r26
     e98:	a0 e4       	ldi	r26, 0x40	; 64
     e9a:	5a 07       	cpc	r21, r26
     e9c:	10 f0       	brcs	.+4      	; 0xea2 <__pack_f+0x10e>
     e9e:	e1 e0       	ldi	r30, 0x01	; 1
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	79 01       	movw	r14, r18
     ea4:	8a 01       	movw	r16, r20
     ea6:	27 c0       	rjmp	.+78     	; 0xef6 <__pack_f+0x162>
     ea8:	60 38       	cpi	r22, 0x80	; 128
     eaa:	71 05       	cpc	r23, r1
     eac:	64 f5       	brge	.+88     	; 0xf06 <__pack_f+0x172>
     eae:	fb 01       	movw	r30, r22
     eb0:	e1 58       	subi	r30, 0x81	; 129
     eb2:	ff 4f       	sbci	r31, 0xFF	; 255
     eb4:	d8 01       	movw	r26, r16
     eb6:	c7 01       	movw	r24, r14
     eb8:	8f 77       	andi	r24, 0x7F	; 127
     eba:	90 70       	andi	r25, 0x00	; 0
     ebc:	a0 70       	andi	r26, 0x00	; 0
     ebe:	b0 70       	andi	r27, 0x00	; 0
     ec0:	80 34       	cpi	r24, 0x40	; 64
     ec2:	91 05       	cpc	r25, r1
     ec4:	a1 05       	cpc	r26, r1
     ec6:	b1 05       	cpc	r27, r1
     ec8:	39 f4       	brne	.+14     	; 0xed8 <__pack_f+0x144>
     eca:	e7 fe       	sbrs	r14, 7
     ecc:	0d c0       	rjmp	.+26     	; 0xee8 <__pack_f+0x154>
     ece:	80 e4       	ldi	r24, 0x40	; 64
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	a0 e0       	ldi	r26, 0x00	; 0
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	04 c0       	rjmp	.+8      	; 0xee0 <__pack_f+0x14c>
     ed8:	8f e3       	ldi	r24, 0x3F	; 63
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	a0 e0       	ldi	r26, 0x00	; 0
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e8 0e       	add	r14, r24
     ee2:	f9 1e       	adc	r15, r25
     ee4:	0a 1f       	adc	r16, r26
     ee6:	1b 1f       	adc	r17, r27
     ee8:	17 ff       	sbrs	r17, 7
     eea:	05 c0       	rjmp	.+10     	; 0xef6 <__pack_f+0x162>
     eec:	16 95       	lsr	r17
     eee:	07 95       	ror	r16
     ef0:	f7 94       	ror	r15
     ef2:	e7 94       	ror	r14
     ef4:	31 96       	adiw	r30, 0x01	; 1
     ef6:	87 e0       	ldi	r24, 0x07	; 7
     ef8:	16 95       	lsr	r17
     efa:	07 95       	ror	r16
     efc:	f7 94       	ror	r15
     efe:	e7 94       	ror	r14
     f00:	8a 95       	dec	r24
     f02:	d1 f7       	brne	.-12     	; 0xef8 <__pack_f+0x164>
     f04:	05 c0       	rjmp	.+10     	; 0xf10 <__pack_f+0x17c>
     f06:	ee 24       	eor	r14, r14
     f08:	ff 24       	eor	r15, r15
     f0a:	87 01       	movw	r16, r14
     f0c:	ef ef       	ldi	r30, 0xFF	; 255
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	6e 2f       	mov	r22, r30
     f12:	67 95       	ror	r22
     f14:	66 27       	eor	r22, r22
     f16:	67 95       	ror	r22
     f18:	90 2f       	mov	r25, r16
     f1a:	9f 77       	andi	r25, 0x7F	; 127
     f1c:	d7 94       	ror	r13
     f1e:	dd 24       	eor	r13, r13
     f20:	d7 94       	ror	r13
     f22:	8e 2f       	mov	r24, r30
     f24:	86 95       	lsr	r24
     f26:	49 2f       	mov	r20, r25
     f28:	46 2b       	or	r20, r22
     f2a:	58 2f       	mov	r21, r24
     f2c:	5d 29       	or	r21, r13
     f2e:	b7 01       	movw	r22, r14
     f30:	ca 01       	movw	r24, r20
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	ff 90       	pop	r15
     f38:	ef 90       	pop	r14
     f3a:	df 90       	pop	r13
     f3c:	08 95       	ret

00000f3e <__unpack_f>:
     f3e:	fc 01       	movw	r30, r24
     f40:	db 01       	movw	r26, r22
     f42:	40 81       	ld	r20, Z
     f44:	51 81       	ldd	r21, Z+1	; 0x01
     f46:	22 81       	ldd	r18, Z+2	; 0x02
     f48:	62 2f       	mov	r22, r18
     f4a:	6f 77       	andi	r22, 0x7F	; 127
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	22 1f       	adc	r18, r18
     f50:	22 27       	eor	r18, r18
     f52:	22 1f       	adc	r18, r18
     f54:	93 81       	ldd	r25, Z+3	; 0x03
     f56:	89 2f       	mov	r24, r25
     f58:	88 0f       	add	r24, r24
     f5a:	82 2b       	or	r24, r18
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	99 1f       	adc	r25, r25
     f62:	99 27       	eor	r25, r25
     f64:	99 1f       	adc	r25, r25
     f66:	11 96       	adiw	r26, 0x01	; 1
     f68:	9c 93       	st	X, r25
     f6a:	11 97       	sbiw	r26, 0x01	; 1
     f6c:	21 15       	cp	r18, r1
     f6e:	31 05       	cpc	r19, r1
     f70:	a9 f5       	brne	.+106    	; 0xfdc <__unpack_f+0x9e>
     f72:	41 15       	cp	r20, r1
     f74:	51 05       	cpc	r21, r1
     f76:	61 05       	cpc	r22, r1
     f78:	71 05       	cpc	r23, r1
     f7a:	11 f4       	brne	.+4      	; 0xf80 <__unpack_f+0x42>
     f7c:	82 e0       	ldi	r24, 0x02	; 2
     f7e:	37 c0       	rjmp	.+110    	; 0xfee <__unpack_f+0xb0>
     f80:	82 e8       	ldi	r24, 0x82	; 130
     f82:	9f ef       	ldi	r25, 0xFF	; 255
     f84:	13 96       	adiw	r26, 0x03	; 3
     f86:	9c 93       	st	X, r25
     f88:	8e 93       	st	-X, r24
     f8a:	12 97       	sbiw	r26, 0x02	; 2
     f8c:	9a 01       	movw	r18, r20
     f8e:	ab 01       	movw	r20, r22
     f90:	67 e0       	ldi	r22, 0x07	; 7
     f92:	22 0f       	add	r18, r18
     f94:	33 1f       	adc	r19, r19
     f96:	44 1f       	adc	r20, r20
     f98:	55 1f       	adc	r21, r21
     f9a:	6a 95       	dec	r22
     f9c:	d1 f7       	brne	.-12     	; 0xf92 <__unpack_f+0x54>
     f9e:	83 e0       	ldi	r24, 0x03	; 3
     fa0:	8c 93       	st	X, r24
     fa2:	0d c0       	rjmp	.+26     	; 0xfbe <__unpack_f+0x80>
     fa4:	22 0f       	add	r18, r18
     fa6:	33 1f       	adc	r19, r19
     fa8:	44 1f       	adc	r20, r20
     faa:	55 1f       	adc	r21, r21
     fac:	12 96       	adiw	r26, 0x02	; 2
     fae:	8d 91       	ld	r24, X+
     fb0:	9c 91       	ld	r25, X
     fb2:	13 97       	sbiw	r26, 0x03	; 3
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	13 96       	adiw	r26, 0x03	; 3
     fb8:	9c 93       	st	X, r25
     fba:	8e 93       	st	-X, r24
     fbc:	12 97       	sbiw	r26, 0x02	; 2
     fbe:	20 30       	cpi	r18, 0x00	; 0
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	38 07       	cpc	r19, r24
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	48 07       	cpc	r20, r24
     fc8:	80 e4       	ldi	r24, 0x40	; 64
     fca:	58 07       	cpc	r21, r24
     fcc:	58 f3       	brcs	.-42     	; 0xfa4 <__unpack_f+0x66>
     fce:	14 96       	adiw	r26, 0x04	; 4
     fd0:	2d 93       	st	X+, r18
     fd2:	3d 93       	st	X+, r19
     fd4:	4d 93       	st	X+, r20
     fd6:	5c 93       	st	X, r21
     fd8:	17 97       	sbiw	r26, 0x07	; 7
     fda:	08 95       	ret
     fdc:	2f 3f       	cpi	r18, 0xFF	; 255
     fde:	31 05       	cpc	r19, r1
     fe0:	79 f4       	brne	.+30     	; 0x1000 <__unpack_f+0xc2>
     fe2:	41 15       	cp	r20, r1
     fe4:	51 05       	cpc	r21, r1
     fe6:	61 05       	cpc	r22, r1
     fe8:	71 05       	cpc	r23, r1
     fea:	19 f4       	brne	.+6      	; 0xff2 <__unpack_f+0xb4>
     fec:	84 e0       	ldi	r24, 0x04	; 4
     fee:	8c 93       	st	X, r24
     ff0:	08 95       	ret
     ff2:	64 ff       	sbrs	r22, 4
     ff4:	03 c0       	rjmp	.+6      	; 0xffc <__unpack_f+0xbe>
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	8c 93       	st	X, r24
     ffa:	12 c0       	rjmp	.+36     	; 0x1020 <__unpack_f+0xe2>
     ffc:	1c 92       	st	X, r1
     ffe:	10 c0       	rjmp	.+32     	; 0x1020 <__unpack_f+0xe2>
    1000:	2f 57       	subi	r18, 0x7F	; 127
    1002:	30 40       	sbci	r19, 0x00	; 0
    1004:	13 96       	adiw	r26, 0x03	; 3
    1006:	3c 93       	st	X, r19
    1008:	2e 93       	st	-X, r18
    100a:	12 97       	sbiw	r26, 0x02	; 2
    100c:	83 e0       	ldi	r24, 0x03	; 3
    100e:	8c 93       	st	X, r24
    1010:	87 e0       	ldi	r24, 0x07	; 7
    1012:	44 0f       	add	r20, r20
    1014:	55 1f       	adc	r21, r21
    1016:	66 1f       	adc	r22, r22
    1018:	77 1f       	adc	r23, r23
    101a:	8a 95       	dec	r24
    101c:	d1 f7       	brne	.-12     	; 0x1012 <__unpack_f+0xd4>
    101e:	70 64       	ori	r23, 0x40	; 64
    1020:	14 96       	adiw	r26, 0x04	; 4
    1022:	4d 93       	st	X+, r20
    1024:	5d 93       	st	X+, r21
    1026:	6d 93       	st	X+, r22
    1028:	7c 93       	st	X, r23
    102a:	17 97       	sbiw	r26, 0x07	; 7
    102c:	08 95       	ret

0000102e <__fpcmp_parts_f>:
    102e:	1f 93       	push	r17
    1030:	dc 01       	movw	r26, r24
    1032:	fb 01       	movw	r30, r22
    1034:	9c 91       	ld	r25, X
    1036:	92 30       	cpi	r25, 0x02	; 2
    1038:	08 f4       	brcc	.+2      	; 0x103c <__fpcmp_parts_f+0xe>
    103a:	47 c0       	rjmp	.+142    	; 0x10ca <__fpcmp_parts_f+0x9c>
    103c:	80 81       	ld	r24, Z
    103e:	82 30       	cpi	r24, 0x02	; 2
    1040:	08 f4       	brcc	.+2      	; 0x1044 <__fpcmp_parts_f+0x16>
    1042:	43 c0       	rjmp	.+134    	; 0x10ca <__fpcmp_parts_f+0x9c>
    1044:	94 30       	cpi	r25, 0x04	; 4
    1046:	51 f4       	brne	.+20     	; 0x105c <__fpcmp_parts_f+0x2e>
    1048:	11 96       	adiw	r26, 0x01	; 1
    104a:	1c 91       	ld	r17, X
    104c:	84 30       	cpi	r24, 0x04	; 4
    104e:	99 f5       	brne	.+102    	; 0x10b6 <__fpcmp_parts_f+0x88>
    1050:	81 81       	ldd	r24, Z+1	; 0x01
    1052:	68 2f       	mov	r22, r24
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	61 1b       	sub	r22, r17
    1058:	71 09       	sbc	r23, r1
    105a:	3f c0       	rjmp	.+126    	; 0x10da <__fpcmp_parts_f+0xac>
    105c:	84 30       	cpi	r24, 0x04	; 4
    105e:	21 f0       	breq	.+8      	; 0x1068 <__fpcmp_parts_f+0x3a>
    1060:	92 30       	cpi	r25, 0x02	; 2
    1062:	31 f4       	brne	.+12     	; 0x1070 <__fpcmp_parts_f+0x42>
    1064:	82 30       	cpi	r24, 0x02	; 2
    1066:	b9 f1       	breq	.+110    	; 0x10d6 <__fpcmp_parts_f+0xa8>
    1068:	81 81       	ldd	r24, Z+1	; 0x01
    106a:	88 23       	and	r24, r24
    106c:	89 f1       	breq	.+98     	; 0x10d0 <__fpcmp_parts_f+0xa2>
    106e:	2d c0       	rjmp	.+90     	; 0x10ca <__fpcmp_parts_f+0x9c>
    1070:	11 96       	adiw	r26, 0x01	; 1
    1072:	1c 91       	ld	r17, X
    1074:	11 97       	sbiw	r26, 0x01	; 1
    1076:	82 30       	cpi	r24, 0x02	; 2
    1078:	f1 f0       	breq	.+60     	; 0x10b6 <__fpcmp_parts_f+0x88>
    107a:	81 81       	ldd	r24, Z+1	; 0x01
    107c:	18 17       	cp	r17, r24
    107e:	d9 f4       	brne	.+54     	; 0x10b6 <__fpcmp_parts_f+0x88>
    1080:	12 96       	adiw	r26, 0x02	; 2
    1082:	2d 91       	ld	r18, X+
    1084:	3c 91       	ld	r19, X
    1086:	13 97       	sbiw	r26, 0x03	; 3
    1088:	82 81       	ldd	r24, Z+2	; 0x02
    108a:	93 81       	ldd	r25, Z+3	; 0x03
    108c:	82 17       	cp	r24, r18
    108e:	93 07       	cpc	r25, r19
    1090:	94 f0       	brlt	.+36     	; 0x10b6 <__fpcmp_parts_f+0x88>
    1092:	28 17       	cp	r18, r24
    1094:	39 07       	cpc	r19, r25
    1096:	bc f0       	brlt	.+46     	; 0x10c6 <__fpcmp_parts_f+0x98>
    1098:	14 96       	adiw	r26, 0x04	; 4
    109a:	8d 91       	ld	r24, X+
    109c:	9d 91       	ld	r25, X+
    109e:	0d 90       	ld	r0, X+
    10a0:	bc 91       	ld	r27, X
    10a2:	a0 2d       	mov	r26, r0
    10a4:	24 81       	ldd	r18, Z+4	; 0x04
    10a6:	35 81       	ldd	r19, Z+5	; 0x05
    10a8:	46 81       	ldd	r20, Z+6	; 0x06
    10aa:	57 81       	ldd	r21, Z+7	; 0x07
    10ac:	28 17       	cp	r18, r24
    10ae:	39 07       	cpc	r19, r25
    10b0:	4a 07       	cpc	r20, r26
    10b2:	5b 07       	cpc	r21, r27
    10b4:	18 f4       	brcc	.+6      	; 0x10bc <__fpcmp_parts_f+0x8e>
    10b6:	11 23       	and	r17, r17
    10b8:	41 f0       	breq	.+16     	; 0x10ca <__fpcmp_parts_f+0x9c>
    10ba:	0a c0       	rjmp	.+20     	; 0x10d0 <__fpcmp_parts_f+0xa2>
    10bc:	82 17       	cp	r24, r18
    10be:	93 07       	cpc	r25, r19
    10c0:	a4 07       	cpc	r26, r20
    10c2:	b5 07       	cpc	r27, r21
    10c4:	40 f4       	brcc	.+16     	; 0x10d6 <__fpcmp_parts_f+0xa8>
    10c6:	11 23       	and	r17, r17
    10c8:	19 f0       	breq	.+6      	; 0x10d0 <__fpcmp_parts_f+0xa2>
    10ca:	61 e0       	ldi	r22, 0x01	; 1
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	05 c0       	rjmp	.+10     	; 0x10da <__fpcmp_parts_f+0xac>
    10d0:	6f ef       	ldi	r22, 0xFF	; 255
    10d2:	7f ef       	ldi	r23, 0xFF	; 255
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <__fpcmp_parts_f+0xac>
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	cb 01       	movw	r24, r22
    10dc:	1f 91       	pop	r17
    10de:	08 95       	ret

000010e0 <UART_init>:
/**********************************************************************************************************************
 *  Functions Definitions
 *********************************************************************************************************************/

void UART_init(void)
{
    10e0:	8f 92       	push	r8
    10e2:	9f 92       	push	r9
    10e4:	af 92       	push	r10
    10e6:	bf 92       	push	r11
    10e8:	cf 92       	push	r12
    10ea:	df 92       	push	r13
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	28 97       	sbiw	r28, 0x08	; 8
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinDirection(PORTD, DIO_PIN0, DIO_INPUT);
    1108:	83 e0       	ldi	r24, 0x03	; 3
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	40 e0       	ldi	r20, 0x00	; 0
    110e:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTD, DIO_PIN1,DIO_OUTPUT);
    1112:	83 e0       	ldi	r24, 0x03	; 3
    1114:	61 e0       	ldi	r22, 0x01	; 1
    1116:	41 e0       	ldi	r20, 0x01	; 1
    1118:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <DIO_SetPinDirection>
	UCSRB = 0x18 ; //running UART as receiver&transmitter
    111c:	ea e2       	ldi	r30, 0x2A	; 42
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	88 e1       	ldi	r24, 0x18	; 24
    1122:	80 83       	st	Z, r24

	switch(ptr.Mode)
    1124:	80 91 7a 03 	lds	r24, 0x037A
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	38 87       	std	Y+8, r19	; 0x08
    112e:	2f 83       	std	Y+7, r18	; 0x07
    1130:	8f 81       	ldd	r24, Y+7	; 0x07
    1132:	98 85       	ldd	r25, Y+8	; 0x08
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	31 f0       	breq	.+12     	; 0x1144 <UART_init+0x64>
    1138:	ef 81       	ldd	r30, Y+7	; 0x07
    113a:	f8 85       	ldd	r31, Y+8	; 0x08
    113c:	e1 30       	cpi	r30, 0x01	; 1
    113e:	f1 05       	cpc	r31, r1
    1140:	49 f0       	breq	.+18     	; 0x1154 <UART_init+0x74>
    1142:	0f c0       	rjmp	.+30     	; 0x1162 <UART_init+0x82>
	{
		case 0 : CLR_BIT(UCSRC,UMSEL); break;//setting UASRT to Asynchronous mode
    1144:	a0 e4       	ldi	r26, 0x40	; 64
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e0 e4       	ldi	r30, 0x40	; 64
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	8f 7b       	andi	r24, 0xBF	; 191
    1150:	8c 93       	st	X, r24
    1152:	07 c0       	rjmp	.+14     	; 0x1162 <UART_init+0x82>
		case 1 : SET_BIT(UCSRC,UMSEL); break;//setting UASRT to synchronous mode
    1154:	a0 e4       	ldi	r26, 0x40	; 64
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e0 e4       	ldi	r30, 0x40	; 64
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	80 64       	ori	r24, 0x40	; 64
    1160:	8c 93       	st	X, r24
	}

	switch(ptr.Parity)
    1162:	80 91 7b 03 	lds	r24, 0x037B
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	3e 83       	std	Y+6, r19	; 0x06
    116c:	2d 83       	std	Y+5, r18	; 0x05
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	9e 81       	ldd	r25, Y+6	; 0x06
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	91 05       	cpc	r25, r1
    1176:	c9 f0       	breq	.+50     	; 0x11aa <UART_init+0xca>
    1178:	ed 81       	ldd	r30, Y+5	; 0x05
    117a:	fe 81       	ldd	r31, Y+6	; 0x06
    117c:	e2 30       	cpi	r30, 0x02	; 2
    117e:	f1 05       	cpc	r31, r1
    1180:	19 f1       	breq	.+70     	; 0x11c8 <UART_init+0xe8>
    1182:	2d 81       	ldd	r18, Y+5	; 0x05
    1184:	3e 81       	ldd	r19, Y+6	; 0x06
    1186:	21 15       	cp	r18, r1
    1188:	31 05       	cpc	r19, r1
    118a:	61 f5       	brne	.+88     	; 0x11e4 <UART_init+0x104>
	{
		case NONE :
					CLR_BIT(UCSRC,UPM1);
    118c:	a0 e4       	ldi	r26, 0x40	; 64
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e0 e4       	ldi	r30, 0x40	; 64
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	8f 7d       	andi	r24, 0xDF	; 223
    1198:	8c 93       	st	X, r24
					CLR_BIT(UCSRC,UPM0);
    119a:	a0 e4       	ldi	r26, 0x40	; 64
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e0 e4       	ldi	r30, 0x40	; 64
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	8f 7e       	andi	r24, 0xEF	; 239
    11a6:	8c 93       	st	X, r24
    11a8:	1d c0       	rjmp	.+58     	; 0x11e4 <UART_init+0x104>
					break;
		case EVEN :
					SET_BIT(UCSRC,UPM1);
    11aa:	a0 e4       	ldi	r26, 0x40	; 64
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e0 e4       	ldi	r30, 0x40	; 64
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	80 62       	ori	r24, 0x20	; 32
    11b6:	8c 93       	st	X, r24
					CLR_BIT(UCSRC,UPM0);
    11b8:	a0 e4       	ldi	r26, 0x40	; 64
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e0 e4       	ldi	r30, 0x40	; 64
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	8f 7e       	andi	r24, 0xEF	; 239
    11c4:	8c 93       	st	X, r24
    11c6:	0e c0       	rjmp	.+28     	; 0x11e4 <UART_init+0x104>
					break;
		case ODD :
					SET_BIT(UCSRC,UPM1);
    11c8:	a0 e4       	ldi	r26, 0x40	; 64
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e0 e4       	ldi	r30, 0x40	; 64
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	80 62       	ori	r24, 0x20	; 32
    11d4:	8c 93       	st	X, r24
					SET_BIT(UCSRC,UPM0);
    11d6:	a0 e4       	ldi	r26, 0x40	; 64
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e0 e4       	ldi	r30, 0x40	; 64
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	80 61       	ori	r24, 0x10	; 16
    11e2:	8c 93       	st	X, r24
					break;
	}

	switch (ptr.Stop_Bits)
    11e4:	80 91 7c 03 	lds	r24, 0x037C
    11e8:	e8 2f       	mov	r30, r24
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	fc 83       	std	Y+4, r31	; 0x04
    11ee:	eb 83       	std	Y+3, r30	; 0x03
    11f0:	2b 81       	ldd	r18, Y+3	; 0x03
    11f2:	3c 81       	ldd	r19, Y+4	; 0x04
    11f4:	21 30       	cpi	r18, 0x01	; 1
    11f6:	31 05       	cpc	r19, r1
    11f8:	31 f0       	breq	.+12     	; 0x1206 <UART_init+0x126>
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	82 30       	cpi	r24, 0x02	; 2
    1200:	91 05       	cpc	r25, r1
    1202:	49 f0       	breq	.+18     	; 0x1216 <UART_init+0x136>
    1204:	0f c0       	rjmp	.+30     	; 0x1224 <UART_init+0x144>
	{
		case 1 : CLR_BIT(UCSRC,USBS); break;
    1206:	a0 e4       	ldi	r26, 0x40	; 64
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e0 e4       	ldi	r30, 0x40	; 64
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	87 7f       	andi	r24, 0xF7	; 247
    1212:	8c 93       	st	X, r24
    1214:	07 c0       	rjmp	.+14     	; 0x1224 <UART_init+0x144>
		case 2 : SET_BIT(UCSRC,USBS);	break;
    1216:	a0 e4       	ldi	r26, 0x40	; 64
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e0 e4       	ldi	r30, 0x40	; 64
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	88 60       	ori	r24, 0x08	; 8
    1222:	8c 93       	st	X, r24
	}

	switch(ptr.Data_Bits)
    1224:	80 91 7d 03 	lds	r24, 0x037D
    1228:	e8 2f       	mov	r30, r24
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	fa 83       	std	Y+2, r31	; 0x02
    122e:	e9 83       	std	Y+1, r30	; 0x01
    1230:	29 81       	ldd	r18, Y+1	; 0x01
    1232:	3a 81       	ldd	r19, Y+2	; 0x02
    1234:	26 30       	cpi	r18, 0x06	; 6
    1236:	31 05       	cpc	r19, r1
    1238:	69 f1       	breq	.+90     	; 0x1294 <UART_init+0x1b4>
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	9a 81       	ldd	r25, Y+2	; 0x02
    123e:	87 30       	cpi	r24, 0x07	; 7
    1240:	91 05       	cpc	r25, r1
    1242:	34 f4       	brge	.+12     	; 0x1250 <UART_init+0x170>
    1244:	e9 81       	ldd	r30, Y+1	; 0x01
    1246:	fa 81       	ldd	r31, Y+2	; 0x02
    1248:	e5 30       	cpi	r30, 0x05	; 5
    124a:	f1 05       	cpc	r31, r1
    124c:	69 f0       	breq	.+26     	; 0x1268 <UART_init+0x188>
    124e:	63 c0       	rjmp	.+198    	; 0x1316 <UART_init+0x236>
    1250:	29 81       	ldd	r18, Y+1	; 0x01
    1252:	3a 81       	ldd	r19, Y+2	; 0x02
    1254:	27 30       	cpi	r18, 0x07	; 7
    1256:	31 05       	cpc	r19, r1
    1258:	99 f1       	breq	.+102    	; 0x12c0 <UART_init+0x1e0>
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	9a 81       	ldd	r25, Y+2	; 0x02
    125e:	88 30       	cpi	r24, 0x08	; 8
    1260:	91 05       	cpc	r25, r1
    1262:	09 f4       	brne	.+2      	; 0x1266 <UART_init+0x186>
    1264:	43 c0       	rjmp	.+134    	; 0x12ec <UART_init+0x20c>
    1266:	57 c0       	rjmp	.+174    	; 0x1316 <UART_init+0x236>
	{
		case 5 :
				CLR_BIT(UCSRC,UCSZ2);
    1268:	a0 e4       	ldi	r26, 0x40	; 64
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e0 e4       	ldi	r30, 0x40	; 64
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	8b 7f       	andi	r24, 0xFB	; 251
    1274:	8c 93       	st	X, r24
				CLR_BIT(UCSRC,UCSZ1);
    1276:	a0 e4       	ldi	r26, 0x40	; 64
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e0 e4       	ldi	r30, 0x40	; 64
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	8b 7f       	andi	r24, 0xFB	; 251
    1282:	8c 93       	st	X, r24
				CLR_BIT(UCSRC,UCSZ0);
    1284:	a0 e4       	ldi	r26, 0x40	; 64
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e0 e4       	ldi	r30, 0x40	; 64
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	8d 7f       	andi	r24, 0xFD	; 253
    1290:	8c 93       	st	X, r24
    1292:	41 c0       	rjmp	.+130    	; 0x1316 <UART_init+0x236>
				break;
		case 6 :
				CLR_BIT(UCSRC,UCSZ2);
    1294:	a0 e4       	ldi	r26, 0x40	; 64
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e0 e4       	ldi	r30, 0x40	; 64
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	8b 7f       	andi	r24, 0xFB	; 251
    12a0:	8c 93       	st	X, r24
				CLR_BIT(UCSRC,UCSZ1);
    12a2:	a0 e4       	ldi	r26, 0x40	; 64
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e0 e4       	ldi	r30, 0x40	; 64
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	8b 7f       	andi	r24, 0xFB	; 251
    12ae:	8c 93       	st	X, r24
				SET_BIT(UCSRC,UCSZ0);
    12b0:	a0 e4       	ldi	r26, 0x40	; 64
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e0 e4       	ldi	r30, 0x40	; 64
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	82 60       	ori	r24, 0x02	; 2
    12bc:	8c 93       	st	X, r24
    12be:	2b c0       	rjmp	.+86     	; 0x1316 <UART_init+0x236>
				break;
		case 7 :
				CLR_BIT(UCSRC,UCSZ2);
    12c0:	a0 e4       	ldi	r26, 0x40	; 64
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e0 e4       	ldi	r30, 0x40	; 64
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	8b 7f       	andi	r24, 0xFB	; 251
    12cc:	8c 93       	st	X, r24
				SET_BIT(UCSRC,UCSZ1);
    12ce:	a0 e4       	ldi	r26, 0x40	; 64
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e0 e4       	ldi	r30, 0x40	; 64
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	84 60       	ori	r24, 0x04	; 4
    12da:	8c 93       	st	X, r24
				CLR_BIT(UCSRC,UCSZ0);
    12dc:	a0 e4       	ldi	r26, 0x40	; 64
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e0 e4       	ldi	r30, 0x40	; 64
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	8d 7f       	andi	r24, 0xFD	; 253
    12e8:	8c 93       	st	X, r24
    12ea:	15 c0       	rjmp	.+42     	; 0x1316 <UART_init+0x236>
				break;
		case 8 :
				CLR_BIT(UCSRC,UCSZ2);
    12ec:	a0 e4       	ldi	r26, 0x40	; 64
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e0 e4       	ldi	r30, 0x40	; 64
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	8b 7f       	andi	r24, 0xFB	; 251
    12f8:	8c 93       	st	X, r24
				SET_BIT(UCSRC,UCSZ1);
    12fa:	a0 e4       	ldi	r26, 0x40	; 64
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e0 e4       	ldi	r30, 0x40	; 64
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	84 60       	ori	r24, 0x04	; 4
    1306:	8c 93       	st	X, r24
				SET_BIT(UCSRC,UCSZ0);
    1308:	a0 e4       	ldi	r26, 0x40	; 64
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e0 e4       	ldi	r30, 0x40	; 64
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	82 60       	ori	r24, 0x02	; 2
    1314:	8c 93       	st	X, r24
				break;
	}

	UBRRL = (ptr.Foc/(ptr.baud_rate * 16.0))-1;
    1316:	0f 2e       	mov	r0, r31
    1318:	f9 e2       	ldi	r31, 0x29	; 41
    131a:	8f 2e       	mov	r8, r31
    131c:	99 24       	eor	r9, r9
    131e:	f0 2d       	mov	r31, r0
    1320:	a0 90 80 03 	lds	r10, 0x0380
    1324:	b0 90 81 03 	lds	r11, 0x0381
    1328:	c0 90 82 03 	lds	r12, 0x0382
    132c:	d0 90 83 03 	lds	r13, 0x0383
    1330:	e0 90 84 03 	lds	r14, 0x0384
    1334:	f0 90 85 03 	lds	r15, 0x0385
    1338:	00 91 86 03 	lds	r16, 0x0386
    133c:	10 91 87 03 	lds	r17, 0x0387
    1340:	2a 2d       	mov	r18, r10
    1342:	3b 2d       	mov	r19, r11
    1344:	4c 2d       	mov	r20, r12
    1346:	5d 2d       	mov	r21, r13
    1348:	6e 2d       	mov	r22, r14
    134a:	7f 2d       	mov	r23, r15
    134c:	80 2f       	mov	r24, r16
    134e:	91 2f       	mov	r25, r17
    1350:	0e 94 75 00 	call	0xea	; 0xea <__floatundisf>
    1354:	7b 01       	movw	r14, r22
    1356:	8c 01       	movw	r16, r24
    1358:	80 91 7e 03 	lds	r24, 0x037E
    135c:	90 91 7f 03 	lds	r25, 0x037F
    1360:	cc 01       	movw	r24, r24
    1362:	a0 e0       	ldi	r26, 0x00	; 0
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	bc 01       	movw	r22, r24
    1368:	cd 01       	movw	r24, r26
    136a:	0e 94 83 05 	call	0xb06	; 0xb06 <__floatunsisf>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	bc 01       	movw	r22, r24
    1374:	cd 01       	movw	r24, r26
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e8       	ldi	r20, 0x80	; 128
    137c:	51 e4       	ldi	r21, 0x41	; 65
    137e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__mulsf3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	9c 01       	movw	r18, r24
    1388:	ad 01       	movw	r20, r26
    138a:	c8 01       	movw	r24, r16
    138c:	b7 01       	movw	r22, r14
    138e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	bc 01       	movw	r22, r24
    1398:	cd 01       	movw	r24, r26
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 e8       	ldi	r20, 0x80	; 128
    13a0:	5f e3       	ldi	r21, 0x3F	; 63
    13a2:	0e 94 9d 02 	call	0x53a	; 0x53a <__subsf3>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	bc 01       	movw	r22, r24
    13ac:	cd 01       	movw	r24, r26
    13ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	f4 01       	movw	r30, r8
    13b8:	80 83       	st	Z, r24

}
    13ba:	28 96       	adiw	r28, 0x08	; 8
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	ff 90       	pop	r15
    13d0:	ef 90       	pop	r14
    13d2:	df 90       	pop	r13
    13d4:	cf 90       	pop	r12
    13d6:	bf 90       	pop	r11
    13d8:	af 90       	pop	r10
    13da:	9f 90       	pop	r9
    13dc:	8f 90       	pop	r8
    13de:	08 95       	ret

000013e0 <UART_transmit_Char>:


void UART_transmit_Char(u16 data)
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <UART_transmit_Char+0x6>
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	9a 83       	std	Y+2, r25	; 0x02
    13ec:	89 83       	std	Y+1, r24	; 0x01

	while(GET_BIT(UCSRA,UDRE)== 0);
    13ee:	eb e2       	ldi	r30, 0x2B	; 43
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	82 95       	swap	r24
    13f6:	86 95       	lsr	r24
    13f8:	87 70       	andi	r24, 0x07	; 7
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	81 70       	andi	r24, 0x01	; 1
    1400:	90 70       	andi	r25, 0x00	; 0
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	a1 f3       	breq	.-24     	; 0x13ee <UART_transmit_Char+0xe>

	UDR = data;
    1406:	ec e2       	ldi	r30, 0x2C	; 44
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	80 83       	st	Z, r24

}
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <UART_recieve_Char>:


u8 UART_recieve_Char(void)
{
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,RXC)== 0);
    1420:	eb e2       	ldi	r30, 0x2B	; 43
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	88 23       	and	r24, r24
    1428:	dc f7       	brge	.-10     	; 0x1420 <UART_recieve_Char+0x8>

	return UDR;
    142a:	ec e2       	ldi	r30, 0x2C	; 44
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
}
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <UART_transmit_String>:


void UART_transmit_String(u8 data[])
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <UART_transmit_String+0x6>
    143c:	0f 92       	push	r0
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	9b 83       	std	Y+3, r25	; 0x03
    1444:	8a 83       	std	Y+2, r24	; 0x02
	u8 i =0;
    1446:	19 82       	std	Y+1, r1	; 0x01
    1448:	10 c0       	rjmp	.+32     	; 0x146a <UART_transmit_String+0x34>
	while(data[i]!='\0')
	{
		UART_transmit_Char(data[i]);
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	9b 81       	ldd	r25, Y+3	; 0x03
    1454:	fc 01       	movw	r30, r24
    1456:	e2 0f       	add	r30, r18
    1458:	f3 1f       	adc	r31, r19
    145a:	80 81       	ld	r24, Z
    145c:	88 2f       	mov	r24, r24
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <UART_transmit_Char>
		i++;
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	8f 5f       	subi	r24, 0xFF	; 255
    1468:	89 83       	std	Y+1, r24	; 0x01


void UART_transmit_String(u8 data[])
{
	u8 i =0;
	while(data[i]!='\0')
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	9b 81       	ldd	r25, Y+3	; 0x03
    1474:	fc 01       	movw	r30, r24
    1476:	e2 0f       	add	r30, r18
    1478:	f3 1f       	adc	r31, r19
    147a:	80 81       	ld	r24, Z
    147c:	88 23       	and	r24, r24
    147e:	29 f7       	brne	.-54     	; 0x144a <UART_transmit_String+0x14>
	{
		UART_transmit_Char(data[i]);
		i++;
	}
}
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <MTIMER2_voidInit>:
 /**********************************************************************************************************************
  *  Functions Definitions
  *********************************************************************************************************************/

void MTIMER2_voidInit()
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
	#if  TIMER2_Mode == TIMER2_Normal

	/*Normal Mode*/

	/*Timer Over flow flag Enable*/
	SET_BIT(TIMSK, TIMSK_TOIE2);
    1494:	a9 e5       	ldi	r26, 0x59	; 89
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e9 e5       	ldi	r30, 0x59	; 89
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	80 64       	ori	r24, 0x40	; 64
    14a0:	8c 93       	st	X, r24
	SET_BIT(SREG,SREG_GIE);                /*ENABLE GLOBAL INTERRUPT*/
    14a2:	af e5       	ldi	r26, 0x5F	; 95
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	ef e5       	ldi	r30, 0x5F	; 95
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	80 68       	ori	r24, 0x80	; 128
    14ae:	8c 93       	st	X, r24

	TCNT2 = 108; //ISR every 150ms
    14b0:	e4 e4       	ldi	r30, 0x44	; 68
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	8c e6       	ldi	r24, 0x6C	; 108
    14b6:	80 83       	st	Z, r24

	/*Set PRESCALAR 1024*/
	SET_BIT(TCCR2, TCCR2_CS20);
    14b8:	a5 e4       	ldi	r26, 0x45	; 69
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e5 e4       	ldi	r30, 0x45	; 69
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	81 60       	ori	r24, 0x01	; 1
    14c4:	8c 93       	st	X, r24
	SET_BIT(TCCR2, TCCR2_CS21);
    14c6:	a5 e4       	ldi	r26, 0x45	; 69
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e5 e4       	ldi	r30, 0x45	; 69
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	82 60       	ori	r24, 0x02	; 2
    14d2:	8c 93       	st	X, r24
	SET_BIT(TCCR2, TCCR2_CS22);
    14d4:	a5 e4       	ldi	r26, 0x45	; 69
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e5 e4       	ldi	r30, 0x45	; 69
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	84 60       	ori	r24, 0x04	; 4
    14e0:	8c 93       	st	X, r24
	/*Set PRESCALAR 8*/
	CLR_BIT(TCCR2, TCCR0_CS00);
	SET_BIT(TCCR2, TCCR0_CS01);
	CLR_BIT(TCCR2, TCCR0_CS02);
	#endif
}
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <MTIMER2_voidSetDuty>:

void MTIMER2_voidSetDuty(u8 Copy_u8DutyCycle)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	0f 92       	push	r0
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	89 83       	std	Y+1, r24	; 0x01
	/*Check for mode is PWM*/

	OCR2 = Copy_u8DutyCycle;               /*Sets OCR0 value*/
    14f4:	e3 e4       	ldi	r30, 0x43	; 67
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	80 83       	st	Z, r24

}
    14fc:	0f 90       	pop	r0
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <MTIMER2_voidTimer2OVSetCallBack>:

void MTIMER2_voidTimer2OVSetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	00 d0       	rcall	.+0      	; 0x150a <MTIMER2_voidTimer2OVSetCallBack+0x6>
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	9a 83       	std	Y+2, r25	; 0x02
    1510:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackFunc != NULL) /*checking if function exists*/
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	9a 81       	ldd	r25, Y+2	; 0x02
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	31 f0       	breq	.+12     	; 0x1526 <MTIMER2_voidTimer2OVSetCallBack+0x22>
	{
		Global_pvTimer2OverFlowCallBack= Copy_pvCallBackFunc; /*ADDS ISR Function*/
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	9a 81       	ldd	r25, Y+2	; 0x02
    151e:	90 93 93 03 	sts	0x0393, r25
    1522:	80 93 92 03 	sts	0x0392, r24
	else
	{
		/*do nothing*/
	}

}
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <MTIMER2_voidTimer2CTCSetCallBack>:

void MTIMER2_voidTimer2CTCSetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	00 d0       	rcall	.+0      	; 0x1536 <MTIMER2_voidTimer2CTCSetCallBack+0x6>
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackFunc != NULL) /*checking if function exists*/
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	31 f0       	breq	.+12     	; 0x1552 <MTIMER2_voidTimer2CTCSetCallBack+0x22>
	{
		Global_pvTimer2CTCCallBack= Copy_pvCallBackFunc; /*ADDS ISR Function*/
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	9a 81       	ldd	r25, Y+2	; 0x02
    154a:	90 93 95 03 	sts	0x0395, r25
    154e:	80 93 94 03 	sts	0x0394, r24
	else
	{
		/*do nothing*/
	}

}
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <MTIMER2_voidSetBusyWait>:

void MTIMER2_voidSetBusyWait(u16 Copy_u8WaitTime){
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	00 d0       	rcall	.+0      	; 0x1562 <MTIMER2_voidSetBusyWait+0x6>
    1562:	00 d0       	rcall	.+0      	; 0x1564 <MTIMER2_voidSetBusyWait+0x8>
    1564:	0f 92       	push	r0
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	9d 83       	std	Y+5, r25	; 0x05
    156c:	8c 83       	std	Y+4, r24	; 0x04
	u16 Local_u8Counter = 0;
    156e:	1b 82       	std	Y+3, r1	; 0x03
    1570:	1a 82       	std	Y+2, r1	; 0x02
	u8 counter = 0;
    1572:	19 82       	std	Y+1, r1	; 0x01
    1574:	1d c0       	rjmp	.+58     	; 0x15b0 <MTIMER2_voidSetBusyWait+0x54>
	while(Local_u8Counter != Copy_u8WaitTime){
		if(GET_BIT(TIFR,TIFR_OCF2)){
    1576:	e8 e5       	ldi	r30, 0x58	; 88
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	86 95       	lsr	r24
    157e:	88 2f       	mov	r24, r24
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	81 70       	andi	r24, 0x01	; 1
    1584:	90 70       	andi	r25, 0x00	; 0
    1586:	88 23       	and	r24, r24
    1588:	51 f0       	breq	.+20     	; 0x159e <MTIMER2_voidSetBusyWait+0x42>
			counter++;
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	8f 5f       	subi	r24, 0xFF	; 255
    158e:	89 83       	std	Y+1, r24	; 0x01
			SET_BIT(TIFR,TIFR_OCF2);
    1590:	a8 e5       	ldi	r26, 0x58	; 88
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e8 e5       	ldi	r30, 0x58	; 88
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	82 60       	ori	r24, 0x02	; 2
    159c:	8c 93       	st	X, r24
		}
		if(counter == 4){
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	84 30       	cpi	r24, 0x04	; 4
    15a2:	31 f4       	brne	.+12     	; 0x15b0 <MTIMER2_voidSetBusyWait+0x54>
			Local_u8Counter++;
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	9b 81       	ldd	r25, Y+3	; 0x03
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	9b 83       	std	Y+3, r25	; 0x03
    15ac:	8a 83       	std	Y+2, r24	; 0x02
			counter = 0;
    15ae:	19 82       	std	Y+1, r1	; 0x01
}

void MTIMER2_voidSetBusyWait(u16 Copy_u8WaitTime){
	u16 Local_u8Counter = 0;
	u8 counter = 0;
	while(Local_u8Counter != Copy_u8WaitTime){
    15b0:	2a 81       	ldd	r18, Y+2	; 0x02
    15b2:	3b 81       	ldd	r19, Y+3	; 0x03
    15b4:	8c 81       	ldd	r24, Y+4	; 0x04
    15b6:	9d 81       	ldd	r25, Y+5	; 0x05
    15b8:	28 17       	cp	r18, r24
    15ba:	39 07       	cpc	r19, r25
    15bc:	e1 f6       	brne	.-72     	; 0x1576 <MTIMER2_voidSetBusyWait+0x1a>
		if(counter == 4){
			Local_u8Counter++;
			counter = 0;
		}
	}
}
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <__vector_5>:

//TIMER OVERFLOW ISR
void  __vector_5 (void)	__attribute__((signal));
void  __vector_5 (void)
{
    15ce:	1f 92       	push	r1
    15d0:	0f 92       	push	r0
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	0f 92       	push	r0
    15d6:	11 24       	eor	r1, r1
    15d8:	2f 93       	push	r18
    15da:	3f 93       	push	r19
    15dc:	4f 93       	push	r20
    15de:	5f 93       	push	r21
    15e0:	6f 93       	push	r22
    15e2:	7f 93       	push	r23
    15e4:	8f 93       	push	r24
    15e6:	9f 93       	push	r25
    15e8:	af 93       	push	r26
    15ea:	bf 93       	push	r27
    15ec:	ef 93       	push	r30
    15ee:	ff 93       	push	r31
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
	TCNT2 = 108; //ISR every 150ms
    15f8:	e4 e4       	ldi	r30, 0x44	; 68
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	8c e6       	ldi	r24, 0x6C	; 108
    15fe:	80 83       	st	Z, r24

	if(Global_pvTimer2OverFlowCallBack != NULL)
    1600:	80 91 92 03 	lds	r24, 0x0392
    1604:	90 91 93 03 	lds	r25, 0x0393
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	29 f0       	breq	.+10     	; 0x1616 <__vector_5+0x48>
	{
		Global_pvTimer2OverFlowCallBack();
    160c:	e0 91 92 03 	lds	r30, 0x0392
    1610:	f0 91 93 03 	lds	r31, 0x0393
    1614:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	ff 91       	pop	r31
    161c:	ef 91       	pop	r30
    161e:	bf 91       	pop	r27
    1620:	af 91       	pop	r26
    1622:	9f 91       	pop	r25
    1624:	8f 91       	pop	r24
    1626:	7f 91       	pop	r23
    1628:	6f 91       	pop	r22
    162a:	5f 91       	pop	r21
    162c:	4f 91       	pop	r20
    162e:	3f 91       	pop	r19
    1630:	2f 91       	pop	r18
    1632:	0f 90       	pop	r0
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	0f 90       	pop	r0
    1638:	1f 90       	pop	r1
    163a:	18 95       	reti

0000163c <__vector_4>:

//ON COMPARE ISR
void  __vector_4 (void)	__attribute__((signal));
void  __vector_4 (void)
{
    163c:	1f 92       	push	r1
    163e:	0f 92       	push	r0
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	0f 92       	push	r0
    1644:	11 24       	eor	r1, r1
    1646:	2f 93       	push	r18
    1648:	3f 93       	push	r19
    164a:	4f 93       	push	r20
    164c:	5f 93       	push	r21
    164e:	6f 93       	push	r22
    1650:	7f 93       	push	r23
    1652:	8f 93       	push	r24
    1654:	9f 93       	push	r25
    1656:	af 93       	push	r26
    1658:	bf 93       	push	r27
    165a:	ef 93       	push	r30
    165c:	ff 93       	push	r31
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimer2CTCCallBack != NULL)
    1666:	80 91 94 03 	lds	r24, 0x0394
    166a:	90 91 95 03 	lds	r25, 0x0395
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	29 f0       	breq	.+10     	; 0x167c <__vector_4+0x40>
	{
		Global_pvTimer2CTCCallBack();
    1672:	e0 91 94 03 	lds	r30, 0x0394
    1676:	f0 91 95 03 	lds	r31, 0x0395
    167a:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	ff 91       	pop	r31
    1682:	ef 91       	pop	r30
    1684:	bf 91       	pop	r27
    1686:	af 91       	pop	r26
    1688:	9f 91       	pop	r25
    168a:	8f 91       	pop	r24
    168c:	7f 91       	pop	r23
    168e:	6f 91       	pop	r22
    1690:	5f 91       	pop	r21
    1692:	4f 91       	pop	r20
    1694:	3f 91       	pop	r19
    1696:	2f 91       	pop	r18
    1698:	0f 90       	pop	r0
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	0f 90       	pop	r0
    169e:	1f 90       	pop	r1
    16a0:	18 95       	reti

000016a2 <TIMER1_FPWMinit>:

/**********************************************************************************************************************
 *  Functions Definitions
 *********************************************************************************************************************/

void TIMER1_FPWMinit(){
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
	//Configure TIMER1
	TCCR1A = 0;
    16aa:	ef e4       	ldi	r30, 0x4F	; 79
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	10 82       	st	Z, r1
	TCCR1B = 0;
    16b0:	ee e4       	ldi	r30, 0x4E	; 78
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	10 82       	st	Z, r1

	//NON Inverted PWM
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    16b6:	af e4       	ldi	r26, 0x4F	; 79
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	ef e4       	ldi	r30, 0x4F	; 79
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	80 68       	ori	r24, 0x80	; 128
    16c2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1B1);
    16c4:	af e4       	ldi	r26, 0x4F	; 79
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	ef e4       	ldi	r30, 0x4F	; 79
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	80 62       	ori	r24, 0x20	; 32
    16d0:	8c 93       	st	X, r24

	//MODE 14(FAST PWM)
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    16d2:	af e4       	ldi	r26, 0x4F	; 79
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	ef e4       	ldi	r30, 0x4F	; 79
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	82 60       	ori	r24, 0x02	; 2
    16de:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    16e0:	ae e4       	ldi	r26, 0x4E	; 78
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	ee e4       	ldi	r30, 0x4E	; 78
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	88 60       	ori	r24, 0x08	; 8
    16ec:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    16ee:	ae e4       	ldi	r26, 0x4E	; 78
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	ee e4       	ldi	r30, 0x4E	; 78
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	80 61       	ori	r24, 0x10	; 16
    16fa:	8c 93       	st	X, r24

	SET_BIT(TCCR1B,TCCR1B_CS10); //PRESCALER=1
    16fc:	ae e4       	ldi	r26, 0x4E	; 78
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	ee e4       	ldi	r30, 0x4E	; 78
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	81 60       	ori	r24, 0x01	; 1
    1708:	8c 93       	st	X, r24

	ICR1=19999;  //fPWM=50Hz (Period = 20ms Standard).
    170a:	e6 e4       	ldi	r30, 0x46	; 70
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	8f e1       	ldi	r24, 0x1F	; 31
    1710:	9e e4       	ldi	r25, 0x4E	; 78
    1712:	91 83       	std	Z+1, r25	; 0x01
    1714:	80 83       	st	Z, r24
	OCR1A = 388; //Door is closed
    1716:	ea e4       	ldi	r30, 0x4A	; 74
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	84 e8       	ldi	r24, 0x84	; 132
    171c:	91 e0       	ldi	r25, 0x01	; 1
    171e:	91 83       	std	Z+1, r25	; 0x01
    1720:	80 83       	st	Z, r24
	//PWM Pins as Out
	DIO_SetPinDirection(PORTD,DIO_PIN5,DIO_OUTPUT);
    1722:	83 e0       	ldi	r24, 0x03	; 3
    1724:	65 e0       	ldi	r22, 0x05	; 5
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <DIO_SetPinDirection>
}
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <TIMER1_SetDutyCycle>:

void TIMER1_SetDutyCycle(u16 duty){
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	00 d0       	rcall	.+0      	; 0x1738 <TIMER1_SetDutyCycle+0x6>
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	9a 83       	std	Y+2, r25	; 0x02
    173e:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = duty;
    1740:	ea e4       	ldi	r30, 0x4A	; 74
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	9a 81       	ldd	r25, Y+2	; 0x02
    1748:	91 83       	std	Z+1, r25	; 0x01
    174a:	80 83       	st	Z, r24
}
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <MTIMER0_voidInit>:
 /**********************************************************************************************************************
  *  Functions Definitions
  *********************************************************************************************************************/

void MTIMER0_voidInit()
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, TCCR0_CS00);
	CLR_BIT(TCCR0, TCCR0_CS01);
	CLR_BIT(TCCR0, TCCR0_CS02);

#elif TIMER0_Mode == TIMER0_DELAY
	CLR_BIT(TCCR0, TCCR0_WGM00);
    175e:	a3 e5       	ldi	r26, 0x53	; 83
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e3 e5       	ldi	r30, 0x53	; 83
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	8f 7b       	andi	r24, 0xBF	; 191
    176a:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_WGM01);
    176c:	a3 e5       	ldi	r26, 0x53	; 83
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e3 e5       	ldi	r30, 0x53	; 83
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	88 60       	ori	r24, 0x08	; 8
    1778:	8c 93       	st	X, r24

	/*OUTPUT COMPARE MATCH INTERRUPT ENABLE*/
	SET_BIT(TIFR,TIFR_OCF0);
    177a:	a8 e5       	ldi	r26, 0x58	; 88
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e8 e5       	ldi	r30, 0x58	; 88
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	82 60       	ori	r24, 0x02	; 2
    1786:	8c 93       	st	X, r24
	/*Set compare match value to 250*/
	OCR0=250;
    1788:	ec e5       	ldi	r30, 0x5C	; 92
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	8a ef       	ldi	r24, 0xFA	; 250
    178e:	80 83       	st	Z, r24

	/*Set PRESCALAR 1*/
	SET_BIT(TCCR0, TCCR0_CS00);
    1790:	a3 e5       	ldi	r26, 0x53	; 83
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e3 e5       	ldi	r30, 0x53	; 83
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	81 60       	ori	r24, 0x01	; 1
    179c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, TCCR0_CS01);
    179e:	a3 e5       	ldi	r26, 0x53	; 83
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e3 e5       	ldi	r30, 0x53	; 83
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	8d 7f       	andi	r24, 0xFD	; 253
    17aa:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, TCCR0_CS02);
    17ac:	a3 e5       	ldi	r26, 0x53	; 83
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e3 e5       	ldi	r30, 0x53	; 83
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	8b 7f       	andi	r24, 0xFB	; 251
    17b8:	8c 93       	st	X, r24
	#endif
}
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <MTIMER0_voidSetDuty>:

void MTIMER0_voidSetDuty(u8 Copy_u8DutyCycle)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	0f 92       	push	r0
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	89 83       	std	Y+1, r24	; 0x01
	/*Check for mode is PWM*/

	OCR0 = Copy_u8DutyCycle;               /*Sets OCR0 value*/
    17cc:	ec e5       	ldi	r30, 0x5C	; 92
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	80 83       	st	Z, r24

}
    17d4:	0f 90       	pop	r0
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <MTIMER0_voidTimer0OVSetCallBack>:

void MTIMER0_voidTimer0OVSetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <MTIMER0_voidTimer0OVSetCallBack+0x6>
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	9a 83       	std	Y+2, r25	; 0x02
    17e8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackFunc != NULL) /*checking if function exists*/
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	31 f0       	breq	.+12     	; 0x17fe <MTIMER0_voidTimer0OVSetCallBack+0x22>
	{
		Global_pvTimerOverFlowCallBack= Copy_pvCallBackFunc; /*ADDS ISR Function*/
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	9a 81       	ldd	r25, Y+2	; 0x02
    17f6:	90 93 97 03 	sts	0x0397, r25
    17fa:	80 93 96 03 	sts	0x0396, r24
	else
	{
		/*do nothing*/
	}

}
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <MTIMER0_voidTimer0CTCSetCallBack>:

void MTIMER0_voidTimer0CTCSetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	00 d0       	rcall	.+0      	; 0x180e <MTIMER0_voidTimer0CTCSetCallBack+0x6>
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	9a 83       	std	Y+2, r25	; 0x02
    1814:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackFunc != NULL) /*checking if function exists*/
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	9a 81       	ldd	r25, Y+2	; 0x02
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	31 f0       	breq	.+12     	; 0x182a <MTIMER0_voidTimer0CTCSetCallBack+0x22>
	{
		Global_pvTimerCTCCallBack= Copy_pvCallBackFunc; /*ADDS ISR Function*/
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	9a 81       	ldd	r25, Y+2	; 0x02
    1822:	90 93 99 03 	sts	0x0399, r25
    1826:	80 93 98 03 	sts	0x0398, r24
	else
	{
		/*do nothing*/
	}

}
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <MTIMER0_voidSetBusyWait>:

void MTIMER0_voidSetBusyWait(u16 Copy_u8WaitTime){
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	00 d0       	rcall	.+0      	; 0x183a <MTIMER0_voidSetBusyWait+0x6>
    183a:	00 d0       	rcall	.+0      	; 0x183c <MTIMER0_voidSetBusyWait+0x8>
    183c:	0f 92       	push	r0
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	9d 83       	std	Y+5, r25	; 0x05
    1844:	8c 83       	std	Y+4, r24	; 0x04
	u16 Local_u8Counter = 0;
    1846:	1b 82       	std	Y+3, r1	; 0x03
    1848:	1a 82       	std	Y+2, r1	; 0x02
	u8 counter = 0;
    184a:	19 82       	std	Y+1, r1	; 0x01
    184c:	1d c0       	rjmp	.+58     	; 0x1888 <MTIMER0_voidSetBusyWait+0x54>
	while(Local_u8Counter != Copy_u8WaitTime){
		if(GET_BIT(TIFR,TIFR_OCF0)){
    184e:	e8 e5       	ldi	r30, 0x58	; 88
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	86 95       	lsr	r24
    1856:	88 2f       	mov	r24, r24
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	81 70       	andi	r24, 0x01	; 1
    185c:	90 70       	andi	r25, 0x00	; 0
    185e:	88 23       	and	r24, r24
    1860:	51 f0       	breq	.+20     	; 0x1876 <MTIMER0_voidSetBusyWait+0x42>
			counter++;
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	8f 5f       	subi	r24, 0xFF	; 255
    1866:	89 83       	std	Y+1, r24	; 0x01
			SET_BIT(TIFR,TIFR_OCF0);
    1868:	a8 e5       	ldi	r26, 0x58	; 88
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e8 e5       	ldi	r30, 0x58	; 88
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	82 60       	ori	r24, 0x02	; 2
    1874:	8c 93       	st	X, r24
		}
		if(counter == 4){
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	84 30       	cpi	r24, 0x04	; 4
    187a:	31 f4       	brne	.+12     	; 0x1888 <MTIMER0_voidSetBusyWait+0x54>
			Local_u8Counter++;
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	9b 81       	ldd	r25, Y+3	; 0x03
    1880:	01 96       	adiw	r24, 0x01	; 1
    1882:	9b 83       	std	Y+3, r25	; 0x03
    1884:	8a 83       	std	Y+2, r24	; 0x02
			counter = 0;
    1886:	19 82       	std	Y+1, r1	; 0x01
}

void MTIMER0_voidSetBusyWait(u16 Copy_u8WaitTime){
	u16 Local_u8Counter = 0;
	u8 counter = 0;
	while(Local_u8Counter != Copy_u8WaitTime){
    1888:	2a 81       	ldd	r18, Y+2	; 0x02
    188a:	3b 81       	ldd	r19, Y+3	; 0x03
    188c:	8c 81       	ldd	r24, Y+4	; 0x04
    188e:	9d 81       	ldd	r25, Y+5	; 0x05
    1890:	28 17       	cp	r18, r24
    1892:	39 07       	cpc	r19, r25
    1894:	e1 f6       	brne	.-72     	; 0x184e <MTIMER0_voidSetBusyWait+0x1a>
		if(counter == 4){
			Local_u8Counter++;
			counter = 0;
		}
	}
}
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <__vector_9>:

//TIMER OVERFLOW ISR
void  __vector_9 (void)	__attribute__((signal));
void  __vector_9 (void)
{
    18a6:	1f 92       	push	r1
    18a8:	0f 92       	push	r0
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	0f 92       	push	r0
    18ae:	11 24       	eor	r1, r1
    18b0:	2f 93       	push	r18
    18b2:	3f 93       	push	r19
    18b4:	4f 93       	push	r20
    18b6:	5f 93       	push	r21
    18b8:	6f 93       	push	r22
    18ba:	7f 93       	push	r23
    18bc:	8f 93       	push	r24
    18be:	9f 93       	push	r25
    18c0:	af 93       	push	r26
    18c2:	bf 93       	push	r27
    18c4:	ef 93       	push	r30
    18c6:	ff 93       	push	r31
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerOverFlowCallBack != NULL)
    18d0:	80 91 96 03 	lds	r24, 0x0396
    18d4:	90 91 97 03 	lds	r25, 0x0397
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	29 f0       	breq	.+10     	; 0x18e6 <__vector_9+0x40>
	{
		Global_pvTimerOverFlowCallBack();
    18dc:	e0 91 96 03 	lds	r30, 0x0396
    18e0:	f0 91 97 03 	lds	r31, 0x0397
    18e4:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	ff 91       	pop	r31
    18ec:	ef 91       	pop	r30
    18ee:	bf 91       	pop	r27
    18f0:	af 91       	pop	r26
    18f2:	9f 91       	pop	r25
    18f4:	8f 91       	pop	r24
    18f6:	7f 91       	pop	r23
    18f8:	6f 91       	pop	r22
    18fa:	5f 91       	pop	r21
    18fc:	4f 91       	pop	r20
    18fe:	3f 91       	pop	r19
    1900:	2f 91       	pop	r18
    1902:	0f 90       	pop	r0
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	0f 90       	pop	r0
    1908:	1f 90       	pop	r1
    190a:	18 95       	reti

0000190c <__vector_10>:

//ON COMPARE ISR
void  __vector_10 (void)	__attribute__((signal));
void  __vector_10 (void)
{
    190c:	1f 92       	push	r1
    190e:	0f 92       	push	r0
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	0f 92       	push	r0
    1914:	11 24       	eor	r1, r1
    1916:	2f 93       	push	r18
    1918:	3f 93       	push	r19
    191a:	4f 93       	push	r20
    191c:	5f 93       	push	r21
    191e:	6f 93       	push	r22
    1920:	7f 93       	push	r23
    1922:	8f 93       	push	r24
    1924:	9f 93       	push	r25
    1926:	af 93       	push	r26
    1928:	bf 93       	push	r27
    192a:	ef 93       	push	r30
    192c:	ff 93       	push	r31
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerCTCCallBack != NULL)
    1936:	80 91 98 03 	lds	r24, 0x0398
    193a:	90 91 99 03 	lds	r25, 0x0399
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	29 f0       	breq	.+10     	; 0x194c <__vector_10+0x40>
	{
		Global_pvTimerCTCCallBack();
    1942:	e0 91 98 03 	lds	r30, 0x0398
    1946:	f0 91 99 03 	lds	r31, 0x0399
    194a:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	ff 91       	pop	r31
    1952:	ef 91       	pop	r30
    1954:	bf 91       	pop	r27
    1956:	af 91       	pop	r26
    1958:	9f 91       	pop	r25
    195a:	8f 91       	pop	r24
    195c:	7f 91       	pop	r23
    195e:	6f 91       	pop	r22
    1960:	5f 91       	pop	r21
    1962:	4f 91       	pop	r20
    1964:	3f 91       	pop	r19
    1966:	2f 91       	pop	r18
    1968:	0f 90       	pop	r0
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	0f 90       	pop	r0
    196e:	1f 90       	pop	r1
    1970:	18 95       	reti

00001972 <SPI_InitMaster>:
/**********************************************************************************************************************
 *  Functions Definitions
 *********************************************************************************************************************/

void SPI_InitMaster(void)
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,MSTR);//MASTER
    197a:	ad e2       	ldi	r26, 0x2D	; 45
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	ed e2       	ldi	r30, 0x2D	; 45
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	80 61       	ori	r24, 0x10	; 16
    1986:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPE);//ENABLE
    1988:	ad e2       	ldi	r26, 0x2D	; 45
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	ed e2       	ldi	r30, 0x2D	; 45
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	80 64       	ori	r24, 0x40	; 64
    1994:	8c 93       	st	X, r24
}
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <SPI_InitSlave>:
void SPI_InitSlave(void)
{
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(PORTB, DIO_PIN4, DIO_INPUT);
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	64 e0       	ldi	r22, 0x04	; 4
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB, DIO_PIN5, DIO_INPUT);
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	65 e0       	ldi	r22, 0x05	; 5
    19b2:	40 e0       	ldi	r20, 0x00	; 0
    19b4:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <DIO_SetPinDirection>
	DIO_SetPinValue(PORTB, DIO_PIN5, DIO_HIGH);
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	65 e0       	ldi	r22, 0x05	; 5
    19bc:	41 e0       	ldi	r20, 0x01	; 1
    19be:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinValue>
	DIO_SetPinDirection(PORTB, DIO_PIN6, DIO_OUTPUT);
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	66 e0       	ldi	r22, 0x06	; 6
    19c6:	41 e0       	ldi	r20, 0x01	; 1
    19c8:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB, DIO_PIN7, DIO_INPUT);
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	67 e0       	ldi	r22, 0x07	; 7
    19d0:	40 e0       	ldi	r20, 0x00	; 0
    19d2:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <DIO_SetPinDirection>
	DIO_SetPinValue(PORTB, DIO_PIN7, DIO_HIGH);
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	67 e0       	ldi	r22, 0x07	; 7
    19da:	41 e0       	ldi	r20, 0x01	; 1
    19dc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinValue>

	CLEAR_BIT(SPCR,MSTR);//Slave
    19e0:	ad e2       	ldi	r26, 0x2D	; 45
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	ed e2       	ldi	r30, 0x2D	; 45
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	8f 7e       	andi	r24, 0xEF	; 239
    19ec:	8c 93       	st	X, r24

	SET_BIT(SPCR,SPE);//ENABLE
    19ee:	ad e2       	ldi	r26, 0x2D	; 45
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	ed e2       	ldi	r30, 0x2D	; 45
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	80 64       	ori	r24, 0x40	; 64
    19fa:	8c 93       	st	X, r24
}
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <SPI_SendRecieve>:
u8 SPI_SendRecieve(u8 data)
{
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	0f 92       	push	r0
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	89 83       	std	Y+1, r24	; 0x01
	SPDR=data;
    1a0e:	ef e2       	ldi	r30, 0x2F	; 47
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	80 83       	st	Z, r24
	while (!GET_BIT(SPSR,SPIF));
    1a16:	ee e2       	ldi	r30, 0x2E	; 46
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	88 23       	and	r24, r24
    1a1e:	dc f7       	brge	.-10     	; 0x1a16 <SPI_SendRecieve+0x14>
	return SPDR;
    1a20:	ef e2       	ldi	r30, 0x2F	; 47
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
}
    1a26:	0f 90       	pop	r0
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <SPI_Send>:
void SPI_Send(u8 data)
{
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	0f 92       	push	r0
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	89 83       	std	Y+1, r24	; 0x01
	SPDR=data;
    1a3a:	ef e2       	ldi	r30, 0x2F	; 47
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	80 83       	st	Z, r24
	while (!GET_BIT(SPSR,SPIF));
    1a42:	ee e2       	ldi	r30, 0x2E	; 46
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	88 23       	and	r24, r24
    1a4a:	dc f7       	brge	.-10     	; 0x1a42 <SPI_Send+0x14>
}
    1a4c:	0f 90       	pop	r0
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <SPI_Recieve>:
u8 SPI_Recieve(void)
{
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
	while (!GET_BIT(SPSR,SPIF));
    1a5c:	ee e2       	ldi	r30, 0x2E	; 46
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	88 23       	and	r24, r24
    1a64:	dc f7       	brge	.-10     	; 0x1a5c <SPI_Recieve+0x8>
	return SPDR;
    1a66:	ef e2       	ldi	r30, 0x2F	; 47
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
}
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <GIE_voidEnable>:

/**********************************************************************************************************************
 *  Functions Definitions
 *********************************************************************************************************************/

void GIE_voidEnable(){
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
    1a7a:	af e5       	ldi	r26, 0x5F	; 95
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	ef e5       	ldi	r30, 0x5F	; 95
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	80 68       	ori	r24, 0x80	; 128
    1a86:	8c 93       	st	X, r24
}
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	08 95       	ret

00001a8e <GIE_voidDisable>:

void GIE_voidDisable(){
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
    1a96:	af e5       	ldi	r26, 0x5F	; 95
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	ef e5       	ldi	r30, 0x5F	; 95
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	8f 77       	andi	r24, 0x7F	; 127
    1aa2:	8c 93       	st	X, r24
}
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <EXTI_voidInt0Init>:

/**********************************************************************************************************************
 *  Functions Definitions
 *********************************************************************************************************************/

void EXTI_voidInt0Init(){
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
	/*Check sense control of Pin INT0*/
	#if 	INT0_SENSE == LOW_LEVEL
	
		CLR_BIT(MCUCR,MCUCR_ISC00);
    1ab2:	a5 e5       	ldi	r26, 0x55	; 85
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e5 e5       	ldi	r30, 0x55	; 85
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	8e 7f       	andi	r24, 0xFE	; 254
    1abe:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC01);
    1ac0:	a5 e5       	ldi	r26, 0x55	; 85
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e5 e5       	ldi	r30, 0x55	; 85
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	8d 7f       	andi	r24, 0xFD	; 253
    1acc:	8c 93       	st	X, r24
	#endif
	
	/*Check Peripheral Interrupt Enable for INT0*/
	#if 	INT0_INITIAL_STATE == ENABLED
	
		SET_BIT(GICR,GICR_INT0);
    1ace:	ab e5       	ldi	r26, 0x5B	; 91
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	eb e5       	ldi	r30, 0x5B	; 91
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	80 64       	ori	r24, 0x40	; 64
    1ada:	8c 93       	st	X, r24
		
	#else
		#error "WRONG PIE CONFIGURATION FOR INT0"
	#endif
	
}
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <EXTI_voidInt1Init>:


void EXTI_voidInt1Init(){
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
	
}
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <EXTI_voidInt2Init>:


void EXTI_voidInt2Init(){
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
	
}
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <DIO_SetPinDirection>:

/**********************************************************************************************************************
 *  Functions Definitions
 *********************************************************************************************************************/

void DIO_SetPinDirection(u8 Port, u8 Pin, u8 Direction){
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <DIO_SetPinDirection+0x6>
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <DIO_SetPinDirection+0x8>
    1b06:	0f 92       	push	r0
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	6a 83       	std	Y+2, r22	; 0x02
    1b10:	4b 83       	std	Y+3, r20	; 0x03

	switch(Port){
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	3d 83       	std	Y+5, r19	; 0x05
    1b1a:	2c 83       	std	Y+4, r18	; 0x04
    1b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	91 05       	cpc	r25, r1
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <DIO_SetPinDirection+0x2a>
    1b26:	47 c0       	rjmp	.+142    	; 0x1bb6 <DIO_SetPinDirection+0xb8>
    1b28:	2c 81       	ldd	r18, Y+4	; 0x04
    1b2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b2c:	22 30       	cpi	r18, 0x02	; 2
    1b2e:	31 05       	cpc	r19, r1
    1b30:	2c f4       	brge	.+10     	; 0x1b3c <DIO_SetPinDirection+0x3e>
    1b32:	8c 81       	ldd	r24, Y+4	; 0x04
    1b34:	9d 81       	ldd	r25, Y+5	; 0x05
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	71 f0       	breq	.+28     	; 0x1b56 <DIO_SetPinDirection+0x58>
    1b3a:	cb c0       	rjmp	.+406    	; 0x1cd2 <DIO_SetPinDirection+0x1d4>
    1b3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b40:	22 30       	cpi	r18, 0x02	; 2
    1b42:	31 05       	cpc	r19, r1
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <DIO_SetPinDirection+0x4a>
    1b46:	67 c0       	rjmp	.+206    	; 0x1c16 <DIO_SetPinDirection+0x118>
    1b48:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4c:	83 30       	cpi	r24, 0x03	; 3
    1b4e:	91 05       	cpc	r25, r1
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <DIO_SetPinDirection+0x56>
    1b52:	91 c0       	rjmp	.+290    	; 0x1c76 <DIO_SetPinDirection+0x178>
    1b54:	be c0       	rjmp	.+380    	; 0x1cd2 <DIO_SetPinDirection+0x1d4>

	case PORTA:
		if(Direction == DIO_INPUT){
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	88 23       	and	r24, r24
    1b5a:	a9 f4       	brne	.+42     	; 0x1b86 <DIO_SetPinDirection+0x88>
			CLR_BIT(DDRA_REG,Pin);
    1b5c:	aa e3       	ldi	r26, 0x3A	; 58
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	ea e3       	ldi	r30, 0x3A	; 58
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	48 2f       	mov	r20, r24
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	02 2e       	mov	r0, r18
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <DIO_SetPinDirection+0x7c>
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	0a 94       	dec	r0
    1b7c:	e2 f7       	brpl	.-8      	; 0x1b76 <DIO_SetPinDirection+0x78>
    1b7e:	80 95       	com	r24
    1b80:	84 23       	and	r24, r20
    1b82:	8c 93       	st	X, r24
    1b84:	a6 c0       	rjmp	.+332    	; 0x1cd2 <DIO_SetPinDirection+0x1d4>
		}
		else if(Direction == DIO_OUTPUT){
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	81 30       	cpi	r24, 0x01	; 1
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <DIO_SetPinDirection+0x90>
    1b8c:	a2 c0       	rjmp	.+324    	; 0x1cd2 <DIO_SetPinDirection+0x1d4>
			SET_BIT(DDRA_REG,Pin);
    1b8e:	aa e3       	ldi	r26, 0x3A	; 58
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	ea e3       	ldi	r30, 0x3A	; 58
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	48 2f       	mov	r20, r24
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	02 2e       	mov	r0, r18
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <DIO_SetPinDirection+0xae>
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	0a 94       	dec	r0
    1bae:	e2 f7       	brpl	.-8      	; 0x1ba8 <DIO_SetPinDirection+0xaa>
    1bb0:	84 2b       	or	r24, r20
    1bb2:	8c 93       	st	X, r24
    1bb4:	8e c0       	rjmp	.+284    	; 0x1cd2 <DIO_SetPinDirection+0x1d4>
		}
		break;

	case PORTB:
		if(Direction == DIO_INPUT){
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	88 23       	and	r24, r24
    1bba:	a9 f4       	brne	.+42     	; 0x1be6 <DIO_SetPinDirection+0xe8>
			CLR_BIT(DDRB_REG,Pin);
    1bbc:	a7 e3       	ldi	r26, 0x37	; 55
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e7 e3       	ldi	r30, 0x37	; 55
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	48 2f       	mov	r20, r24
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	02 2e       	mov	r0, r18
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <DIO_SetPinDirection+0xdc>
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	0a 94       	dec	r0
    1bdc:	e2 f7       	brpl	.-8      	; 0x1bd6 <DIO_SetPinDirection+0xd8>
    1bde:	80 95       	com	r24
    1be0:	84 23       	and	r24, r20
    1be2:	8c 93       	st	X, r24
    1be4:	76 c0       	rjmp	.+236    	; 0x1cd2 <DIO_SetPinDirection+0x1d4>
		}
		else if(Direction == DIO_OUTPUT){
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	81 30       	cpi	r24, 0x01	; 1
    1bea:	09 f0       	breq	.+2      	; 0x1bee <DIO_SetPinDirection+0xf0>
    1bec:	72 c0       	rjmp	.+228    	; 0x1cd2 <DIO_SetPinDirection+0x1d4>
			SET_BIT(DDRB_REG,Pin);
    1bee:	a7 e3       	ldi	r26, 0x37	; 55
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e7 e3       	ldi	r30, 0x37	; 55
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	48 2f       	mov	r20, r24
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 2e       	mov	r0, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <DIO_SetPinDirection+0x10e>
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	0a 94       	dec	r0
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <DIO_SetPinDirection+0x10a>
    1c10:	84 2b       	or	r24, r20
    1c12:	8c 93       	st	X, r24
    1c14:	5e c0       	rjmp	.+188    	; 0x1cd2 <DIO_SetPinDirection+0x1d4>
		}
		break;

	case PORTC:
		if(Direction == DIO_INPUT){
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	88 23       	and	r24, r24
    1c1a:	a9 f4       	brne	.+42     	; 0x1c46 <DIO_SetPinDirection+0x148>
			CLR_BIT(DDRC_REG,Pin);
    1c1c:	a4 e3       	ldi	r26, 0x34	; 52
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e4 e3       	ldi	r30, 0x34	; 52
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	48 2f       	mov	r20, r24
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	02 2e       	mov	r0, r18
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <DIO_SetPinDirection+0x13c>
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	0a 94       	dec	r0
    1c3c:	e2 f7       	brpl	.-8      	; 0x1c36 <DIO_SetPinDirection+0x138>
    1c3e:	80 95       	com	r24
    1c40:	84 23       	and	r24, r20
    1c42:	8c 93       	st	X, r24
    1c44:	46 c0       	rjmp	.+140    	; 0x1cd2 <DIO_SetPinDirection+0x1d4>
		}
		else if(Direction == DIO_OUTPUT){
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	81 30       	cpi	r24, 0x01	; 1
    1c4a:	09 f0       	breq	.+2      	; 0x1c4e <DIO_SetPinDirection+0x150>
    1c4c:	42 c0       	rjmp	.+132    	; 0x1cd2 <DIO_SetPinDirection+0x1d4>
			SET_BIT(DDRC_REG,Pin);
    1c4e:	a4 e3       	ldi	r26, 0x34	; 52
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e4 e3       	ldi	r30, 0x34	; 52
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	48 2f       	mov	r20, r24
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	02 2e       	mov	r0, r18
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <DIO_SetPinDirection+0x16e>
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	0a 94       	dec	r0
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <DIO_SetPinDirection+0x16a>
    1c70:	84 2b       	or	r24, r20
    1c72:	8c 93       	st	X, r24
    1c74:	2e c0       	rjmp	.+92     	; 0x1cd2 <DIO_SetPinDirection+0x1d4>
		}
		break;

	case PORTD:
		if(Direction == DIO_INPUT){
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	88 23       	and	r24, r24
    1c7a:	a9 f4       	brne	.+42     	; 0x1ca6 <DIO_SetPinDirection+0x1a8>
			CLR_BIT(DDRD_REG,Pin);
    1c7c:	a1 e3       	ldi	r26, 0x31	; 49
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e1 e3       	ldi	r30, 0x31	; 49
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	48 2f       	mov	r20, r24
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	02 2e       	mov	r0, r18
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <DIO_SetPinDirection+0x19c>
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	0a 94       	dec	r0
    1c9c:	e2 f7       	brpl	.-8      	; 0x1c96 <DIO_SetPinDirection+0x198>
    1c9e:	80 95       	com	r24
    1ca0:	84 23       	and	r24, r20
    1ca2:	8c 93       	st	X, r24
    1ca4:	16 c0       	rjmp	.+44     	; 0x1cd2 <DIO_SetPinDirection+0x1d4>
		}
		else if(Direction == DIO_OUTPUT){
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	99 f4       	brne	.+38     	; 0x1cd2 <DIO_SetPinDirection+0x1d4>
			SET_BIT(DDRD_REG,Pin);
    1cac:	a1 e3       	ldi	r26, 0x31	; 49
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e1 e3       	ldi	r30, 0x31	; 49
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	48 2f       	mov	r20, r24
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	02 2e       	mov	r0, r18
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <DIO_SetPinDirection+0x1cc>
    1cc6:	88 0f       	add	r24, r24
    1cc8:	99 1f       	adc	r25, r25
    1cca:	0a 94       	dec	r0
    1ccc:	e2 f7       	brpl	.-8      	; 0x1cc6 <DIO_SetPinDirection+0x1c8>
    1cce:	84 2b       	or	r24, r20
    1cd0:	8c 93       	st	X, r24

	default:
		break;
	}

}
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <DIO_SetPinValue>:

void DIO_SetPinValue(u8 Port, u8 Pin, u8 Value){
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <DIO_SetPinValue+0x6>
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <DIO_SetPinValue+0x8>
    1cea:	0f 92       	push	r0
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	6a 83       	std	Y+2, r22	; 0x02
    1cf4:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port){
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	3d 83       	std	Y+5, r19	; 0x05
    1cfe:	2c 83       	std	Y+4, r18	; 0x04
    1d00:	8c 81       	ldd	r24, Y+4	; 0x04
    1d02:	9d 81       	ldd	r25, Y+5	; 0x05
    1d04:	81 30       	cpi	r24, 0x01	; 1
    1d06:	91 05       	cpc	r25, r1
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <DIO_SetPinValue+0x2a>
    1d0a:	47 c0       	rjmp	.+142    	; 0x1d9a <DIO_SetPinValue+0xb8>
    1d0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d10:	22 30       	cpi	r18, 0x02	; 2
    1d12:	31 05       	cpc	r19, r1
    1d14:	2c f4       	brge	.+10     	; 0x1d20 <DIO_SetPinValue+0x3e>
    1d16:	8c 81       	ldd	r24, Y+4	; 0x04
    1d18:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	71 f0       	breq	.+28     	; 0x1d3a <DIO_SetPinValue+0x58>
    1d1e:	cb c0       	rjmp	.+406    	; 0x1eb6 <DIO_SetPinValue+0x1d4>
    1d20:	2c 81       	ldd	r18, Y+4	; 0x04
    1d22:	3d 81       	ldd	r19, Y+5	; 0x05
    1d24:	22 30       	cpi	r18, 0x02	; 2
    1d26:	31 05       	cpc	r19, r1
    1d28:	09 f4       	brne	.+2      	; 0x1d2c <DIO_SetPinValue+0x4a>
    1d2a:	67 c0       	rjmp	.+206    	; 0x1dfa <DIO_SetPinValue+0x118>
    1d2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d30:	83 30       	cpi	r24, 0x03	; 3
    1d32:	91 05       	cpc	r25, r1
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <DIO_SetPinValue+0x56>
    1d36:	91 c0       	rjmp	.+290    	; 0x1e5a <DIO_SetPinValue+0x178>
    1d38:	be c0       	rjmp	.+380    	; 0x1eb6 <DIO_SetPinValue+0x1d4>
	case PORTA:
		if(Value == DIO_LOW){
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	88 23       	and	r24, r24
    1d3e:	a9 f4       	brne	.+42     	; 0x1d6a <DIO_SetPinValue+0x88>
			CLR_BIT(PORTA_REG,Pin);
    1d40:	ab e3       	ldi	r26, 0x3B	; 59
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	eb e3       	ldi	r30, 0x3B	; 59
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	48 2f       	mov	r20, r24
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	02 2e       	mov	r0, r18
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <DIO_SetPinValue+0x7c>
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	0a 94       	dec	r0
    1d60:	e2 f7       	brpl	.-8      	; 0x1d5a <DIO_SetPinValue+0x78>
    1d62:	80 95       	com	r24
    1d64:	84 23       	and	r24, r20
    1d66:	8c 93       	st	X, r24
    1d68:	a6 c0       	rjmp	.+332    	; 0x1eb6 <DIO_SetPinValue+0x1d4>
		}
		else if(Value == DIO_HIGH){
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	81 30       	cpi	r24, 0x01	; 1
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <DIO_SetPinValue+0x90>
    1d70:	a2 c0       	rjmp	.+324    	; 0x1eb6 <DIO_SetPinValue+0x1d4>
			SET_BIT(PORTA_REG,Pin);
    1d72:	ab e3       	ldi	r26, 0x3B	; 59
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	eb e3       	ldi	r30, 0x3B	; 59
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	48 2f       	mov	r20, r24
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	02 2e       	mov	r0, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <DIO_SetPinValue+0xae>
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	0a 94       	dec	r0
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <DIO_SetPinValue+0xaa>
    1d94:	84 2b       	or	r24, r20
    1d96:	8c 93       	st	X, r24
    1d98:	8e c0       	rjmp	.+284    	; 0x1eb6 <DIO_SetPinValue+0x1d4>
		}
		break;

	case PORTB:
		if(Value == DIO_LOW){
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	88 23       	and	r24, r24
    1d9e:	a9 f4       	brne	.+42     	; 0x1dca <DIO_SetPinValue+0xe8>
			CLR_BIT(PORTB_REG,Pin);
    1da0:	a8 e3       	ldi	r26, 0x38	; 56
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e8 e3       	ldi	r30, 0x38	; 56
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	48 2f       	mov	r20, r24
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	02 2e       	mov	r0, r18
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <DIO_SetPinValue+0xdc>
    1dba:	88 0f       	add	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	0a 94       	dec	r0
    1dc0:	e2 f7       	brpl	.-8      	; 0x1dba <DIO_SetPinValue+0xd8>
    1dc2:	80 95       	com	r24
    1dc4:	84 23       	and	r24, r20
    1dc6:	8c 93       	st	X, r24
    1dc8:	76 c0       	rjmp	.+236    	; 0x1eb6 <DIO_SetPinValue+0x1d4>
		}
		else if(Value == DIO_HIGH){
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	81 30       	cpi	r24, 0x01	; 1
    1dce:	09 f0       	breq	.+2      	; 0x1dd2 <DIO_SetPinValue+0xf0>
    1dd0:	72 c0       	rjmp	.+228    	; 0x1eb6 <DIO_SetPinValue+0x1d4>
			SET_BIT(PORTB_REG,Pin);
    1dd2:	a8 e3       	ldi	r26, 0x38	; 56
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e8 e3       	ldi	r30, 0x38	; 56
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	48 2f       	mov	r20, r24
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	02 2e       	mov	r0, r18
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <DIO_SetPinValue+0x10e>
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	0a 94       	dec	r0
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <DIO_SetPinValue+0x10a>
    1df4:	84 2b       	or	r24, r20
    1df6:	8c 93       	st	X, r24
    1df8:	5e c0       	rjmp	.+188    	; 0x1eb6 <DIO_SetPinValue+0x1d4>
		}
		break;

	case PORTC:
		if(Value == DIO_LOW){
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	88 23       	and	r24, r24
    1dfe:	a9 f4       	brne	.+42     	; 0x1e2a <DIO_SetPinValue+0x148>
			CLR_BIT(PORTC_REG,Pin);
    1e00:	a5 e3       	ldi	r26, 0x35	; 53
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e5 e3       	ldi	r30, 0x35	; 53
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	48 2f       	mov	r20, r24
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	02 2e       	mov	r0, r18
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <DIO_SetPinValue+0x13c>
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	0a 94       	dec	r0
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <DIO_SetPinValue+0x138>
    1e22:	80 95       	com	r24
    1e24:	84 23       	and	r24, r20
    1e26:	8c 93       	st	X, r24
    1e28:	46 c0       	rjmp	.+140    	; 0x1eb6 <DIO_SetPinValue+0x1d4>
		}
		else if(Value == DIO_HIGH){
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	81 30       	cpi	r24, 0x01	; 1
    1e2e:	09 f0       	breq	.+2      	; 0x1e32 <DIO_SetPinValue+0x150>
    1e30:	42 c0       	rjmp	.+132    	; 0x1eb6 <DIO_SetPinValue+0x1d4>
			SET_BIT(PORTC_REG,Pin);
    1e32:	a5 e3       	ldi	r26, 0x35	; 53
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e5 e3       	ldi	r30, 0x35	; 53
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	48 2f       	mov	r20, r24
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	02 2e       	mov	r0, r18
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <DIO_SetPinValue+0x16e>
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	0a 94       	dec	r0
    1e52:	e2 f7       	brpl	.-8      	; 0x1e4c <DIO_SetPinValue+0x16a>
    1e54:	84 2b       	or	r24, r20
    1e56:	8c 93       	st	X, r24
    1e58:	2e c0       	rjmp	.+92     	; 0x1eb6 <DIO_SetPinValue+0x1d4>
		}
		break;

	case PORTD:
		if(Value == DIO_LOW){
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	88 23       	and	r24, r24
    1e5e:	a9 f4       	brne	.+42     	; 0x1e8a <DIO_SetPinValue+0x1a8>
			CLR_BIT(PORTD_REG,Pin);
    1e60:	a2 e3       	ldi	r26, 0x32	; 50
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e2 e3       	ldi	r30, 0x32	; 50
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	48 2f       	mov	r20, r24
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	02 2e       	mov	r0, r18
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <DIO_SetPinValue+0x19c>
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	0a 94       	dec	r0
    1e80:	e2 f7       	brpl	.-8      	; 0x1e7a <DIO_SetPinValue+0x198>
    1e82:	80 95       	com	r24
    1e84:	84 23       	and	r24, r20
    1e86:	8c 93       	st	X, r24
    1e88:	16 c0       	rjmp	.+44     	; 0x1eb6 <DIO_SetPinValue+0x1d4>
		}
		else if(Value == DIO_HIGH){
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	81 30       	cpi	r24, 0x01	; 1
    1e8e:	99 f4       	brne	.+38     	; 0x1eb6 <DIO_SetPinValue+0x1d4>
			SET_BIT(PORTD_REG,Pin);
    1e90:	a2 e3       	ldi	r26, 0x32	; 50
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e2 e3       	ldi	r30, 0x32	; 50
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	48 2f       	mov	r20, r24
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	02 2e       	mov	r0, r18
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <DIO_SetPinValue+0x1cc>
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	0a 94       	dec	r0
    1eb0:	e2 f7       	brpl	.-8      	; 0x1eaa <DIO_SetPinValue+0x1c8>
    1eb2:	84 2b       	or	r24, r20
    1eb4:	8c 93       	st	X, r24
		break;

	default:
		break;
	}
}
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 Port, u8 Pin){
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <DIO_GetPinValue+0x6>
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <DIO_GetPinValue+0x8>
    1ece:	0f 92       	push	r0
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	89 83       	std	Y+1, r24	; 0x01
    1ed6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port){
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	3d 83       	std	Y+5, r19	; 0x05
    1ee0:	2c 83       	std	Y+4, r18	; 0x04
    1ee2:	4c 81       	ldd	r20, Y+4	; 0x04
    1ee4:	5d 81       	ldd	r21, Y+5	; 0x05
    1ee6:	41 30       	cpi	r20, 0x01	; 1
    1ee8:	51 05       	cpc	r21, r1
    1eea:	49 f1       	breq	.+82     	; 0x1f3e <DIO_GetPinValue+0x78>
    1eec:	8c 81       	ldd	r24, Y+4	; 0x04
    1eee:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef0:	82 30       	cpi	r24, 0x02	; 2
    1ef2:	91 05       	cpc	r25, r1
    1ef4:	34 f4       	brge	.+12     	; 0x1f02 <DIO_GetPinValue+0x3c>
    1ef6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ef8:	3d 81       	ldd	r19, Y+5	; 0x05
    1efa:	21 15       	cp	r18, r1
    1efc:	31 05       	cpc	r19, r1
    1efe:	61 f0       	breq	.+24     	; 0x1f18 <DIO_GetPinValue+0x52>
    1f00:	57 c0       	rjmp	.+174    	; 0x1fb0 <DIO_GetPinValue+0xea>
    1f02:	4c 81       	ldd	r20, Y+4	; 0x04
    1f04:	5d 81       	ldd	r21, Y+5	; 0x05
    1f06:	42 30       	cpi	r20, 0x02	; 2
    1f08:	51 05       	cpc	r21, r1
    1f0a:	61 f1       	breq	.+88     	; 0x1f64 <DIO_GetPinValue+0x9e>
    1f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f10:	83 30       	cpi	r24, 0x03	; 3
    1f12:	91 05       	cpc	r25, r1
    1f14:	d1 f1       	breq	.+116    	; 0x1f8a <DIO_GetPinValue+0xc4>
    1f16:	4c c0       	rjmp	.+152    	; 0x1fb0 <DIO_GetPinValue+0xea>
	case PORTA:
		return GET_BIT(PINA_REG,Pin);
    1f18:	e9 e3       	ldi	r30, 0x39	; 57
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	88 2f       	mov	r24, r24
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	a9 01       	movw	r20, r18
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <DIO_GetPinValue+0x6a>
    1f2c:	55 95       	asr	r21
    1f2e:	47 95       	ror	r20
    1f30:	8a 95       	dec	r24
    1f32:	e2 f7       	brpl	.-8      	; 0x1f2c <DIO_GetPinValue+0x66>
    1f34:	ca 01       	movw	r24, r20
    1f36:	58 2f       	mov	r21, r24
    1f38:	51 70       	andi	r21, 0x01	; 1
    1f3a:	5b 83       	std	Y+3, r21	; 0x03
    1f3c:	3b c0       	rjmp	.+118    	; 0x1fb4 <DIO_GetPinValue+0xee>
	case PORTB:
		return GET_BIT(PINB_REG,Pin);
    1f3e:	e6 e3       	ldi	r30, 0x36	; 54
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	88 2f       	mov	r24, r24
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	a9 01       	movw	r20, r18
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <DIO_GetPinValue+0x90>
    1f52:	55 95       	asr	r21
    1f54:	47 95       	ror	r20
    1f56:	8a 95       	dec	r24
    1f58:	e2 f7       	brpl	.-8      	; 0x1f52 <DIO_GetPinValue+0x8c>
    1f5a:	ca 01       	movw	r24, r20
    1f5c:	58 2f       	mov	r21, r24
    1f5e:	51 70       	andi	r21, 0x01	; 1
    1f60:	5b 83       	std	Y+3, r21	; 0x03
    1f62:	28 c0       	rjmp	.+80     	; 0x1fb4 <DIO_GetPinValue+0xee>
	case PORTC:
		return GET_BIT(PINC_REG,Pin);
    1f64:	e3 e3       	ldi	r30, 0x33	; 51
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	88 2f       	mov	r24, r24
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a9 01       	movw	r20, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <DIO_GetPinValue+0xb6>
    1f78:	55 95       	asr	r21
    1f7a:	47 95       	ror	r20
    1f7c:	8a 95       	dec	r24
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <DIO_GetPinValue+0xb2>
    1f80:	ca 01       	movw	r24, r20
    1f82:	58 2f       	mov	r21, r24
    1f84:	51 70       	andi	r21, 0x01	; 1
    1f86:	5b 83       	std	Y+3, r21	; 0x03
    1f88:	15 c0       	rjmp	.+42     	; 0x1fb4 <DIO_GetPinValue+0xee>
	case PORTD:
		return GET_BIT(PIND_REG,Pin);
    1f8a:	e0 e3       	ldi	r30, 0x30	; 48
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	88 2f       	mov	r24, r24
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	a9 01       	movw	r20, r18
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <DIO_GetPinValue+0xdc>
    1f9e:	55 95       	asr	r21
    1fa0:	47 95       	ror	r20
    1fa2:	8a 95       	dec	r24
    1fa4:	e2 f7       	brpl	.-8      	; 0x1f9e <DIO_GetPinValue+0xd8>
    1fa6:	ca 01       	movw	r24, r20
    1fa8:	58 2f       	mov	r21, r24
    1faa:	51 70       	andi	r21, 0x01	; 1
    1fac:	5b 83       	std	Y+3, r21	; 0x03
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <DIO_GetPinValue+0xee>
	default:
		return 2;
    1fb0:	82 e0       	ldi	r24, 0x02	; 2
    1fb2:	8b 83       	std	Y+3, r24	; 0x03
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	cf 91       	pop	r28
    1fc2:	df 91       	pop	r29
    1fc4:	08 95       	ret

00001fc6 <DIO_SetPortDirection>:

void DIO_SetPortDirection(u8 Port,u8 Direction){
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <DIO_SetPortDirection+0x6>
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <DIO_SetPortDirection+0x8>
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	89 83       	std	Y+1, r24	; 0x01
    1fd4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port){
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	28 2f       	mov	r18, r24
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	3c 83       	std	Y+4, r19	; 0x04
    1fde:	2b 83       	std	Y+3, r18	; 0x03
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe4:	81 30       	cpi	r24, 0x01	; 1
    1fe6:	91 05       	cpc	r25, r1
    1fe8:	d1 f0       	breq	.+52     	; 0x201e <DIO_SetPortDirection+0x58>
    1fea:	2b 81       	ldd	r18, Y+3	; 0x03
    1fec:	3c 81       	ldd	r19, Y+4	; 0x04
    1fee:	22 30       	cpi	r18, 0x02	; 2
    1ff0:	31 05       	cpc	r19, r1
    1ff2:	2c f4       	brge	.+10     	; 0x1ffe <DIO_SetPortDirection+0x38>
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	61 f0       	breq	.+24     	; 0x2014 <DIO_SetPortDirection+0x4e>
    1ffc:	1e c0       	rjmp	.+60     	; 0x203a <DIO_SetPortDirection+0x74>
    1ffe:	2b 81       	ldd	r18, Y+3	; 0x03
    2000:	3c 81       	ldd	r19, Y+4	; 0x04
    2002:	22 30       	cpi	r18, 0x02	; 2
    2004:	31 05       	cpc	r19, r1
    2006:	81 f0       	breq	.+32     	; 0x2028 <DIO_SetPortDirection+0x62>
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	83 30       	cpi	r24, 0x03	; 3
    200e:	91 05       	cpc	r25, r1
    2010:	81 f0       	breq	.+32     	; 0x2032 <DIO_SetPortDirection+0x6c>
    2012:	13 c0       	rjmp	.+38     	; 0x203a <DIO_SetPortDirection+0x74>
	case PORTA:
		DDRA_REG = Direction;
    2014:	ea e3       	ldi	r30, 0x3A	; 58
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	80 83       	st	Z, r24
    201c:	0e c0       	rjmp	.+28     	; 0x203a <DIO_SetPortDirection+0x74>
		break;
	case PORTB:
		DDRB_REG = Direction;
    201e:	e7 e3       	ldi	r30, 0x37	; 55
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	8a 81       	ldd	r24, Y+2	; 0x02
    2024:	80 83       	st	Z, r24
    2026:	09 c0       	rjmp	.+18     	; 0x203a <DIO_SetPortDirection+0x74>
		break;
	case PORTC:
		DDRC_REG = Direction;
    2028:	e4 e3       	ldi	r30, 0x34	; 52
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	80 83       	st	Z, r24
    2030:	04 c0       	rjmp	.+8      	; 0x203a <DIO_SetPortDirection+0x74>
		break;
	case PORTD:
		DDRD_REG = Direction;
    2032:	e1 e3       	ldi	r30, 0x31	; 49
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	80 83       	st	Z, r24
		break;
	}
}
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <DIO_SetPortValue>:
void DIO_SetPortValue(u8 Port,u8 Value){
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	00 d0       	rcall	.+0      	; 0x204e <DIO_SetPortValue+0x6>
    204e:	00 d0       	rcall	.+0      	; 0x2050 <DIO_SetPortValue+0x8>
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	89 83       	std	Y+1, r24	; 0x01
    2056:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port){
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	3c 83       	std	Y+4, r19	; 0x04
    2060:	2b 83       	std	Y+3, r18	; 0x03
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	9c 81       	ldd	r25, Y+4	; 0x04
    2066:	81 30       	cpi	r24, 0x01	; 1
    2068:	91 05       	cpc	r25, r1
    206a:	d1 f0       	breq	.+52     	; 0x20a0 <DIO_SetPortValue+0x58>
    206c:	2b 81       	ldd	r18, Y+3	; 0x03
    206e:	3c 81       	ldd	r19, Y+4	; 0x04
    2070:	22 30       	cpi	r18, 0x02	; 2
    2072:	31 05       	cpc	r19, r1
    2074:	2c f4       	brge	.+10     	; 0x2080 <DIO_SetPortValue+0x38>
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	61 f0       	breq	.+24     	; 0x2096 <DIO_SetPortValue+0x4e>
    207e:	1e c0       	rjmp	.+60     	; 0x20bc <DIO_SetPortValue+0x74>
    2080:	2b 81       	ldd	r18, Y+3	; 0x03
    2082:	3c 81       	ldd	r19, Y+4	; 0x04
    2084:	22 30       	cpi	r18, 0x02	; 2
    2086:	31 05       	cpc	r19, r1
    2088:	81 f0       	breq	.+32     	; 0x20aa <DIO_SetPortValue+0x62>
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	9c 81       	ldd	r25, Y+4	; 0x04
    208e:	83 30       	cpi	r24, 0x03	; 3
    2090:	91 05       	cpc	r25, r1
    2092:	81 f0       	breq	.+32     	; 0x20b4 <DIO_SetPortValue+0x6c>
    2094:	13 c0       	rjmp	.+38     	; 0x20bc <DIO_SetPortValue+0x74>
	case PORTA:
		PORTA_REG = Value;
    2096:	eb e3       	ldi	r30, 0x3B	; 59
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	80 83       	st	Z, r24
    209e:	0e c0       	rjmp	.+28     	; 0x20bc <DIO_SetPortValue+0x74>
		break;
	case PORTB:
		PORTB_REG = Value;
    20a0:	e8 e3       	ldi	r30, 0x38	; 56
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	80 83       	st	Z, r24
    20a8:	09 c0       	rjmp	.+18     	; 0x20bc <DIO_SetPortValue+0x74>
		break;
	case PORTC:
		PORTC_REG = Value;
    20aa:	e5 e3       	ldi	r30, 0x35	; 53
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	80 83       	st	Z, r24
    20b2:	04 c0       	rjmp	.+8      	; 0x20bc <DIO_SetPortValue+0x74>
		break;
	case PORTD:
		PORTD_REG = Value;
    20b4:	e2 e3       	ldi	r30, 0x32	; 50
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	80 83       	st	Z, r24
		break;
	}

}
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	cf 91       	pop	r28
    20c6:	df 91       	pop	r29
    20c8:	08 95       	ret

000020ca <DIO_GetPortValue>:

u8 DIO_GetPortValue(u8 Port){
    20ca:	df 93       	push	r29
    20cc:	cf 93       	push	r28
    20ce:	00 d0       	rcall	.+0      	; 0x20d0 <DIO_GetPortValue+0x6>
    20d0:	00 d0       	rcall	.+0      	; 0x20d2 <DIO_GetPortValue+0x8>
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
    20d6:	89 83       	std	Y+1, r24	; 0x01
	switch(Port){
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	28 2f       	mov	r18, r24
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	3c 83       	std	Y+4, r19	; 0x04
    20e0:	2b 83       	std	Y+3, r18	; 0x03
    20e2:	8b 81       	ldd	r24, Y+3	; 0x03
    20e4:	9c 81       	ldd	r25, Y+4	; 0x04
    20e6:	81 30       	cpi	r24, 0x01	; 1
    20e8:	91 05       	cpc	r25, r1
    20ea:	d1 f0       	breq	.+52     	; 0x2120 <DIO_GetPortValue+0x56>
    20ec:	2b 81       	ldd	r18, Y+3	; 0x03
    20ee:	3c 81       	ldd	r19, Y+4	; 0x04
    20f0:	22 30       	cpi	r18, 0x02	; 2
    20f2:	31 05       	cpc	r19, r1
    20f4:	2c f4       	brge	.+10     	; 0x2100 <DIO_GetPortValue+0x36>
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	9c 81       	ldd	r25, Y+4	; 0x04
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	61 f0       	breq	.+24     	; 0x2116 <DIO_GetPortValue+0x4c>
    20fe:	1f c0       	rjmp	.+62     	; 0x213e <DIO_GetPortValue+0x74>
    2100:	2b 81       	ldd	r18, Y+3	; 0x03
    2102:	3c 81       	ldd	r19, Y+4	; 0x04
    2104:	22 30       	cpi	r18, 0x02	; 2
    2106:	31 05       	cpc	r19, r1
    2108:	81 f0       	breq	.+32     	; 0x212a <DIO_GetPortValue+0x60>
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	9c 81       	ldd	r25, Y+4	; 0x04
    210e:	83 30       	cpi	r24, 0x03	; 3
    2110:	91 05       	cpc	r25, r1
    2112:	81 f0       	breq	.+32     	; 0x2134 <DIO_GetPortValue+0x6a>
    2114:	14 c0       	rjmp	.+40     	; 0x213e <DIO_GetPortValue+0x74>
	case PORTA:
		return PORTA_REG;
    2116:	eb e3       	ldi	r30, 0x3B	; 59
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	90 81       	ld	r25, Z
    211c:	9a 83       	std	Y+2, r25	; 0x02
    211e:	11 c0       	rjmp	.+34     	; 0x2142 <DIO_GetPortValue+0x78>
	case PORTB:
		return PORTB_REG;
    2120:	e8 e3       	ldi	r30, 0x38	; 56
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	20 81       	ld	r18, Z
    2126:	2a 83       	std	Y+2, r18	; 0x02
    2128:	0c c0       	rjmp	.+24     	; 0x2142 <DIO_GetPortValue+0x78>
	case PORTC:
		return PORTC_REG;
    212a:	e5 e3       	ldi	r30, 0x35	; 53
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	30 81       	ld	r19, Z
    2130:	3a 83       	std	Y+2, r19	; 0x02
    2132:	07 c0       	rjmp	.+14     	; 0x2142 <DIO_GetPortValue+0x78>
	case PORTD:
		return PORTD_REG;
    2134:	e2 e3       	ldi	r30, 0x32	; 50
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	8a 83       	std	Y+2, r24	; 0x02
    213c:	02 c0       	rjmp	.+4      	; 0x2142 <DIO_GetPortValue+0x78>
	default:
		return 0x10;
    213e:	90 e1       	ldi	r25, 0x10	; 16
    2140:	9a 83       	std	Y+2, r25	; 0x02
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <ADC_voidInit>:
/**********************************************************************************************************************
 *  Functions Definitions
 *********************************************************************************************************************/

void ADC_voidInit(void)
{
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
	/* Select AVCC reference voltage */
	SET_BIT(ADMUX,ADMUX_REFS0);
    215a:	a7 e2       	ldi	r26, 0x27	; 39
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e7 e2       	ldi	r30, 0x27	; 39
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	80 64       	ori	r24, 0x40	; 64
    2166:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
    2168:	a7 e2       	ldi	r26, 0x27	; 39
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e7 e2       	ldi	r30, 0x27	; 39
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	8f 77       	andi	r24, 0x7F	; 127
    2174:	8c 93       	st	X, r24

	/*Activate Left adjust result(8 bit resolution)*/
	//SET_BIT(ADMUX,ADMUX_ADLAR);

	ADCSRA &= 0b11111000;			/*Clear first 3 bits in adcsra register*/
    2176:	a6 e2       	ldi	r26, 0x26	; 38
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	e6 e2       	ldi	r30, 0x26	; 38
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	88 7f       	andi	r24, 0xF8	; 248
    2182:	8c 93       	st	X, r24
	ADCSRA |= ADC_u8PRESCALER;		/*set the required configuration*/
    2184:	a6 e2       	ldi	r26, 0x26	; 38
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e6 e2       	ldi	r30, 0x26	; 38
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	87 60       	ori	r24, 0x07	; 7
    2190:	8c 93       	st	X, r24

	/*Enable ADC peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    2192:	a6 e2       	ldi	r26, 0x26	; 38
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e6 e2       	ldi	r30, 0x26	; 38
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	80 68       	ori	r24, 0x80	; 128
    219e:	8c 93       	st	X, r24
}
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <ADC_u8StartConversion>:

u16 ADC_u8StartConversion(u8 Copy_u8Channel)
{
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	0f 92       	push	r0
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    21b2:	a7 e2       	ldi	r26, 0x27	; 39
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e7 e2       	ldi	r30, 0x27	; 39
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	80 7e       	andi	r24, 0xE0	; 224
    21be:	8c 93       	st	X, r24

	/*set required channel*/
	ADMUX |= Copy_u8Channel;
    21c0:	a7 e2       	ldi	r26, 0x27	; 39
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e7 e2       	ldi	r30, 0x27	; 39
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	90 81       	ld	r25, Z
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	89 2b       	or	r24, r25
    21ce:	8c 93       	st	X, r24

	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    21d0:	a6 e2       	ldi	r26, 0x26	; 38
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e6 e2       	ldi	r30, 0x26	; 38
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	80 64       	ori	r24, 0x40	; 64
    21dc:	8c 93       	st	X, r24

	/*Busy waiting (polling) until the conversion is complete*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF))==0);
    21de:	e6 e2       	ldi	r30, 0x26	; 38
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	82 95       	swap	r24
    21e6:	8f 70       	andi	r24, 0x0F	; 15
    21e8:	88 2f       	mov	r24, r24
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	81 70       	andi	r24, 0x01	; 1
    21ee:	90 70       	andi	r25, 0x00	; 0
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	a9 f3       	breq	.-22     	; 0x21de <ADC_u8StartConversion+0x38>

	/*clear the interrupt flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    21f4:	a6 e2       	ldi	r26, 0x26	; 38
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	e6 e2       	ldi	r30, 0x26	; 38
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	80 61       	ori	r24, 0x10	; 16
    2200:	8c 93       	st	X, r24

	return ADC;
    2202:	e4 e2       	ldi	r30, 0x24	; 36
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	91 81       	ldd	r25, Z+1	; 0x01
}
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <Program_Init>:

/**********************************************************************************************************************
 *  Functions Definitions
 *********************************************************************************************************************/

void Program_Init(){
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
	SPI_InitSlave();
    221a:	0e 94 ce 0c 	call	0x199c	; 0x199c <SPI_InitSlave>
	MTIMER0_voidInit();
    221e:	0e 94 ab 0b 	call	0x1756	; 0x1756 <MTIMER0_voidInit>
	LCD_Init(LCD_1);
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <LCD_Init>
	LCD_Init(LCD_2);
    2228:	82 e0       	ldi	r24, 0x02	; 2
    222a:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <LCD_Init>
	UART_init();
    222e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <UART_init>
	CONTROL_Init();
    2232:	0e 94 18 18 	call	0x3030	; 0x3030 <CONTROL_Init>
	Display_Data_LDC2();
    2236:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Display_Data_LDC2>
	MTIMER2_voidInit();
    223a:	0e 94 46 0a 	call	0x148c	; 0x148c <MTIMER2_voidInit>
	MTIMER2_voidTimer2OVSetCallBack(Control_SendUART);
    223e:	8d ee       	ldi	r24, 0xED	; 237
    2240:	98 e1       	ldi	r25, 0x18	; 24
    2242:	0e 94 82 0a 	call	0x1504	; 0x1504 <MTIMER2_voidTimer2OVSetCallBack>

}
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <Login_CheckInputs>:

u8 Login_CheckInputs(){
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    2254:	29 97       	sbiw	r28, 0x09	; 9
    2256:	0f b6       	in	r0, 0x3f	; 63
    2258:	f8 94       	cli
    225a:	de bf       	out	0x3e, r29	; 62
    225c:	0f be       	out	0x3f, r0	; 63
    225e:	cd bf       	out	0x3d, r28	; 61
	s32 Local_ID;
	s32 Local_Pass;
	static u8 Local_Counter = 0;

	/*Display ID & Pass screen*/
	LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	61 e0       	ldi	r22, 0x01	; 1
    2264:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
	LCD_WriteStringData((u8*) "PLEASE LOGIN!",LCD_1);
    2268:	80 e6       	ldi	r24, 0x60	; 96
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	61 e0       	ldi	r22, 0x01	; 1
    226e:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
	LCD_GoToPosition(1,0,LCD_1);
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	60 e0       	ldi	r22, 0x00	; 0
    2276:	41 e0       	ldi	r20, 0x01	; 1
    2278:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
	LCD_WriteStringData((u8*) "ID: ",LCD_1);
    227c:	8e e6       	ldi	r24, 0x6E	; 110
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	61 e0       	ldi	r22, 0x01	; 1
    2282:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
	LCD_GoToPosition(2,0,LCD_1);
    2286:	82 e0       	ldi	r24, 0x02	; 2
    2288:	60 e0       	ldi	r22, 0x00	; 0
    228a:	41 e0       	ldi	r20, 0x01	; 1
    228c:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
	LCD_WriteStringData((u8*) "Pass: ",LCD_1);
    2290:	83 e7       	ldi	r24, 0x73	; 115
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	61 e0       	ldi	r22, 0x01	; 1
    2296:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

	/*Read the ID*/
	LCD_GoToPosition(1, 4,LCD_1);
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	64 e0       	ldi	r22, 0x04	; 4
    229e:	41 e0       	ldi	r20, 0x01	; 1
    22a0:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
	Local_ID = LCD_ReadInput(LCD_1);
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_ReadInput>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	8d 83       	std	Y+5, r24	; 0x05
    22b0:	9e 83       	std	Y+6, r25	; 0x06
    22b2:	af 83       	std	Y+7, r26	; 0x07
    22b4:	b8 87       	std	Y+8, r27	; 0x08

	/*Read the Password*/
	LCD_GoToPosition(2,6,LCD_1);
    22b6:	82 e0       	ldi	r24, 0x02	; 2
    22b8:	66 e0       	ldi	r22, 0x06	; 6
    22ba:	41 e0       	ldi	r20, 0x01	; 1
    22bc:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
	Local_Pass = LCD_ReadInput(LCD_1);
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_ReadInput>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	89 83       	std	Y+1, r24	; 0x01
    22cc:	9a 83       	std	Y+2, r25	; 0x02
    22ce:	ab 83       	std	Y+3, r26	; 0x03
    22d0:	bc 83       	std	Y+4, r27	; 0x04

	if(Local_ID == CORRECT_ID && Local_Pass == CorrectPass){
    22d2:	8d 81       	ldd	r24, Y+5	; 0x05
    22d4:	9e 81       	ldd	r25, Y+6	; 0x06
    22d6:	af 81       	ldd	r26, Y+7	; 0x07
    22d8:	b8 85       	ldd	r27, Y+8	; 0x08
    22da:	81 30       	cpi	r24, 0x01	; 1
    22dc:	91 05       	cpc	r25, r1
    22de:	a1 05       	cpc	r26, r1
    22e0:	b1 05       	cpc	r27, r1
    22e2:	19 f5       	brne	.+70     	; 0x232a <Login_CheckInputs+0xde>
    22e4:	20 91 88 03 	lds	r18, 0x0388
    22e8:	30 91 89 03 	lds	r19, 0x0389
    22ec:	40 91 8a 03 	lds	r20, 0x038A
    22f0:	50 91 8b 03 	lds	r21, 0x038B
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	9a 81       	ldd	r25, Y+2	; 0x02
    22f8:	ab 81       	ldd	r26, Y+3	; 0x03
    22fa:	bc 81       	ldd	r27, Y+4	; 0x04
    22fc:	82 17       	cp	r24, r18
    22fe:	93 07       	cpc	r25, r19
    2300:	a4 07       	cpc	r26, r20
    2302:	b5 07       	cpc	r27, r21
    2304:	91 f4       	brne	.+36     	; 0x232a <Login_CheckInputs+0xde>
		LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	61 e0       	ldi	r22, 0x01	; 1
    230a:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
		LCD_WriteStringData((u8*) "LOGIN SUCCESSFUL!",LCD_1);
    230e:	8a e7       	ldi	r24, 0x7A	; 122
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	61 e0       	ldi	r22, 0x01	; 1
    2314:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
		MTIMER0_voidSetBusyWait(DELAY_LCD);
    2318:	8e e5       	ldi	r24, 0x5E	; 94
    231a:	91 e0       	ldi	r25, 0x01	; 1
    231c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <MTIMER0_voidSetBusyWait>
		Local_Counter = 0;
    2320:	10 92 9a 03 	sts	0x039A, r1
		return 1;
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	89 87       	std	Y+9, r24	; 0x09
    2328:	34 c0       	rjmp	.+104    	; 0x2392 <Login_CheckInputs+0x146>
	}
	else if(Local_Counter < 2){
    232a:	80 91 9a 03 	lds	r24, 0x039A
    232e:	82 30       	cpi	r24, 0x02	; 2
    2330:	b0 f4       	brcc	.+44     	; 0x235e <Login_CheckInputs+0x112>
		Local_Counter++;
    2332:	80 91 9a 03 	lds	r24, 0x039A
    2336:	8f 5f       	subi	r24, 0xFF	; 255
    2338:	80 93 9a 03 	sts	0x039A, r24
		LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	61 e0       	ldi	r22, 0x01	; 1
    2340:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
		LCD_WriteStringData((u8*)"TRY AGAIN!",LCD_1);
    2344:	8c e8       	ldi	r24, 0x8C	; 140
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	61 e0       	ldi	r22, 0x01	; 1
    234a:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
		MTIMER0_voidSetBusyWait(DELAY_LCD+150);
    234e:	84 ef       	ldi	r24, 0xF4	; 244
    2350:	91 e0       	ldi	r25, 0x01	; 1
    2352:	0e 94 1a 0c 	call	0x1834	; 0x1834 <MTIMER0_voidSetBusyWait>
		return Login_CheckInputs();
    2356:	0e 94 26 11 	call	0x224c	; 0x224c <Login_CheckInputs>
    235a:	89 87       	std	Y+9, r24	; 0x09
    235c:	1a c0       	rjmp	.+52     	; 0x2392 <Login_CheckInputs+0x146>
	}
	else{
		LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	61 e0       	ldi	r22, 0x01	; 1
    2362:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
		LCD_WriteStringData((u8*) "LOGIN FAILED",LCD_1);
    2366:	87 e9       	ldi	r24, 0x97	; 151
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	61 e0       	ldi	r22, 0x01	; 1
    236c:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
		LCD_GoToPosition(1,0,LCD_1);
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	60 e0       	ldi	r22, 0x00	; 0
    2374:	41 e0       	ldi	r20, 0x01	; 1
    2376:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteStringData((u8*) "TRY AGAIN LATER!",LCD_1);
    237a:	84 ea       	ldi	r24, 0xA4	; 164
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	61 e0       	ldi	r22, 0x01	; 1
    2380:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
		MTIMER0_voidSetBusyWait(5000);
    2384:	88 e8       	ldi	r24, 0x88	; 136
    2386:	93 e1       	ldi	r25, 0x13	; 19
    2388:	0e 94 1a 0c 	call	0x1834	; 0x1834 <MTIMER0_voidSetBusyWait>
		Local_Counter = 0;
    238c:	10 92 9a 03 	sts	0x039A, r1
		return 0;
    2390:	19 86       	std	Y+9, r1	; 0x09
    2392:	89 85       	ldd	r24, Y+9	; 0x09
	}
}
    2394:	29 96       	adiw	r28, 0x09	; 9
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <Login_ChangePass>:

void Login_ChangePass(){
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
	LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	61 e0       	ldi	r22, 0x01	; 1
    23b2:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
	LCD_WriteStringData((u8*) "NEW PASS: ",LCD_1);
    23b6:	85 eb       	ldi	r24, 0xB5	; 181
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	61 e0       	ldi	r22, 0x01	; 1
    23bc:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

	CorrectPass = LCD_ReadInput(LCD_1);
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_ReadInput>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	80 93 88 03 	sts	0x0388, r24
    23ce:	90 93 89 03 	sts	0x0389, r25
    23d2:	a0 93 8a 03 	sts	0x038A, r26
    23d6:	b0 93 8b 03 	sts	0x038B, r27
	LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	61 e0       	ldi	r22, 0x01	; 1
    23de:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
	LCD_WriteStringData((u8*) "PASSWORD UPDATED!",LCD_1);
    23e2:	80 ec       	ldi	r24, 0xC0	; 192
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	61 e0       	ldi	r22, 0x01	; 1
    23e8:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
	MTIMER0_voidSetBusyWait(DELAY_LCD);
    23ec:	8e e5       	ldi	r24, 0x5E	; 94
    23ee:	91 e0       	ldi	r25, 0x01	; 1
    23f0:	0e 94 1a 0c 	call	0x1834	; 0x1834 <MTIMER0_voidSetBusyWait>
}
    23f4:	cf 91       	pop	r28
    23f6:	df 91       	pop	r29
    23f8:	08 95       	ret

000023fa <LCD_WriteCommand>:

/**********************************************************************************************************************
 *  Functions Definitions
 *********************************************************************************************************************/

void LCD_WriteCommand(u8 Command,u8 LCD_Number){
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	00 d0       	rcall	.+0      	; 0x2400 <LCD_WriteCommand+0x6>
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	89 83       	std	Y+1, r24	; 0x01
    2406:	6a 83       	std	Y+2, r22	; 0x02
	if(LCD_Number == 1){
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	81 30       	cpi	r24, 0x01	; 1
    240c:	e9 f4       	brne	.+58     	; 0x2448 <LCD_WriteCommand+0x4e>
		DIO_SetPinValue(CONTROL_PORT_1, RS_PIN_1, DIO_LOW); /*For RS*/
    240e:	83 e0       	ldi	r24, 0x03	; 3
    2410:	65 e0       	ldi	r22, 0x05	; 5
    2412:	40 e0       	ldi	r20, 0x00	; 0
    2414:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinValue>

		DIO_SetPinValue(CONTROL_PORT_1, RW_PIN_1, DIO_LOW);
    2418:	83 e0       	ldi	r24, 0x03	; 3
    241a:	66 e0       	ldi	r22, 0x06	; 6
    241c:	40 e0       	ldi	r20, 0x00	; 0
    241e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinValue>
		DIO_SetPinValue(CONTROL_PORT_1, ENABLE_PIN_1, DIO_HIGH);
    2422:	83 e0       	ldi	r24, 0x03	; 3
    2424:	67 e0       	ldi	r22, 0x07	; 7
    2426:	41 e0       	ldi	r20, 0x01	; 1
    2428:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinValue>
		DIO_SetPortValue(DATA_PORT_1, Command);
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	69 81       	ldd	r22, Y+1	; 0x01
    2430:	0e 94 24 10 	call	0x2048	; 0x2048 <DIO_SetPortValue>
		DIO_SetPinValue(CONTROL_PORT_1, ENABLE_PIN_1, DIO_LOW);/*Set Enable*/
    2434:	83 e0       	ldi	r24, 0x03	; 3
    2436:	67 e0       	ldi	r22, 0x07	; 7
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinValue>
		MTIMER0_voidSetBusyWait(5);
    243e:	85 e0       	ldi	r24, 0x05	; 5
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	0e 94 1a 0c 	call	0x1834	; 0x1834 <MTIMER0_voidSetBusyWait>
    2446:	1f c0       	rjmp	.+62     	; 0x2486 <LCD_WriteCommand+0x8c>
	}
	else if(LCD_Number == 2){
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	82 30       	cpi	r24, 0x02	; 2
    244c:	e1 f4       	brne	.+56     	; 0x2486 <LCD_WriteCommand+0x8c>
		DIO_SetPinValue(CONTROL_PORT_2, RS_PIN_2, DIO_LOW); /*For RS*/
    244e:	83 e0       	ldi	r24, 0x03	; 3
    2450:	62 e0       	ldi	r22, 0x02	; 2
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinValue>

		DIO_SetPinValue(CONTROL_PORT_2, RW_PIN_2, DIO_LOW);
    2458:	83 e0       	ldi	r24, 0x03	; 3
    245a:	63 e0       	ldi	r22, 0x03	; 3
    245c:	40 e0       	ldi	r20, 0x00	; 0
    245e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinValue>
		DIO_SetPinValue(CONTROL_PORT_2, ENABLE_PIN_2, DIO_HIGH);
    2462:	83 e0       	ldi	r24, 0x03	; 3
    2464:	64 e0       	ldi	r22, 0x04	; 4
    2466:	41 e0       	ldi	r20, 0x01	; 1
    2468:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinValue>
		DIO_SetPortValue(DATA_PORT_2, Command);
    246c:	82 e0       	ldi	r24, 0x02	; 2
    246e:	69 81       	ldd	r22, Y+1	; 0x01
    2470:	0e 94 24 10 	call	0x2048	; 0x2048 <DIO_SetPortValue>
		DIO_SetPinValue(CONTROL_PORT_2, ENABLE_PIN_2, DIO_LOW);/*Set Enable*/
    2474:	83 e0       	ldi	r24, 0x03	; 3
    2476:	64 e0       	ldi	r22, 0x04	; 4
    2478:	40 e0       	ldi	r20, 0x00	; 0
    247a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinValue>
		MTIMER0_voidSetBusyWait(5);
    247e:	85 e0       	ldi	r24, 0x05	; 5
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	0e 94 1a 0c 	call	0x1834	; 0x1834 <MTIMER0_voidSetBusyWait>
	}
}
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	cf 91       	pop	r28
    248c:	df 91       	pop	r29
    248e:	08 95       	ret

00002490 <LCD_WriteCharData>:

void LCD_WriteCharData(u8 Data,u8 LCD_Number){
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	00 d0       	rcall	.+0      	; 0x2496 <LCD_WriteCharData+0x6>
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	89 83       	std	Y+1, r24	; 0x01
    249c:	6a 83       	std	Y+2, r22	; 0x02
	if(LCD_Number == 1){
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
    24a0:	81 30       	cpi	r24, 0x01	; 1
    24a2:	c9 f4       	brne	.+50     	; 0x24d6 <LCD_WriteCharData+0x46>
		DIO_SetPinValue(CONTROL_PORT_1, RS_PIN_1, DIO_HIGH); /*For RS*/
    24a4:	83 e0       	ldi	r24, 0x03	; 3
    24a6:	65 e0       	ldi	r22, 0x05	; 5
    24a8:	41 e0       	ldi	r20, 0x01	; 1
    24aa:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinValue>

		/*RW is grounded*/
		DIO_SetPinValue(CONTROL_PORT_1, RW_PIN_1, DIO_LOW);
    24ae:	83 e0       	ldi	r24, 0x03	; 3
    24b0:	66 e0       	ldi	r22, 0x06	; 6
    24b2:	40 e0       	ldi	r20, 0x00	; 0
    24b4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinValue>
		DIO_SetPinValue(CONTROL_PORT_1, ENABLE_PIN_1, DIO_HIGH);
    24b8:	83 e0       	ldi	r24, 0x03	; 3
    24ba:	67 e0       	ldi	r22, 0x07	; 7
    24bc:	41 e0       	ldi	r20, 0x01	; 1
    24be:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinValue>
		DIO_SetPortValue(DATA_PORT_1, Data);
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	69 81       	ldd	r22, Y+1	; 0x01
    24c6:	0e 94 24 10 	call	0x2048	; 0x2048 <DIO_SetPortValue>
		DIO_SetPinValue(CONTROL_PORT_1, ENABLE_PIN_1, DIO_LOW);/*Set Enable*/
    24ca:	83 e0       	ldi	r24, 0x03	; 3
    24cc:	67 e0       	ldi	r22, 0x07	; 7
    24ce:	40 e0       	ldi	r20, 0x00	; 0
    24d0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinValue>
    24d4:	1b c0       	rjmp	.+54     	; 0x250c <LCD_WriteCharData+0x7c>
		//MTIMER0_voidSetBusyWait(5);
	}

	else if(LCD_Number == 2){
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	82 30       	cpi	r24, 0x02	; 2
    24da:	c1 f4       	brne	.+48     	; 0x250c <LCD_WriteCharData+0x7c>
		DIO_SetPinValue(CONTROL_PORT_2, RS_PIN_2, DIO_HIGH); /*For RS*/
    24dc:	83 e0       	ldi	r24, 0x03	; 3
    24de:	62 e0       	ldi	r22, 0x02	; 2
    24e0:	41 e0       	ldi	r20, 0x01	; 1
    24e2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinValue>

		/*RW is grounded*/
		DIO_SetPinValue(CONTROL_PORT_2, RW_PIN_2, DIO_LOW);
    24e6:	83 e0       	ldi	r24, 0x03	; 3
    24e8:	63 e0       	ldi	r22, 0x03	; 3
    24ea:	40 e0       	ldi	r20, 0x00	; 0
    24ec:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinValue>
		DIO_SetPinValue(CONTROL_PORT_2, ENABLE_PIN_2, DIO_HIGH);
    24f0:	83 e0       	ldi	r24, 0x03	; 3
    24f2:	64 e0       	ldi	r22, 0x04	; 4
    24f4:	41 e0       	ldi	r20, 0x01	; 1
    24f6:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinValue>
		DIO_SetPortValue(DATA_PORT_2, Data);
    24fa:	82 e0       	ldi	r24, 0x02	; 2
    24fc:	69 81       	ldd	r22, Y+1	; 0x01
    24fe:	0e 94 24 10 	call	0x2048	; 0x2048 <DIO_SetPortValue>
		DIO_SetPinValue(CONTROL_PORT_2, ENABLE_PIN_2, DIO_LOW);/*Set Enable*/
    2502:	83 e0       	ldi	r24, 0x03	; 3
    2504:	64 e0       	ldi	r22, 0x04	; 4
    2506:	40 e0       	ldi	r20, 0x00	; 0
    2508:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPinValue>
		//MTIMER0_voidSetBusyWait(5);
	}

}
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <LCD_WriteStringData>:

void LCD_WriteStringData(u8 *Data, u8 LCD_Number){
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	27 97       	sbiw	r28, 0x07	; 7
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
    252a:	9e 83       	std	Y+6, r25	; 0x06
    252c:	8d 83       	std	Y+5, r24	; 0x05
    252e:	6f 83       	std	Y+7, r22	; 0x07
	u32 counter=0;
    2530:	19 82       	std	Y+1, r1	; 0x01
    2532:	1a 82       	std	Y+2, r1	; 0x02
    2534:	1b 82       	std	Y+3, r1	; 0x03
    2536:	1c 82       	std	Y+4, r1	; 0x04
    2538:	16 c0       	rjmp	.+44     	; 0x2566 <LCD_WriteStringData+0x50>
	while(Data[counter] != '\0'){
		LCD_WriteCharData(Data[counter],LCD_Number);
    253a:	29 81       	ldd	r18, Y+1	; 0x01
    253c:	3a 81       	ldd	r19, Y+2	; 0x02
    253e:	8d 81       	ldd	r24, Y+5	; 0x05
    2540:	9e 81       	ldd	r25, Y+6	; 0x06
    2542:	fc 01       	movw	r30, r24
    2544:	e2 0f       	add	r30, r18
    2546:	f3 1f       	adc	r31, r19
    2548:	80 81       	ld	r24, Z
    254a:	6f 81       	ldd	r22, Y+7	; 0x07
    254c:	0e 94 48 12 	call	0x2490	; 0x2490 <LCD_WriteCharData>
		counter++;
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	9a 81       	ldd	r25, Y+2	; 0x02
    2554:	ab 81       	ldd	r26, Y+3	; 0x03
    2556:	bc 81       	ldd	r27, Y+4	; 0x04
    2558:	01 96       	adiw	r24, 0x01	; 1
    255a:	a1 1d       	adc	r26, r1
    255c:	b1 1d       	adc	r27, r1
    255e:	89 83       	std	Y+1, r24	; 0x01
    2560:	9a 83       	std	Y+2, r25	; 0x02
    2562:	ab 83       	std	Y+3, r26	; 0x03
    2564:	bc 83       	std	Y+4, r27	; 0x04

}

void LCD_WriteStringData(u8 *Data, u8 LCD_Number){
	u32 counter=0;
	while(Data[counter] != '\0'){
    2566:	29 81       	ldd	r18, Y+1	; 0x01
    2568:	3a 81       	ldd	r19, Y+2	; 0x02
    256a:	8d 81       	ldd	r24, Y+5	; 0x05
    256c:	9e 81       	ldd	r25, Y+6	; 0x06
    256e:	fc 01       	movw	r30, r24
    2570:	e2 0f       	add	r30, r18
    2572:	f3 1f       	adc	r31, r19
    2574:	80 81       	ld	r24, Z
    2576:	88 23       	and	r24, r24
    2578:	01 f7       	brne	.-64     	; 0x253a <LCD_WriteStringData+0x24>
		LCD_WriteCharData(Data[counter],LCD_Number);
		counter++;
	}
}
    257a:	27 96       	adiw	r28, 0x07	; 7
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	f8 94       	cli
    2580:	de bf       	out	0x3e, r29	; 62
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	08 95       	ret

0000258c <LCD_GoToPosition>:

void LCD_GoToPosition(u8 X_Position, u8 Y_Position,u8 LCD_Number){
    258c:	df 93       	push	r29
    258e:	cf 93       	push	r28
    2590:	00 d0       	rcall	.+0      	; 0x2592 <LCD_GoToPosition+0x6>
    2592:	00 d0       	rcall	.+0      	; 0x2594 <LCD_GoToPosition+0x8>
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	8a 83       	std	Y+2, r24	; 0x02
    259a:	6b 83       	std	Y+3, r22	; 0x03
    259c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_Address = FIRST_LINE_ADDRESS;
    259e:	80 e8       	ldi	r24, 0x80	; 128
    25a0:	89 83       	std	Y+1, r24	; 0x01

	if(X_Position == 0){
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	88 23       	and	r24, r24
    25a6:	21 f4       	brne	.+8      	; 0x25b0 <LCD_GoToPosition+0x24>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	80 58       	subi	r24, 0x80	; 128
    25ac:	89 83       	std	Y+1, r24	; 0x01
    25ae:	14 c0       	rjmp	.+40     	; 0x25d8 <LCD_GoToPosition+0x4c>
	}
	else if(X_Position == 1){
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	81 30       	cpi	r24, 0x01	; 1
    25b4:	21 f4       	brne	.+8      	; 0x25be <LCD_GoToPosition+0x32>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	80 54       	subi	r24, 0x40	; 64
    25ba:	89 83       	std	Y+1, r24	; 0x01
    25bc:	0d c0       	rjmp	.+26     	; 0x25d8 <LCD_GoToPosition+0x4c>
	}
	else if(X_Position == 2){
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	82 30       	cpi	r24, 0x02	; 2
    25c2:	21 f4       	brne	.+8      	; 0x25cc <LCD_GoToPosition+0x40>
		Local_Address = THIRD_LINE_ADDRESS + Y_Position;
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	8c 56       	subi	r24, 0x6C	; 108
    25c8:	89 83       	std	Y+1, r24	; 0x01
    25ca:	06 c0       	rjmp	.+12     	; 0x25d8 <LCD_GoToPosition+0x4c>
	}
	else if(X_Position == 3){
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	83 30       	cpi	r24, 0x03	; 3
    25d0:	19 f4       	brne	.+6      	; 0x25d8 <LCD_GoToPosition+0x4c>
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
    25d4:	8c 52       	subi	r24, 0x2C	; 44
    25d6:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	80 68       	ori	r24, 0x80	; 128
    25dc:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteCommand(Local_Address,LCD_Number);
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	6c 81       	ldd	r22, Y+4	; 0x04
    25e2:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
}
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <LCD_Init>:

void LCD_Init(u8 LCD_Number){
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <LCD_Init+0x6>
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Cursor_Control = 0;
    2600:	19 82       	std	Y+1, r1	; 0x01
	if(LCD_Number == 1){
    2602:	8a 81       	ldd	r24, Y+2	; 0x02
    2604:	81 30       	cpi	r24, 0x01	; 1
    2606:	b1 f4       	brne	.+44     	; 0x2634 <LCD_Init+0x40>
		DIO_SetPinDirection(CONTROL_PORT_1, RS_PIN_1, DIO_OUTPUT); /*RS*/
    2608:	83 e0       	ldi	r24, 0x03	; 3
    260a:	65 e0       	ldi	r22, 0x05	; 5
    260c:	41 e0       	ldi	r20, 0x01	; 1
    260e:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <DIO_SetPinDirection>
		DIO_SetPinDirection(CONTROL_PORT_1, ENABLE_PIN_1, DIO_OUTPUT);/*Enable*/
    2612:	83 e0       	ldi	r24, 0x03	; 3
    2614:	67 e0       	ldi	r22, 0x07	; 7
    2616:	41 e0       	ldi	r20, 0x01	; 1
    2618:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <DIO_SetPinDirection>
		DIO_SetPinDirection(CONTROL_PORT_1, RW_PIN_1, DIO_OUTPUT);/*RW*/
    261c:	83 e0       	ldi	r24, 0x03	; 3
    261e:	66 e0       	ldi	r22, 0x06	; 6
    2620:	41 e0       	ldi	r20, 0x01	; 1
    2622:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <DIO_SetPinDirection>
		DIO_SetPortDirection(DATA_PORT_1, 0xFF);
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	6f ef       	ldi	r22, 0xFF	; 255
    262a:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <DIO_SetPortDirection>
		Cursor_Control = CURSOR_BLINK;
    262e:	8f e0       	ldi	r24, 0x0F	; 15
    2630:	89 83       	std	Y+1, r24	; 0x01
    2632:	18 c0       	rjmp	.+48     	; 0x2664 <LCD_Init+0x70>
	}
	else if(LCD_Number == 2){
    2634:	8a 81       	ldd	r24, Y+2	; 0x02
    2636:	82 30       	cpi	r24, 0x02	; 2
    2638:	a9 f4       	brne	.+42     	; 0x2664 <LCD_Init+0x70>
		DIO_SetPinDirection(CONTROL_PORT_2, RS_PIN_2, DIO_OUTPUT); /*RS*/
    263a:	83 e0       	ldi	r24, 0x03	; 3
    263c:	62 e0       	ldi	r22, 0x02	; 2
    263e:	41 e0       	ldi	r20, 0x01	; 1
    2640:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <DIO_SetPinDirection>
		DIO_SetPinDirection(CONTROL_PORT_2, ENABLE_PIN_2, DIO_OUTPUT);/*Enable*/
    2644:	83 e0       	ldi	r24, 0x03	; 3
    2646:	64 e0       	ldi	r22, 0x04	; 4
    2648:	41 e0       	ldi	r20, 0x01	; 1
    264a:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <DIO_SetPinDirection>
		DIO_SetPinDirection(CONTROL_PORT_2, RW_PIN_2, DIO_OUTPUT);/*RW*/
    264e:	83 e0       	ldi	r24, 0x03	; 3
    2650:	63 e0       	ldi	r22, 0x03	; 3
    2652:	41 e0       	ldi	r20, 0x01	; 1
    2654:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <DIO_SetPinDirection>
		DIO_SetPortDirection(DATA_PORT_2, 0xFF);
    2658:	82 e0       	ldi	r24, 0x02	; 2
    265a:	6f ef       	ldi	r22, 0xFF	; 255
    265c:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <DIO_SetPortDirection>
		Cursor_Control = CURSOR_OFF;
    2660:	8c e0       	ldi	r24, 0x0C	; 12
    2662:	89 83       	std	Y+1, r24	; 0x01
	}

	MTIMER0_voidSetBusyWait(35);
    2664:	83 e2       	ldi	r24, 0x23	; 35
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	0e 94 1a 0c 	call	0x1834	; 0x1834 <MTIMER0_voidSetBusyWait>
	LCD_WriteCommand(FUNCTION_SET,LCD_Number);
    266c:	88 e3       	ldi	r24, 0x38	; 56
    266e:	6a 81       	ldd	r22, Y+2	; 0x02
    2670:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
	MTIMER0_voidSetBusyWait(1);
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	0e 94 1a 0c 	call	0x1834	; 0x1834 <MTIMER0_voidSetBusyWait>
	LCD_WriteCommand(Cursor_Control,LCD_Number);
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	6a 81       	ldd	r22, Y+2	; 0x02
    2680:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
	MTIMER0_voidSetBusyWait(1);
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	0e 94 1a 0c 	call	0x1834	; 0x1834 <MTIMER0_voidSetBusyWait>
	LCD_WriteCommand(DISPLAY_CLEAR,LCD_Number);
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	6a 81       	ldd	r22, Y+2	; 0x02
    2690:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
	MTIMER0_voidSetBusyWait(2);
    2694:	82 e0       	ldi	r24, 0x02	; 2
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	0e 94 1a 0c 	call	0x1834	; 0x1834 <MTIMER0_voidSetBusyWait>
	LCD_WriteCommand(0x06,LCD_Number);
    269c:	86 e0       	ldi	r24, 0x06	; 6
    269e:	6a 81       	ldd	r22, Y+2	; 0x02
    26a0:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
}
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	08 95       	ret

000026ae <IntToString>:

u8* IntToString(s32 anInteger,u8 *str){
    26ae:	0f 93       	push	r16
    26b0:	1f 93       	push	r17
    26b2:	df 93       	push	r29
    26b4:	cf 93       	push	r28
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	2e 97       	sbiw	r28, 0x0e	; 14
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	69 87       	std	Y+9, r22	; 0x09
    26c8:	7a 87       	std	Y+10, r23	; 0x0a
    26ca:	8b 87       	std	Y+11, r24	; 0x0b
    26cc:	9c 87       	std	Y+12, r25	; 0x0c
    26ce:	5e 87       	std	Y+14, r21	; 0x0e
    26d0:	4d 87       	std	Y+13, r20	; 0x0d
	u32 flag = 0;
    26d2:	1d 82       	std	Y+5, r1	; 0x05
    26d4:	1e 82       	std	Y+6, r1	; 0x06
    26d6:	1f 82       	std	Y+7, r1	; 0x07
    26d8:	18 86       	std	Y+8, r1	; 0x08
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
    26da:	83 e1       	ldi	r24, 0x13	; 19
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	a0 e0       	ldi	r26, 0x00	; 0
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	89 83       	std	Y+1, r24	; 0x01
    26e4:	9a 83       	std	Y+2, r25	; 0x02
    26e6:	ab 83       	std	Y+3, r26	; 0x03
    26e8:	bc 83       	std	Y+4, r27	; 0x04
	str[i--] = '\0';
    26ea:	29 81       	ldd	r18, Y+1	; 0x01
    26ec:	3a 81       	ldd	r19, Y+2	; 0x02
    26ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f2:	fc 01       	movw	r30, r24
    26f4:	e2 0f       	add	r30, r18
    26f6:	f3 1f       	adc	r31, r19
    26f8:	10 82       	st	Z, r1
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	9a 81       	ldd	r25, Y+2	; 0x02
    26fe:	ab 81       	ldd	r26, Y+3	; 0x03
    2700:	bc 81       	ldd	r27, Y+4	; 0x04
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	a1 09       	sbc	r26, r1
    2706:	b1 09       	sbc	r27, r1
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	9a 83       	std	Y+2, r25	; 0x02
    270c:	ab 83       	std	Y+3, r26	; 0x03
    270e:	bc 83       	std	Y+4, r27	; 0x04
	if (anInteger < 0) {
    2710:	89 85       	ldd	r24, Y+9	; 0x09
    2712:	9a 85       	ldd	r25, Y+10	; 0x0a
    2714:	ab 85       	ldd	r26, Y+11	; 0x0b
    2716:	bc 85       	ldd	r27, Y+12	; 0x0c
    2718:	bb 23       	and	r27, r27
    271a:	0c f0       	brlt	.+2      	; 0x271e <IntToString+0x70>
    271c:	4d c0       	rjmp	.+154    	; 0x27b8 <IntToString+0x10a>
		flag = 1;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	a0 e0       	ldi	r26, 0x00	; 0
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	8d 83       	std	Y+5, r24	; 0x05
    2728:	9e 83       	std	Y+6, r25	; 0x06
    272a:	af 83       	std	Y+7, r26	; 0x07
    272c:	b8 87       	std	Y+8, r27	; 0x08
		anInteger = -anInteger;
    272e:	89 85       	ldd	r24, Y+9	; 0x09
    2730:	9a 85       	ldd	r25, Y+10	; 0x0a
    2732:	ab 85       	ldd	r26, Y+11	; 0x0b
    2734:	bc 85       	ldd	r27, Y+12	; 0x0c
    2736:	b0 95       	com	r27
    2738:	a0 95       	com	r26
    273a:	90 95       	com	r25
    273c:	81 95       	neg	r24
    273e:	9f 4f       	sbci	r25, 0xFF	; 255
    2740:	af 4f       	sbci	r26, 0xFF	; 255
    2742:	bf 4f       	sbci	r27, 0xFF	; 255
    2744:	89 87       	std	Y+9, r24	; 0x09
    2746:	9a 87       	std	Y+10, r25	; 0x0a
    2748:	ab 87       	std	Y+11, r26	; 0x0b
    274a:	bc 87       	std	Y+12, r27	; 0x0c
    274c:	35 c0       	rjmp	.+106    	; 0x27b8 <IntToString+0x10a>
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
    274e:	29 81       	ldd	r18, Y+1	; 0x01
    2750:	3a 81       	ldd	r19, Y+2	; 0x02
    2752:	8d 85       	ldd	r24, Y+13	; 0x0d
    2754:	9e 85       	ldd	r25, Y+14	; 0x0e
    2756:	8c 01       	movw	r16, r24
    2758:	02 0f       	add	r16, r18
    275a:	13 1f       	adc	r17, r19
    275c:	89 85       	ldd	r24, Y+9	; 0x09
    275e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2760:	ab 85       	ldd	r26, Y+11	; 0x0b
    2762:	bc 85       	ldd	r27, Y+12	; 0x0c
    2764:	2a e0       	ldi	r18, 0x0A	; 10
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e0       	ldi	r20, 0x00	; 0
    276a:	50 e0       	ldi	r21, 0x00	; 0
    276c:	bc 01       	movw	r22, r24
    276e:	cd 01       	movw	r24, r26
    2770:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <__divmodsi4>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	80 5d       	subi	r24, 0xD0	; 208
    277a:	f8 01       	movw	r30, r16
    277c:	80 83       	st	Z, r24
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	9a 81       	ldd	r25, Y+2	; 0x02
    2782:	ab 81       	ldd	r26, Y+3	; 0x03
    2784:	bc 81       	ldd	r27, Y+4	; 0x04
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	a1 09       	sbc	r26, r1
    278a:	b1 09       	sbc	r27, r1
    278c:	89 83       	std	Y+1, r24	; 0x01
    278e:	9a 83       	std	Y+2, r25	; 0x02
    2790:	ab 83       	std	Y+3, r26	; 0x03
    2792:	bc 83       	std	Y+4, r27	; 0x04
		anInteger /= 10;
    2794:	89 85       	ldd	r24, Y+9	; 0x09
    2796:	9a 85       	ldd	r25, Y+10	; 0x0a
    2798:	ab 85       	ldd	r26, Y+11	; 0x0b
    279a:	bc 85       	ldd	r27, Y+12	; 0x0c
    279c:	2a e0       	ldi	r18, 0x0A	; 10
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e0       	ldi	r20, 0x00	; 0
    27a2:	50 e0       	ldi	r21, 0x00	; 0
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <__divmodsi4>
    27ac:	da 01       	movw	r26, r20
    27ae:	c9 01       	movw	r24, r18
    27b0:	89 87       	std	Y+9, r24	; 0x09
    27b2:	9a 87       	std	Y+10, r25	; 0x0a
    27b4:	ab 87       	std	Y+11, r26	; 0x0b
    27b6:	bc 87       	std	Y+12, r27	; 0x0c
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
    27b8:	89 85       	ldd	r24, Y+9	; 0x09
    27ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    27bc:	ab 85       	ldd	r26, Y+11	; 0x0b
    27be:	bc 85       	ldd	r27, Y+12	; 0x0c
    27c0:	00 97       	sbiw	r24, 0x00	; 0
    27c2:	a1 05       	cpc	r26, r1
    27c4:	b1 05       	cpc	r27, r1
    27c6:	19 f6       	brne	.-122    	; 0x274e <IntToString+0xa0>
		str[i--] = (anInteger % 10) + '0';
		anInteger /= 10;
	}
	if (flag){
    27c8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ca:	9e 81       	ldd	r25, Y+6	; 0x06
    27cc:	af 81       	ldd	r26, Y+7	; 0x07
    27ce:	b8 85       	ldd	r27, Y+8	; 0x08
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	a1 05       	cpc	r26, r1
    27d4:	b1 05       	cpc	r27, r1
    27d6:	a1 f0       	breq	.+40     	; 0x2800 <IntToString+0x152>
		str[i--] = '-';
    27d8:	29 81       	ldd	r18, Y+1	; 0x01
    27da:	3a 81       	ldd	r19, Y+2	; 0x02
    27dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27de:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e0:	fc 01       	movw	r30, r24
    27e2:	e2 0f       	add	r30, r18
    27e4:	f3 1f       	adc	r31, r19
    27e6:	8d e2       	ldi	r24, 0x2D	; 45
    27e8:	80 83       	st	Z, r24
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	9a 81       	ldd	r25, Y+2	; 0x02
    27ee:	ab 81       	ldd	r26, Y+3	; 0x03
    27f0:	bc 81       	ldd	r27, Y+4	; 0x04
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	a1 09       	sbc	r26, r1
    27f6:	b1 09       	sbc	r27, r1
    27f8:	89 83       	std	Y+1, r24	; 0x01
    27fa:	9a 83       	std	Y+2, r25	; 0x02
    27fc:	ab 83       	std	Y+3, r26	; 0x03
    27fe:	bc 83       	std	Y+4, r27	; 0x04
	}
	i++;
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	9a 81       	ldd	r25, Y+2	; 0x02
    2804:	ab 81       	ldd	r26, Y+3	; 0x03
    2806:	bc 81       	ldd	r27, Y+4	; 0x04
    2808:	01 96       	adiw	r24, 0x01	; 1
    280a:	a1 1d       	adc	r26, r1
    280c:	b1 1d       	adc	r27, r1
    280e:	89 83       	std	Y+1, r24	; 0x01
    2810:	9a 83       	std	Y+2, r25	; 0x02
    2812:	ab 83       	std	Y+3, r26	; 0x03
    2814:	bc 83       	std	Y+4, r27	; 0x04
	return str + i;
    2816:	29 81       	ldd	r18, Y+1	; 0x01
    2818:	3a 81       	ldd	r19, Y+2	; 0x02
    281a:	8d 85       	ldd	r24, Y+13	; 0x0d
    281c:	9e 85       	ldd	r25, Y+14	; 0x0e
    281e:	82 0f       	add	r24, r18
    2820:	93 1f       	adc	r25, r19

}
    2822:	2e 96       	adiw	r28, 0x0e	; 14
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	cf 91       	pop	r28
    2830:	df 91       	pop	r29
    2832:	1f 91       	pop	r17
    2834:	0f 91       	pop	r16
    2836:	08 95       	ret

00002838 <LCD_WriteIntData>:

void LCD_WriteIntData(s32 Data,u8 LCD_Number){
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
    2840:	6b 97       	sbiw	r28, 0x1b	; 27
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	de bf       	out	0x3e, r29	; 62
    2848:	0f be       	out	0x3f, r0	; 63
    284a:	cd bf       	out	0x3d, r28	; 61
    284c:	6f 8b       	std	Y+23, r22	; 0x17
    284e:	78 8f       	std	Y+24, r23	; 0x18
    2850:	89 8f       	std	Y+25, r24	; 0x19
    2852:	9a 8f       	std	Y+26, r25	; 0x1a
    2854:	4b 8f       	std	Y+27, r20	; 0x1b
	if(Data){
    2856:	8f 89       	ldd	r24, Y+23	; 0x17
    2858:	98 8d       	ldd	r25, Y+24	; 0x18
    285a:	a9 8d       	ldd	r26, Y+25	; 0x19
    285c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	a1 05       	cpc	r26, r1
    2862:	b1 05       	cpc	r27, r1
    2864:	a1 f0       	breq	.+40     	; 0x288e <LCD_WriteIntData+0x56>
		u8 arr[INT_TO_STRING_ARR_SIZE];
		//sprintf(str,"%d",Data);
		u8 *str = IntToString(Data,arr);
    2866:	8f 89       	ldd	r24, Y+23	; 0x17
    2868:	98 8d       	ldd	r25, Y+24	; 0x18
    286a:	a9 8d       	ldd	r26, Y+25	; 0x19
    286c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    286e:	9e 01       	movw	r18, r28
    2870:	2d 5f       	subi	r18, 0xFD	; 253
    2872:	3f 4f       	sbci	r19, 0xFF	; 255
    2874:	bc 01       	movw	r22, r24
    2876:	cd 01       	movw	r24, r26
    2878:	a9 01       	movw	r20, r18
    287a:	0e 94 57 13 	call	0x26ae	; 0x26ae <IntToString>
    287e:	9a 83       	std	Y+2, r25	; 0x02
    2880:	89 83       	std	Y+1, r24	; 0x01
		LCD_WriteStringData(str,LCD_Number);
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	9a 81       	ldd	r25, Y+2	; 0x02
    2886:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2888:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
    288c:	04 c0       	rjmp	.+8      	; 0x2896 <LCD_WriteIntData+0x5e>
	}
	else{
		LCD_WriteCharData('0',LCD_Number);
    288e:	80 e3       	ldi	r24, 0x30	; 48
    2890:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2892:	0e 94 48 12 	call	0x2490	; 0x2490 <LCD_WriteCharData>
	}

	//MTIMER0_voidSetBusyWait(5);
}
    2896:	6b 96       	adiw	r28, 0x1b	; 27
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	de bf       	out	0x3e, r29	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	cd bf       	out	0x3d, r28	; 61
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <LCD_ReadInput>:
	}
	LCD_WriteCommand(RETURN_HOME);
}
 */

s32 LCD_ReadInput(u8 LCD_Number){
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
    28b0:	27 97       	sbiw	r28, 0x07	; 7
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	de bf       	out	0x3e, r29	; 62
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	cd bf       	out	0x3d, r28	; 61
    28bc:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8PressedKey = 0xFF;
    28be:	8f ef       	ldi	r24, 0xFF	; 255
    28c0:	8e 83       	std	Y+6, r24	; 0x06
	s32 Local_input;
	u8 counter = 0;
    28c2:	19 82       	std	Y+1, r1	; 0x01
	while(1){
		Local_u8PressedKey = SPI_Recieve();/*receive KP input*/
    28c4:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <SPI_Recieve>
    28c8:	8e 83       	std	Y+6, r24	; 0x06
			if(Local_u8PressedKey == 'k' && counter != 0){
    28ca:	8e 81       	ldd	r24, Y+6	; 0x06
    28cc:	8b 36       	cpi	r24, 0x6B	; 107
    28ce:	21 f4       	brne	.+8      	; 0x28d8 <LCD_ReadInput+0x30>
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	88 23       	and	r24, r24
    28d4:	09 f0       	breq	.+2      	; 0x28d8 <LCD_ReadInput+0x30>
    28d6:	70 c0       	rjmp	.+224    	; 0x29b8 <LCD_ReadInput+0x110>
				break;

			}
			else if(Local_u8PressedKey != 'k' && Local_u8PressedKey != 'd'){
    28d8:	8e 81       	ldd	r24, Y+6	; 0x06
    28da:	8b 36       	cpi	r24, 0x6B	; 107
    28dc:	09 f4       	brne	.+2      	; 0x28e0 <LCD_ReadInput+0x38>
    28de:	42 c0       	rjmp	.+132    	; 0x2964 <LCD_ReadInput+0xbc>
    28e0:	8e 81       	ldd	r24, Y+6	; 0x06
    28e2:	84 36       	cpi	r24, 0x64	; 100
    28e4:	09 f4       	brne	.+2      	; 0x28e8 <LCD_ReadInput+0x40>
    28e6:	3e c0       	rjmp	.+124    	; 0x2964 <LCD_ReadInput+0xbc>
				if(counter != 0){
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	88 23       	and	r24, r24
    28ec:	21 f1       	breq	.+72     	; 0x2936 <LCD_ReadInput+0x8e>
					Local_input *= 10;
    28ee:	8a 81       	ldd	r24, Y+2	; 0x02
    28f0:	9b 81       	ldd	r25, Y+3	; 0x03
    28f2:	ac 81       	ldd	r26, Y+4	; 0x04
    28f4:	bd 81       	ldd	r27, Y+5	; 0x05
    28f6:	2a e0       	ldi	r18, 0x0A	; 10
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e0       	ldi	r20, 0x00	; 0
    28fc:	50 e0       	ldi	r21, 0x00	; 0
    28fe:	bc 01       	movw	r22, r24
    2900:	cd 01       	movw	r24, r26
    2902:	0e 94 b9 19 	call	0x3372	; 0x3372 <__mulsi3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	8a 83       	std	Y+2, r24	; 0x02
    290c:	9b 83       	std	Y+3, r25	; 0x03
    290e:	ac 83       	std	Y+4, r26	; 0x04
    2910:	bd 83       	std	Y+5, r27	; 0x05
					Local_input += Local_u8PressedKey;
    2912:	8e 81       	ldd	r24, Y+6	; 0x06
    2914:	28 2f       	mov	r18, r24
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e0       	ldi	r20, 0x00	; 0
    291a:	50 e0       	ldi	r21, 0x00	; 0
    291c:	8a 81       	ldd	r24, Y+2	; 0x02
    291e:	9b 81       	ldd	r25, Y+3	; 0x03
    2920:	ac 81       	ldd	r26, Y+4	; 0x04
    2922:	bd 81       	ldd	r27, Y+5	; 0x05
    2924:	82 0f       	add	r24, r18
    2926:	93 1f       	adc	r25, r19
    2928:	a4 1f       	adc	r26, r20
    292a:	b5 1f       	adc	r27, r21
    292c:	8a 83       	std	Y+2, r24	; 0x02
    292e:	9b 83       	std	Y+3, r25	; 0x03
    2930:	ac 83       	std	Y+4, r26	; 0x04
    2932:	bd 83       	std	Y+5, r27	; 0x05
    2934:	09 c0       	rjmp	.+18     	; 0x2948 <LCD_ReadInput+0xa0>
				}
				else{
					Local_input = Local_u8PressedKey;
    2936:	8e 81       	ldd	r24, Y+6	; 0x06
    2938:	88 2f       	mov	r24, r24
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	a0 e0       	ldi	r26, 0x00	; 0
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	8a 83       	std	Y+2, r24	; 0x02
    2942:	9b 83       	std	Y+3, r25	; 0x03
    2944:	ac 83       	std	Y+4, r26	; 0x04
    2946:	bd 83       	std	Y+5, r27	; 0x05
				}
				counter++;
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	8f 5f       	subi	r24, 0xFF	; 255
    294c:	89 83       	std	Y+1, r24	; 0x01
				LCD_WriteIntData(Local_u8PressedKey,LCD_Number);
    294e:	8e 81       	ldd	r24, Y+6	; 0x06
    2950:	88 2f       	mov	r24, r24
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	a0 e0       	ldi	r26, 0x00	; 0
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	bc 01       	movw	r22, r24
    295a:	cd 01       	movw	r24, r26
    295c:	4f 81       	ldd	r20, Y+7	; 0x07
    295e:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_WriteIntData>
    2962:	b0 cf       	rjmp	.-160    	; 0x28c4 <LCD_ReadInput+0x1c>


			}
			else if(counter != 0 && Local_u8PressedKey == 'd'){
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	88 23       	and	r24, r24
    2968:	09 f4       	brne	.+2      	; 0x296c <LCD_ReadInput+0xc4>
    296a:	ac cf       	rjmp	.-168    	; 0x28c4 <LCD_ReadInput+0x1c>
    296c:	8e 81       	ldd	r24, Y+6	; 0x06
    296e:	84 36       	cpi	r24, 0x64	; 100
    2970:	09 f0       	breq	.+2      	; 0x2974 <LCD_ReadInput+0xcc>
    2972:	a8 cf       	rjmp	.-176    	; 0x28c4 <LCD_ReadInput+0x1c>
				LCD_WriteCommand(0x10,LCD_Number);
    2974:	80 e1       	ldi	r24, 0x10	; 16
    2976:	6f 81       	ldd	r22, Y+7	; 0x07
    2978:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
				LCD_WriteCharData(' ',LCD_Number);
    297c:	80 e2       	ldi	r24, 0x20	; 32
    297e:	6f 81       	ldd	r22, Y+7	; 0x07
    2980:	0e 94 48 12 	call	0x2490	; 0x2490 <LCD_WriteCharData>
				LCD_WriteCommand(0x10,LCD_Number);
    2984:	80 e1       	ldi	r24, 0x10	; 16
    2986:	6f 81       	ldd	r22, Y+7	; 0x07
    2988:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
				Local_input /= 10;
    298c:	8a 81       	ldd	r24, Y+2	; 0x02
    298e:	9b 81       	ldd	r25, Y+3	; 0x03
    2990:	ac 81       	ldd	r26, Y+4	; 0x04
    2992:	bd 81       	ldd	r27, Y+5	; 0x05
    2994:	2a e0       	ldi	r18, 0x0A	; 10
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	40 e0       	ldi	r20, 0x00	; 0
    299a:	50 e0       	ldi	r21, 0x00	; 0
    299c:	bc 01       	movw	r22, r24
    299e:	cd 01       	movw	r24, r26
    29a0:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <__divmodsi4>
    29a4:	da 01       	movw	r26, r20
    29a6:	c9 01       	movw	r24, r18
    29a8:	8a 83       	std	Y+2, r24	; 0x02
    29aa:	9b 83       	std	Y+3, r25	; 0x03
    29ac:	ac 83       	std	Y+4, r26	; 0x04
    29ae:	bd 83       	std	Y+5, r27	; 0x05
				counter--;
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	81 50       	subi	r24, 0x01	; 1
    29b4:	89 83       	std	Y+1, r24	; 0x01
    29b6:	86 cf       	rjmp	.-244    	; 0x28c4 <LCD_ReadInput+0x1c>

			}

		}
	return Local_input;
    29b8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ba:	9b 81       	ldd	r25, Y+3	; 0x03
    29bc:	ac 81       	ldd	r26, Y+4	; 0x04
    29be:	bd 81       	ldd	r27, Y+5	; 0x05
}
    29c0:	bc 01       	movw	r22, r24
    29c2:	cd 01       	movw	r24, r26
    29c4:	27 96       	adiw	r28, 0x07	; 7
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	de bf       	out	0x3e, r29	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	cf 91       	pop	r28
    29d2:	df 91       	pop	r29
    29d4:	08 95       	ret

000029d6 <Display_Data_LDC2>:
/**********************************************************************************************************************
 *  Functions Definitions
 *********************************************************************************************************************/

void Display_Data_LDC2(void)
{
    29d6:	df 93       	push	r29
    29d8:	cf 93       	push	r28
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62

	LCD_WriteCommand(DISPLAY_CLEAR,LCD_2);
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	62 e0       	ldi	r22, 0x02	; 2
    29e2:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
	LCD_WriteStringData((u8*)"TEMP",LCD_2);
    29e6:	82 ed       	ldi	r24, 0xD2	; 210
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	62 e0       	ldi	r22, 0x02	; 2
    29ec:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

	LCD_GoToPosition(0,10,LCD_2);
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	6a e0       	ldi	r22, 0x0A	; 10
    29f4:	42 e0       	ldi	r20, 0x02	; 2
    29f6:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
	LCD_WriteStringData((u8*)"LDR   OFF",LCD_2);
    29fa:	87 ed       	ldi	r24, 0xD7	; 215
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	62 e0       	ldi	r22, 0x02	; 2
    2a00:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

	LCD_GoToPosition(1,0,LCD_2);
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	60 e0       	ldi	r22, 0x00	; 0
    2a08:	42 e0       	ldi	r20, 0x02	; 2
    2a0a:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
	LCD_WriteStringData((u8*)"DOOR  OFF",LCD_2);
    2a0e:	81 ee       	ldi	r24, 0xE1	; 225
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	62 e0       	ldi	r22, 0x02	; 2
    2a14:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

	LCD_GoToPosition(1,10,LCD_2);
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	6a e0       	ldi	r22, 0x0A	; 10
    2a1c:	42 e0       	ldi	r20, 0x02	; 2
    2a1e:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
	LCD_WriteStringData((u8*)"MUSIC OFF",LCD_2);
    2a22:	8b ee       	ldi	r24, 0xEB	; 235
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	62 e0       	ldi	r22, 0x02	; 2
    2a28:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

	LCD_GoToPosition(2,0,LCD_2);
    2a2c:	82 e0       	ldi	r24, 0x02	; 2
    2a2e:	60 e0       	ldi	r22, 0x00	; 0
    2a30:	42 e0       	ldi	r20, 0x02	; 2
    2a32:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
	LCD_WriteStringData((u8*)"SMOKE OFF",LCD_2);
    2a36:	85 ef       	ldi	r24, 0xF5	; 245
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	62 e0       	ldi	r22, 0x02	; 2
    2a3c:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

}
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	08 95       	ret

00002a46 <DISP_OPT_Init>:




void DISP_OPT_Init(){
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <DISP_OPT_Init+0x6>
    2a4c:	00 d0       	rcall	.+0      	; 0x2a4e <DISP_OPT_Init+0x8>
    2a4e:	0f 92       	push	r0
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
	u8 exit = 0;
    2a54:	19 82       	std	Y+1, r1	; 0x01
    2a56:	b9 c0       	rjmp	.+370    	; 0x2bca <DISP_OPT_Init+0x184>
	while(!exit){
		LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	61 e0       	ldi	r22, 0x01	; 1
    2a5c:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
		LCD_WriteIntData(AC,LCD_1);
    2a60:	61 e0       	ldi	r22, 0x01	; 1
    2a62:	70 e0       	ldi	r23, 0x00	; 0
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	41 e0       	ldi	r20, 0x01	; 1
    2a6a:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_WriteIntData>
		LCD_WriteStringData((u8*)"-AC",LCD_1);
    2a6e:	8f ef       	ldi	r24, 0xFF	; 255
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	61 e0       	ldi	r22, 0x01	; 1
    2a74:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		LCD_GoToPosition(0,9,LCD_1);
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	69 e0       	ldi	r22, 0x09	; 9
    2a7c:	41 e0       	ldi	r20, 0x01	; 1
    2a7e:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteIntData(LDR,LCD_1);
    2a82:	62 e0       	ldi	r22, 0x02	; 2
    2a84:	70 e0       	ldi	r23, 0x00	; 0
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	41 e0       	ldi	r20, 0x01	; 1
    2a8c:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_WriteIntData>
		LCD_WriteStringData((u8*)"-LDR",LCD_1);
    2a90:	83 e0       	ldi	r24, 0x03	; 3
    2a92:	91 e0       	ldi	r25, 0x01	; 1
    2a94:	61 e0       	ldi	r22, 0x01	; 1
    2a96:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		LCD_GoToPosition(1,0,LCD_1);
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	60 e0       	ldi	r22, 0x00	; 0
    2a9e:	41 e0       	ldi	r20, 0x01	; 1
    2aa0:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteIntData(DOOR,LCD_1);
    2aa4:	63 e0       	ldi	r22, 0x03	; 3
    2aa6:	70 e0       	ldi	r23, 0x00	; 0
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	41 e0       	ldi	r20, 0x01	; 1
    2aae:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_WriteIntData>
		LCD_WriteStringData((u8*)"-DOOR",LCD_1);
    2ab2:	88 e0       	ldi	r24, 0x08	; 8
    2ab4:	91 e0       	ldi	r25, 0x01	; 1
    2ab6:	61 e0       	ldi	r22, 0x01	; 1
    2ab8:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		LCD_GoToPosition(1,9,LCD_1);
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	69 e0       	ldi	r22, 0x09	; 9
    2ac0:	41 e0       	ldi	r20, 0x01	; 1
    2ac2:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteIntData(MUSIC,LCD_1);
    2ac6:	64 e0       	ldi	r22, 0x04	; 4
    2ac8:	70 e0       	ldi	r23, 0x00	; 0
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	41 e0       	ldi	r20, 0x01	; 1
    2ad0:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_WriteIntData>
		LCD_WriteStringData((u8*)"-MUSIC",LCD_1);
    2ad4:	8e e0       	ldi	r24, 0x0E	; 14
    2ad6:	91 e0       	ldi	r25, 0x01	; 1
    2ad8:	61 e0       	ldi	r22, 0x01	; 1
    2ada:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		LCD_GoToPosition(2,0,LCD_1);
    2ade:	82 e0       	ldi	r24, 0x02	; 2
    2ae0:	60 e0       	ldi	r22, 0x00	; 0
    2ae2:	41 e0       	ldi	r20, 0x01	; 1
    2ae4:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteIntData(RETURN,LCD_1);
    2ae8:	65 e0       	ldi	r22, 0x05	; 5
    2aea:	70 e0       	ldi	r23, 0x00	; 0
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	41 e0       	ldi	r20, 0x01	; 1
    2af2:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_WriteIntData>
		LCD_WriteStringData((u8*)"-RETURN",LCD_1);
    2af6:	85 e1       	ldi	r24, 0x15	; 21
    2af8:	91 e0       	ldi	r25, 0x01	; 1
    2afa:	61 e0       	ldi	r22, 0x01	; 1
    2afc:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		LCD_GoToPosition(3,0,LCD_1);
    2b00:	83 e0       	ldi	r24, 0x03	; 3
    2b02:	60 e0       	ldi	r22, 0x00	; 0
    2b04:	41 e0       	ldi	r20, 0x01	; 1
    2b06:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteStringData((u8*)"YOUR CHOICE: ",LCD_1);
    2b0a:	8d e1       	ldi	r24, 0x1D	; 29
    2b0c:	91 e0       	ldi	r25, 0x01	; 1
    2b0e:	61 e0       	ldi	r22, 0x01	; 1
    2b10:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		switch(LCD_ReadInput(LCD_1)){
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_ReadInput>
    2b1a:	6a 83       	std	Y+2, r22	; 0x02
    2b1c:	7b 83       	std	Y+3, r23	; 0x03
    2b1e:	8c 83       	std	Y+4, r24	; 0x04
    2b20:	9d 83       	std	Y+5, r25	; 0x05
    2b22:	8a 81       	ldd	r24, Y+2	; 0x02
    2b24:	9b 81       	ldd	r25, Y+3	; 0x03
    2b26:	ac 81       	ldd	r26, Y+4	; 0x04
    2b28:	bd 81       	ldd	r27, Y+5	; 0x05
    2b2a:	83 30       	cpi	r24, 0x03	; 3
    2b2c:	91 05       	cpc	r25, r1
    2b2e:	a1 05       	cpc	r26, r1
    2b30:	b1 05       	cpc	r27, r1
    2b32:	a9 f1       	breq	.+106    	; 0x2b9e <DISP_OPT_Init+0x158>
    2b34:	8a 81       	ldd	r24, Y+2	; 0x02
    2b36:	9b 81       	ldd	r25, Y+3	; 0x03
    2b38:	ac 81       	ldd	r26, Y+4	; 0x04
    2b3a:	bd 81       	ldd	r27, Y+5	; 0x05
    2b3c:	84 30       	cpi	r24, 0x04	; 4
    2b3e:	91 05       	cpc	r25, r1
    2b40:	a1 05       	cpc	r26, r1
    2b42:	b1 05       	cpc	r27, r1
    2b44:	9c f4       	brge	.+38     	; 0x2b6c <DISP_OPT_Init+0x126>
    2b46:	8a 81       	ldd	r24, Y+2	; 0x02
    2b48:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4a:	ac 81       	ldd	r26, Y+4	; 0x04
    2b4c:	bd 81       	ldd	r27, Y+5	; 0x05
    2b4e:	81 30       	cpi	r24, 0x01	; 1
    2b50:	91 05       	cpc	r25, r1
    2b52:	a1 05       	cpc	r26, r1
    2b54:	b1 05       	cpc	r27, r1
    2b56:	e9 f0       	breq	.+58     	; 0x2b92 <DISP_OPT_Init+0x14c>
    2b58:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b5c:	ac 81       	ldd	r26, Y+4	; 0x04
    2b5e:	bd 81       	ldd	r27, Y+5	; 0x05
    2b60:	82 30       	cpi	r24, 0x02	; 2
    2b62:	91 05       	cpc	r25, r1
    2b64:	a1 05       	cpc	r26, r1
    2b66:	b1 05       	cpc	r27, r1
    2b68:	b9 f0       	breq	.+46     	; 0x2b98 <DISP_OPT_Init+0x152>
    2b6a:	22 c0       	rjmp	.+68     	; 0x2bb0 <DISP_OPT_Init+0x16a>
    2b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b70:	ac 81       	ldd	r26, Y+4	; 0x04
    2b72:	bd 81       	ldd	r27, Y+5	; 0x05
    2b74:	84 30       	cpi	r24, 0x04	; 4
    2b76:	91 05       	cpc	r25, r1
    2b78:	a1 05       	cpc	r26, r1
    2b7a:	b1 05       	cpc	r27, r1
    2b7c:	99 f0       	breq	.+38     	; 0x2ba4 <DISP_OPT_Init+0x15e>
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	9b 81       	ldd	r25, Y+3	; 0x03
    2b82:	ac 81       	ldd	r26, Y+4	; 0x04
    2b84:	bd 81       	ldd	r27, Y+5	; 0x05
    2b86:	85 30       	cpi	r24, 0x05	; 5
    2b88:	91 05       	cpc	r25, r1
    2b8a:	a1 05       	cpc	r26, r1
    2b8c:	b1 05       	cpc	r27, r1
    2b8e:	69 f0       	breq	.+26     	; 0x2baa <DISP_OPT_Init+0x164>
    2b90:	0f c0       	rjmp	.+30     	; 0x2bb0 <DISP_OPT_Init+0x16a>
		case AC:
			DISP_OPT_AC();
    2b92:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <DISP_OPT_AC>
    2b96:	19 c0       	rjmp	.+50     	; 0x2bca <DISP_OPT_Init+0x184>
			break;
		case LDR:
			DISP_OPT_LDR();
    2b98:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DISP_OPT_LDR>
    2b9c:	16 c0       	rjmp	.+44     	; 0x2bca <DISP_OPT_Init+0x184>
			break;
		case DOOR:
			DISP_OPT_DOOR();
    2b9e:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <DISP_OPT_DOOR>
    2ba2:	13 c0       	rjmp	.+38     	; 0x2bca <DISP_OPT_Init+0x184>
			break;
		case MUSIC:
			DISP_OPT_MUSIC();
    2ba4:	0e 94 33 17 	call	0x2e66	; 0x2e66 <DISP_OPT_MUSIC>
    2ba8:	10 c0       	rjmp	.+32     	; 0x2bca <DISP_OPT_Init+0x184>
			break;
		case RETURN:
			exit = 1;
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	89 83       	std	Y+1, r24	; 0x01
    2bae:	0d c0       	rjmp	.+26     	; 0x2bca <DISP_OPT_Init+0x184>
			break;
		default:
			LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	61 e0       	ldi	r22, 0x01	; 1
    2bb4:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
			LCD_WriteStringData((u8*) "INVALID CHOICE!",LCD_1);
    2bb8:	8b e2       	ldi	r24, 0x2B	; 43
    2bba:	91 e0       	ldi	r25, 0x01	; 1
    2bbc:	61 e0       	ldi	r22, 0x01	; 1
    2bbe:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
			MTIMER0_voidSetBusyWait(DELAY_LCD);
    2bc2:	8e e5       	ldi	r24, 0x5E	; 94
    2bc4:	91 e0       	ldi	r25, 0x01	; 1
    2bc6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <MTIMER0_voidSetBusyWait>



void DISP_OPT_Init(){
	u8 exit = 0;
	while(!exit){
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
    2bcc:	88 23       	and	r24, r24
    2bce:	09 f4       	brne	.+2      	; 0x2bd2 <DISP_OPT_Init+0x18c>
    2bd0:	43 cf       	rjmp	.-378    	; 0x2a58 <DISP_OPT_Init+0x12>
			LCD_WriteStringData((u8*) "INVALID CHOICE!",LCD_1);
			MTIMER0_voidSetBusyWait(DELAY_LCD);
			break;
		}
	}
}
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
    2bda:	0f 90       	pop	r0
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	08 95       	ret

00002be2 <DISP_OPT_AC>:

void DISP_OPT_AC(){
    2be2:	df 93       	push	r29
    2be4:	cf 93       	push	r28
    2be6:	00 d0       	rcall	.+0      	; 0x2be8 <DISP_OPT_AC+0x6>
    2be8:	00 d0       	rcall	.+0      	; 0x2bea <DISP_OPT_AC+0x8>
    2bea:	0f 92       	push	r0
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
	u8 flag = 0;
    2bf0:	19 82       	std	Y+1, r1	; 0x01
	do{
		flag= 0;
    2bf2:	19 82       	std	Y+1, r1	; 0x01
		LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	61 e0       	ldi	r22, 0x01	; 1
    2bf8:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
		LCD_WriteStringData((u8*) "CHANGE AC THRESHOLD?",LCD_1);
    2bfc:	8b e3       	ldi	r24, 0x3B	; 59
    2bfe:	91 e0       	ldi	r25, 0x01	; 1
    2c00:	61 e0       	ldi	r22, 0x01	; 1
    2c02:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		LCD_GoToPosition(1,0,LCD_1);
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	60 e0       	ldi	r22, 0x00	; 0
    2c0a:	41 e0       	ldi	r20, 0x01	; 1
    2c0c:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteStringData((u8*) "1-YES",LCD_1);
    2c10:	80 e5       	ldi	r24, 0x50	; 80
    2c12:	91 e0       	ldi	r25, 0x01	; 1
    2c14:	61 e0       	ldi	r22, 0x01	; 1
    2c16:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		LCD_GoToPosition(1,9,LCD_1);
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	69 e0       	ldi	r22, 0x09	; 9
    2c1e:	41 e0       	ldi	r20, 0x01	; 1
    2c20:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteStringData((u8*) "2-NO",LCD_1);
    2c24:	86 e5       	ldi	r24, 0x56	; 86
    2c26:	91 e0       	ldi	r25, 0x01	; 1
    2c28:	61 e0       	ldi	r22, 0x01	; 1
    2c2a:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		LCD_GoToPosition(2,0,LCD_1);
    2c2e:	82 e0       	ldi	r24, 0x02	; 2
    2c30:	60 e0       	ldi	r22, 0x00	; 0
    2c32:	41 e0       	ldi	r20, 0x01	; 1
    2c34:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteStringData((u8*) "YOUR CHOICE: ",LCD_1);
    2c38:	8d e1       	ldi	r24, 0x1D	; 29
    2c3a:	91 e0       	ldi	r25, 0x01	; 1
    2c3c:	61 e0       	ldi	r22, 0x01	; 1
    2c3e:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
		switch(LCD_ReadInput(LCD_1)){
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_ReadInput>
    2c48:	6a 83       	std	Y+2, r22	; 0x02
    2c4a:	7b 83       	std	Y+3, r23	; 0x03
    2c4c:	8c 83       	std	Y+4, r24	; 0x04
    2c4e:	9d 83       	std	Y+5, r25	; 0x05
    2c50:	8a 81       	ldd	r24, Y+2	; 0x02
    2c52:	9b 81       	ldd	r25, Y+3	; 0x03
    2c54:	ac 81       	ldd	r26, Y+4	; 0x04
    2c56:	bd 81       	ldd	r27, Y+5	; 0x05
    2c58:	81 30       	cpi	r24, 0x01	; 1
    2c5a:	91 05       	cpc	r25, r1
    2c5c:	a1 05       	cpc	r26, r1
    2c5e:	b1 05       	cpc	r27, r1
    2c60:	51 f0       	breq	.+20     	; 0x2c76 <DISP_OPT_AC+0x94>
    2c62:	8a 81       	ldd	r24, Y+2	; 0x02
    2c64:	9b 81       	ldd	r25, Y+3	; 0x03
    2c66:	ac 81       	ldd	r26, Y+4	; 0x04
    2c68:	bd 81       	ldd	r27, Y+5	; 0x05
    2c6a:	82 30       	cpi	r24, 0x02	; 2
    2c6c:	91 05       	cpc	r25, r1
    2c6e:	a1 05       	cpc	r26, r1
    2c70:	b1 05       	cpc	r27, r1
    2c72:	99 f0       	breq	.+38     	; 0x2c9a <DISP_OPT_AC+0xb8>
    2c74:	03 c0       	rjmp	.+6      	; 0x2c7c <DISP_OPT_AC+0x9a>
		case YES:
			Change_TempThreshold();
    2c76:	0e 94 b7 18 	call	0x316e	; 0x316e <Change_TempThreshold>
    2c7a:	0f c0       	rjmp	.+30     	; 0x2c9a <DISP_OPT_AC+0xb8>
			break;
		case NO:
			break;
		default:
			flag = 1;
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	89 83       	std	Y+1, r24	; 0x01
			LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	61 e0       	ldi	r22, 0x01	; 1
    2c84:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
			LCD_WriteStringData((u8*) "INVALID CHOICE!",LCD_1);
    2c88:	8b e2       	ldi	r24, 0x2B	; 43
    2c8a:	91 e0       	ldi	r25, 0x01	; 1
    2c8c:	61 e0       	ldi	r22, 0x01	; 1
    2c8e:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
			MTIMER0_voidSetBusyWait(DELAY_LCD);
    2c92:	8e e5       	ldi	r24, 0x5E	; 94
    2c94:	91 e0       	ldi	r25, 0x01	; 1
    2c96:	0e 94 1a 0c 	call	0x1834	; 0x1834 <MTIMER0_voidSetBusyWait>
			break;
		}
	}while(flag);
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	88 23       	and	r24, r24
    2c9e:	09 f0       	breq	.+2      	; 0x2ca2 <DISP_OPT_AC+0xc0>
    2ca0:	a8 cf       	rjmp	.-176    	; 0x2bf2 <DISP_OPT_AC+0x10>
}
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	0f 90       	pop	r0
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <DISP_OPT_LDR>:

void DISP_OPT_LDR(){
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	00 d0       	rcall	.+0      	; 0x2cb8 <DISP_OPT_LDR+0x6>
    2cb8:	00 d0       	rcall	.+0      	; 0x2cba <DISP_OPT_LDR+0x8>
    2cba:	0f 92       	push	r0
    2cbc:	cd b7       	in	r28, 0x3d	; 61
    2cbe:	de b7       	in	r29, 0x3e	; 62
	u8 flag = 0;
    2cc0:	19 82       	std	Y+1, r1	; 0x01
	do{
		flag= 0;
    2cc2:	19 82       	std	Y+1, r1	; 0x01
		LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	61 e0       	ldi	r22, 0x01	; 1
    2cc8:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
		LCD_WriteStringData((u8*) "ENABLE LDR SYSTEM?",LCD_1);
    2ccc:	8b e5       	ldi	r24, 0x5B	; 91
    2cce:	91 e0       	ldi	r25, 0x01	; 1
    2cd0:	61 e0       	ldi	r22, 0x01	; 1
    2cd2:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		LCD_GoToPosition(1,0,LCD_1);
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	60 e0       	ldi	r22, 0x00	; 0
    2cda:	41 e0       	ldi	r20, 0x01	; 1
    2cdc:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteStringData((u8*) "1-YES",LCD_1);
    2ce0:	80 e5       	ldi	r24, 0x50	; 80
    2ce2:	91 e0       	ldi	r25, 0x01	; 1
    2ce4:	61 e0       	ldi	r22, 0x01	; 1
    2ce6:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		LCD_GoToPosition(1,9,LCD_1);
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	69 e0       	ldi	r22, 0x09	; 9
    2cee:	41 e0       	ldi	r20, 0x01	; 1
    2cf0:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteStringData((u8*) "2-NO",LCD_1);
    2cf4:	86 e5       	ldi	r24, 0x56	; 86
    2cf6:	91 e0       	ldi	r25, 0x01	; 1
    2cf8:	61 e0       	ldi	r22, 0x01	; 1
    2cfa:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		LCD_GoToPosition(2,0,LCD_1);
    2cfe:	82 e0       	ldi	r24, 0x02	; 2
    2d00:	60 e0       	ldi	r22, 0x00	; 0
    2d02:	41 e0       	ldi	r20, 0x01	; 1
    2d04:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteStringData((u8*) "YOUR CHOICE: ",LCD_1);
    2d08:	8d e1       	ldi	r24, 0x1D	; 29
    2d0a:	91 e0       	ldi	r25, 0x01	; 1
    2d0c:	61 e0       	ldi	r22, 0x01	; 1
    2d0e:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
		switch(LCD_ReadInput(LCD_1)){
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_ReadInput>
    2d18:	6a 83       	std	Y+2, r22	; 0x02
    2d1a:	7b 83       	std	Y+3, r23	; 0x03
    2d1c:	8c 83       	std	Y+4, r24	; 0x04
    2d1e:	9d 83       	std	Y+5, r25	; 0x05
    2d20:	8a 81       	ldd	r24, Y+2	; 0x02
    2d22:	9b 81       	ldd	r25, Y+3	; 0x03
    2d24:	ac 81       	ldd	r26, Y+4	; 0x04
    2d26:	bd 81       	ldd	r27, Y+5	; 0x05
    2d28:	81 30       	cpi	r24, 0x01	; 1
    2d2a:	91 05       	cpc	r25, r1
    2d2c:	a1 05       	cpc	r26, r1
    2d2e:	b1 05       	cpc	r27, r1
    2d30:	51 f0       	breq	.+20     	; 0x2d46 <DISP_OPT_LDR+0x94>
    2d32:	8a 81       	ldd	r24, Y+2	; 0x02
    2d34:	9b 81       	ldd	r25, Y+3	; 0x03
    2d36:	ac 81       	ldd	r26, Y+4	; 0x04
    2d38:	bd 81       	ldd	r27, Y+5	; 0x05
    2d3a:	82 30       	cpi	r24, 0x02	; 2
    2d3c:	91 05       	cpc	r25, r1
    2d3e:	a1 05       	cpc	r26, r1
    2d40:	b1 05       	cpc	r27, r1
    2d42:	29 f0       	breq	.+10     	; 0x2d4e <DISP_OPT_LDR+0x9c>
    2d44:	08 c0       	rjmp	.+16     	; 0x2d56 <DISP_OPT_LDR+0xa4>
		case YES:
			CONTROL_LDR(1);
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	0e 94 61 18 	call	0x30c2	; 0x30c2 <CONTROL_LDR>
    2d4c:	13 c0       	rjmp	.+38     	; 0x2d74 <DISP_OPT_LDR+0xc2>
			break;
		case NO:
			CONTROL_LDR(0);
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	0e 94 61 18 	call	0x30c2	; 0x30c2 <CONTROL_LDR>
    2d54:	0f c0       	rjmp	.+30     	; 0x2d74 <DISP_OPT_LDR+0xc2>
			break;
		default:
			flag = 1;
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	89 83       	std	Y+1, r24	; 0x01
			LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	61 e0       	ldi	r22, 0x01	; 1
    2d5e:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
			LCD_WriteStringData((u8*) "INVALID CHOICE!",LCD_1);
    2d62:	8b e2       	ldi	r24, 0x2B	; 43
    2d64:	91 e0       	ldi	r25, 0x01	; 1
    2d66:	61 e0       	ldi	r22, 0x01	; 1
    2d68:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
			MTIMER0_voidSetBusyWait(DELAY_LCD);
    2d6c:	8e e5       	ldi	r24, 0x5E	; 94
    2d6e:	91 e0       	ldi	r25, 0x01	; 1
    2d70:	0e 94 1a 0c 	call	0x1834	; 0x1834 <MTIMER0_voidSetBusyWait>
			break;
		}
	}while(flag);
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	88 23       	and	r24, r24
    2d78:	09 f0       	breq	.+2      	; 0x2d7c <DISP_OPT_LDR+0xca>
    2d7a:	a3 cf       	rjmp	.-186    	; 0x2cc2 <DISP_OPT_LDR+0x10>
}
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	0f 90       	pop	r0
    2d82:	0f 90       	pop	r0
    2d84:	0f 90       	pop	r0
    2d86:	cf 91       	pop	r28
    2d88:	df 91       	pop	r29
    2d8a:	08 95       	ret

00002d8c <DISP_OPT_DOOR>:

void DISP_OPT_DOOR(){
    2d8c:	df 93       	push	r29
    2d8e:	cf 93       	push	r28
    2d90:	00 d0       	rcall	.+0      	; 0x2d92 <DISP_OPT_DOOR+0x6>
    2d92:	00 d0       	rcall	.+0      	; 0x2d94 <DISP_OPT_DOOR+0x8>
    2d94:	0f 92       	push	r0
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
	u8 flag = 0;
    2d9a:	19 82       	std	Y+1, r1	; 0x01
	do{
		flag= 0;
    2d9c:	19 82       	std	Y+1, r1	; 0x01
		LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	61 e0       	ldi	r22, 0x01	; 1
    2da2:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
		LCD_WriteStringData((u8*) "DOOR CONTROL",LCD_1);
    2da6:	8e e6       	ldi	r24, 0x6E	; 110
    2da8:	91 e0       	ldi	r25, 0x01	; 1
    2daa:	61 e0       	ldi	r22, 0x01	; 1
    2dac:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		LCD_GoToPosition(1,0,LCD_1);
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	60 e0       	ldi	r22, 0x00	; 0
    2db4:	41 e0       	ldi	r20, 0x01	; 1
    2db6:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteStringData((u8*) "1-OPEN DOOR",LCD_1);
    2dba:	8b e7       	ldi	r24, 0x7B	; 123
    2dbc:	91 e0       	ldi	r25, 0x01	; 1
    2dbe:	61 e0       	ldi	r22, 0x01	; 1
    2dc0:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		LCD_GoToPosition(2,0,LCD_1);
    2dc4:	82 e0       	ldi	r24, 0x02	; 2
    2dc6:	60 e0       	ldi	r22, 0x00	; 0
    2dc8:	41 e0       	ldi	r20, 0x01	; 1
    2dca:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteStringData((u8*) "2-CLOSE DOOR",LCD_1);
    2dce:	87 e8       	ldi	r24, 0x87	; 135
    2dd0:	91 e0       	ldi	r25, 0x01	; 1
    2dd2:	61 e0       	ldi	r22, 0x01	; 1
    2dd4:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		LCD_GoToPosition(3,0,LCD_1);
    2dd8:	83 e0       	ldi	r24, 0x03	; 3
    2dda:	60 e0       	ldi	r22, 0x00	; 0
    2ddc:	41 e0       	ldi	r20, 0x01	; 1
    2dde:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteStringData((u8*) "YOUR CHOICE: ",LCD_1);
    2de2:	8d e1       	ldi	r24, 0x1D	; 29
    2de4:	91 e0       	ldi	r25, 0x01	; 1
    2de6:	61 e0       	ldi	r22, 0x01	; 1
    2de8:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
		switch(LCD_ReadInput(LCD_1)){
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_ReadInput>
    2df2:	6a 83       	std	Y+2, r22	; 0x02
    2df4:	7b 83       	std	Y+3, r23	; 0x03
    2df6:	8c 83       	std	Y+4, r24	; 0x04
    2df8:	9d 83       	std	Y+5, r25	; 0x05
    2dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dfe:	ac 81       	ldd	r26, Y+4	; 0x04
    2e00:	bd 81       	ldd	r27, Y+5	; 0x05
    2e02:	81 30       	cpi	r24, 0x01	; 1
    2e04:	91 05       	cpc	r25, r1
    2e06:	a1 05       	cpc	r26, r1
    2e08:	b1 05       	cpc	r27, r1
    2e0a:	51 f0       	breq	.+20     	; 0x2e20 <DISP_OPT_DOOR+0x94>
    2e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e10:	ac 81       	ldd	r26, Y+4	; 0x04
    2e12:	bd 81       	ldd	r27, Y+5	; 0x05
    2e14:	82 30       	cpi	r24, 0x02	; 2
    2e16:	91 05       	cpc	r25, r1
    2e18:	a1 05       	cpc	r26, r1
    2e1a:	b1 05       	cpc	r27, r1
    2e1c:	29 f0       	breq	.+10     	; 0x2e28 <DISP_OPT_DOOR+0x9c>
    2e1e:	08 c0       	rjmp	.+16     	; 0x2e30 <DISP_OPT_DOOR+0xa4>
		case 1:
			CONTROL_DOOR(1);
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	0e 94 2e 18 	call	0x305c	; 0x305c <CONTROL_DOOR>
    2e26:	13 c0       	rjmp	.+38     	; 0x2e4e <DISP_OPT_DOOR+0xc2>
			break;
		case 2:
			CONTROL_DOOR(0);
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	0e 94 2e 18 	call	0x305c	; 0x305c <CONTROL_DOOR>
    2e2e:	0f c0       	rjmp	.+30     	; 0x2e4e <DISP_OPT_DOOR+0xc2>
			break;
		default:
			flag = 1;
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	89 83       	std	Y+1, r24	; 0x01
			LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	61 e0       	ldi	r22, 0x01	; 1
    2e38:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
			LCD_WriteStringData((u8*) "INVALID CHOICE!",LCD_1);
    2e3c:	8b e2       	ldi	r24, 0x2B	; 43
    2e3e:	91 e0       	ldi	r25, 0x01	; 1
    2e40:	61 e0       	ldi	r22, 0x01	; 1
    2e42:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
			MTIMER0_voidSetBusyWait(DELAY_LCD);
    2e46:	8e e5       	ldi	r24, 0x5E	; 94
    2e48:	91 e0       	ldi	r25, 0x01	; 1
    2e4a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <MTIMER0_voidSetBusyWait>
			break;
		}
	}while(flag);
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	88 23       	and	r24, r24
    2e52:	09 f0       	breq	.+2      	; 0x2e56 <DISP_OPT_DOOR+0xca>
    2e54:	a3 cf       	rjmp	.-186    	; 0x2d9c <DISP_OPT_DOOR+0x10>
}
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	0f 90       	pop	r0
    2e60:	cf 91       	pop	r28
    2e62:	df 91       	pop	r29
    2e64:	08 95       	ret

00002e66 <DISP_OPT_MUSIC>:

void DISP_OPT_MUSIC(){
    2e66:	df 93       	push	r29
    2e68:	cf 93       	push	r28
    2e6a:	00 d0       	rcall	.+0      	; 0x2e6c <DISP_OPT_MUSIC+0x6>
    2e6c:	00 d0       	rcall	.+0      	; 0x2e6e <DISP_OPT_MUSIC+0x8>
    2e6e:	0f 92       	push	r0
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
	u8 flag = 0;
    2e74:	19 82       	std	Y+1, r1	; 0x01
	do{
		flag= 0;
    2e76:	19 82       	std	Y+1, r1	; 0x01
		LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	61 e0       	ldi	r22, 0x01	; 1
    2e7c:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
		LCD_WriteStringData((u8*) "ENABLE MUSIC SYSTEM?",LCD_1);
    2e80:	84 e9       	ldi	r24, 0x94	; 148
    2e82:	91 e0       	ldi	r25, 0x01	; 1
    2e84:	61 e0       	ldi	r22, 0x01	; 1
    2e86:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		LCD_GoToPosition(1,0,LCD_1);
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	60 e0       	ldi	r22, 0x00	; 0
    2e8e:	41 e0       	ldi	r20, 0x01	; 1
    2e90:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteStringData((u8*) "1-YES",LCD_1);
    2e94:	80 e5       	ldi	r24, 0x50	; 80
    2e96:	91 e0       	ldi	r25, 0x01	; 1
    2e98:	61 e0       	ldi	r22, 0x01	; 1
    2e9a:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		LCD_GoToPosition(1,9,LCD_1);
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	69 e0       	ldi	r22, 0x09	; 9
    2ea2:	41 e0       	ldi	r20, 0x01	; 1
    2ea4:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteStringData((u8*) "2-NO",LCD_1);
    2ea8:	86 e5       	ldi	r24, 0x56	; 86
    2eaa:	91 e0       	ldi	r25, 0x01	; 1
    2eac:	61 e0       	ldi	r22, 0x01	; 1
    2eae:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		LCD_GoToPosition(2,0,LCD_1);
    2eb2:	82 e0       	ldi	r24, 0x02	; 2
    2eb4:	60 e0       	ldi	r22, 0x00	; 0
    2eb6:	41 e0       	ldi	r20, 0x01	; 1
    2eb8:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteStringData((u8*) "YOUR CHOICE: ",LCD_1);
    2ebc:	8d e1       	ldi	r24, 0x1D	; 29
    2ebe:	91 e0       	ldi	r25, 0x01	; 1
    2ec0:	61 e0       	ldi	r22, 0x01	; 1
    2ec2:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
		switch(LCD_ReadInput(LCD_1)){
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_ReadInput>
    2ecc:	6a 83       	std	Y+2, r22	; 0x02
    2ece:	7b 83       	std	Y+3, r23	; 0x03
    2ed0:	8c 83       	std	Y+4, r24	; 0x04
    2ed2:	9d 83       	std	Y+5, r25	; 0x05
    2ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed8:	ac 81       	ldd	r26, Y+4	; 0x04
    2eda:	bd 81       	ldd	r27, Y+5	; 0x05
    2edc:	81 30       	cpi	r24, 0x01	; 1
    2ede:	91 05       	cpc	r25, r1
    2ee0:	a1 05       	cpc	r26, r1
    2ee2:	b1 05       	cpc	r27, r1
    2ee4:	51 f0       	breq	.+20     	; 0x2efa <DISP_OPT_MUSIC+0x94>
    2ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eea:	ac 81       	ldd	r26, Y+4	; 0x04
    2eec:	bd 81       	ldd	r27, Y+5	; 0x05
    2eee:	82 30       	cpi	r24, 0x02	; 2
    2ef0:	91 05       	cpc	r25, r1
    2ef2:	a1 05       	cpc	r26, r1
    2ef4:	b1 05       	cpc	r27, r1
    2ef6:	29 f0       	breq	.+10     	; 0x2f02 <DISP_OPT_MUSIC+0x9c>
    2ef8:	08 c0       	rjmp	.+16     	; 0x2f0a <DISP_OPT_MUSIC+0xa4>
		case YES:
			CONTROL_Music(1);
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	0e 94 8b 18 	call	0x3116	; 0x3116 <CONTROL_Music>
    2f00:	13 c0       	rjmp	.+38     	; 0x2f28 <DISP_OPT_MUSIC+0xc2>
			break;
		case NO:
			CONTROL_Music(0);
    2f02:	80 e0       	ldi	r24, 0x00	; 0
    2f04:	0e 94 8b 18 	call	0x3116	; 0x3116 <CONTROL_Music>
    2f08:	0f c0       	rjmp	.+30     	; 0x2f28 <DISP_OPT_MUSIC+0xc2>
			break;
		default:
			flag = 1;
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	89 83       	std	Y+1, r24	; 0x01
			LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	61 e0       	ldi	r22, 0x01	; 1
    2f12:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
			LCD_WriteStringData((u8*) "INVALID CHOICE!",LCD_1);
    2f16:	8b e2       	ldi	r24, 0x2B	; 43
    2f18:	91 e0       	ldi	r25, 0x01	; 1
    2f1a:	61 e0       	ldi	r22, 0x01	; 1
    2f1c:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
			MTIMER0_voidSetBusyWait(DELAY_LCD);
    2f20:	8e e5       	ldi	r24, 0x5E	; 94
    2f22:	91 e0       	ldi	r25, 0x01	; 1
    2f24:	0e 94 1a 0c 	call	0x1834	; 0x1834 <MTIMER0_voidSetBusyWait>
			break;
		}
	}while(flag);
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	88 23       	and	r24, r24
    2f2c:	09 f0       	breq	.+2      	; 0x2f30 <DISP_OPT_MUSIC+0xca>
    2f2e:	a3 cf       	rjmp	.-186    	; 0x2e76 <DISP_OPT_MUSIC+0x10>
}
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	0f 90       	pop	r0
    2f36:	0f 90       	pop	r0
    2f38:	0f 90       	pop	r0
    2f3a:	cf 91       	pop	r28
    2f3c:	df 91       	pop	r29
    2f3e:	08 95       	ret

00002f40 <USER_MODE_Init>:

void USER_MODE_Init(){
    2f40:	df 93       	push	r29
    2f42:	cf 93       	push	r28
    2f44:	00 d0       	rcall	.+0      	; 0x2f46 <USER_MODE_Init+0x6>
    2f46:	00 d0       	rcall	.+0      	; 0x2f48 <USER_MODE_Init+0x8>
    2f48:	0f 92       	push	r0
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62
	u8 flag = 0;
    2f4e:	19 82       	std	Y+1, r1	; 0x01
	do{
		flag = 0;
    2f50:	19 82       	std	Y+1, r1	; 0x01
		LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	61 e0       	ldi	r22, 0x01	; 1
    2f56:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
		LCD_WriteStringData((u8*) "1-DISPLAY OPTIONS",LCD_1);
    2f5a:	89 ea       	ldi	r24, 0xA9	; 169
    2f5c:	91 e0       	ldi	r25, 0x01	; 1
    2f5e:	61 e0       	ldi	r22, 0x01	; 1
    2f60:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		LCD_GoToPosition(1,0,LCD_1);
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	60 e0       	ldi	r22, 0x00	; 0
    2f68:	41 e0       	ldi	r20, 0x01	; 1
    2f6a:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteStringData((u8*) "2-CHANGE PASSWORD",LCD_1);
    2f6e:	8b eb       	ldi	r24, 0xBB	; 187
    2f70:	91 e0       	ldi	r25, 0x01	; 1
    2f72:	61 e0       	ldi	r22, 0x01	; 1
    2f74:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		LCD_GoToPosition(2,0,LCD_1);
    2f78:	82 e0       	ldi	r24, 0x02	; 2
    2f7a:	60 e0       	ldi	r22, 0x00	; 0
    2f7c:	41 e0       	ldi	r20, 0x01	; 1
    2f7e:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteStringData((u8*) "3-LOGOUT",LCD_1);
    2f82:	8d ec       	ldi	r24, 0xCD	; 205
    2f84:	91 e0       	ldi	r25, 0x01	; 1
    2f86:	61 e0       	ldi	r22, 0x01	; 1
    2f88:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

		LCD_GoToPosition(3,0,LCD_1);
    2f8c:	83 e0       	ldi	r24, 0x03	; 3
    2f8e:	60 e0       	ldi	r22, 0x00	; 0
    2f90:	41 e0       	ldi	r20, 0x01	; 1
    2f92:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
		LCD_WriteStringData((u8*) "YOUR CHOICE: ",LCD_1);
    2f96:	8d e1       	ldi	r24, 0x1D	; 29
    2f98:	91 e0       	ldi	r25, 0x01	; 1
    2f9a:	61 e0       	ldi	r22, 0x01	; 1
    2f9c:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
		switch(LCD_ReadInput(LCD_1)){
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_ReadInput>
    2fa6:	6a 83       	std	Y+2, r22	; 0x02
    2fa8:	7b 83       	std	Y+3, r23	; 0x03
    2faa:	8c 83       	std	Y+4, r24	; 0x04
    2fac:	9d 83       	std	Y+5, r25	; 0x05
    2fae:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb2:	ac 81       	ldd	r26, Y+4	; 0x04
    2fb4:	bd 81       	ldd	r27, Y+5	; 0x05
    2fb6:	82 30       	cpi	r24, 0x02	; 2
    2fb8:	91 05       	cpc	r25, r1
    2fba:	a1 05       	cpc	r26, r1
    2fbc:	b1 05       	cpc	r27, r1
    2fbe:	b9 f0       	breq	.+46     	; 0x2fee <USER_MODE_Init+0xae>
    2fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc4:	ac 81       	ldd	r26, Y+4	; 0x04
    2fc6:	bd 81       	ldd	r27, Y+5	; 0x05
    2fc8:	83 30       	cpi	r24, 0x03	; 3
    2fca:	91 05       	cpc	r25, r1
    2fcc:	a1 05       	cpc	r26, r1
    2fce:	b1 05       	cpc	r27, r1
    2fd0:	89 f0       	breq	.+34     	; 0x2ff4 <USER_MODE_Init+0xb4>
    2fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd6:	ac 81       	ldd	r26, Y+4	; 0x04
    2fd8:	bd 81       	ldd	r27, Y+5	; 0x05
    2fda:	81 30       	cpi	r24, 0x01	; 1
    2fdc:	91 05       	cpc	r25, r1
    2fde:	a1 05       	cpc	r26, r1
    2fe0:	b1 05       	cpc	r27, r1
    2fe2:	59 f4       	brne	.+22     	; 0x2ffa <USER_MODE_Init+0xba>
		case 1:
			DISP_OPT_Init();
    2fe4:	0e 94 23 15 	call	0x2a46	; 0x2a46 <DISP_OPT_Init>
			flag = 1;
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	89 83       	std	Y+1, r24	; 0x01
    2fec:	15 c0       	rjmp	.+42     	; 0x3018 <USER_MODE_Init+0xd8>
			break;
		case 2:
			Login_ChangePass();
    2fee:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <Login_ChangePass>
    2ff2:	12 c0       	rjmp	.+36     	; 0x3018 <USER_MODE_Init+0xd8>
			break;
		case 3:
			CONTROL_Init();
    2ff4:	0e 94 18 18 	call	0x3030	; 0x3030 <CONTROL_Init>
    2ff8:	0f c0       	rjmp	.+30     	; 0x3018 <USER_MODE_Init+0xd8>
			break;
		default:
			flag = 1;
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	89 83       	std	Y+1, r24	; 0x01
			LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	61 e0       	ldi	r22, 0x01	; 1
    3002:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
			LCD_WriteStringData((u8*) "INVALID CHOICE!",LCD_1);
    3006:	8b e2       	ldi	r24, 0x2B	; 43
    3008:	91 e0       	ldi	r25, 0x01	; 1
    300a:	61 e0       	ldi	r22, 0x01	; 1
    300c:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
			MTIMER0_voidSetBusyWait(DELAY_LCD);
    3010:	8e e5       	ldi	r24, 0x5E	; 94
    3012:	91 e0       	ldi	r25, 0x01	; 1
    3014:	0e 94 1a 0c 	call	0x1834	; 0x1834 <MTIMER0_voidSetBusyWait>
			break;
		}
	}while(flag);
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	88 23       	and	r24, r24
    301c:	09 f0       	breq	.+2      	; 0x3020 <USER_MODE_Init+0xe0>
    301e:	98 cf       	rjmp	.-208    	; 0x2f50 <USER_MODE_Init+0x10>
}
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	0f 90       	pop	r0
    3026:	0f 90       	pop	r0
    3028:	0f 90       	pop	r0
    302a:	cf 91       	pop	r28
    302c:	df 91       	pop	r29
    302e:	08 95       	ret

00003030 <CONTROL_Init>:

/**********************************************************************************************************************
 *  Functions Definitions
 *********************************************************************************************************************/

void CONTROL_Init(){
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
	Control_union.Tasks_t.LIGHTS = 0;
    3038:	80 91 9e 03 	lds	r24, 0x039E
    303c:	8e 7f       	andi	r24, 0xFE	; 254
    303e:	80 93 9e 03 	sts	0x039E, r24
	Control_union.Tasks_t.DOORS  = 0;
    3042:	80 91 9e 03 	lds	r24, 0x039E
    3046:	8d 7f       	andi	r24, 0xFD	; 253
    3048:	80 93 9e 03 	sts	0x039E, r24
	Control_union.Tasks_t.SOUND  = 0;
    304c:	80 91 9e 03 	lds	r24, 0x039E
    3050:	8b 7f       	andi	r24, 0xFB	; 251
    3052:	80 93 9e 03 	sts	0x039E, r24
}
    3056:	cf 91       	pop	r28
    3058:	df 91       	pop	r29
    305a:	08 95       	ret

0000305c <CONTROL_DOOR>:


void CONTROL_DOOR(u8 Open){
    305c:	df 93       	push	r29
    305e:	cf 93       	push	r28
    3060:	0f 92       	push	r0
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	61 e0       	ldi	r22, 0x01	; 1
    306c:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
	if(Open){
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	88 23       	and	r24, r24
    3074:	51 f0       	breq	.+20     	; 0x308a <CONTROL_DOOR+0x2e>
		TIMER1_SetDutyCycle(1249);
    3076:	81 ee       	ldi	r24, 0xE1	; 225
    3078:	94 e0       	ldi	r25, 0x04	; 4
    307a:	0e 94 99 0b 	call	0x1732	; 0x1732 <TIMER1_SetDutyCycle>

		LCD_WriteStringData((u8*) "DOOR OPENED!",LCD_1);
    307e:	86 ed       	ldi	r24, 0xD6	; 214
    3080:	91 e0       	ldi	r25, 0x01	; 1
    3082:	61 e0       	ldi	r22, 0x01	; 1
    3084:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
    3088:	09 c0       	rjmp	.+18     	; 0x309c <CONTROL_DOOR+0x40>
	}
	else{
		TIMER1_SetDutyCycle(388);
    308a:	84 e8       	ldi	r24, 0x84	; 132
    308c:	91 e0       	ldi	r25, 0x01	; 1
    308e:	0e 94 99 0b 	call	0x1732	; 0x1732 <TIMER1_SetDutyCycle>
		LCD_WriteStringData((u8*) "DOOR CLOSED!",LCD_1);
    3092:	83 ee       	ldi	r24, 0xE3	; 227
    3094:	91 e0       	ldi	r25, 0x01	; 1
    3096:	61 e0       	ldi	r22, 0x01	; 1
    3098:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
	}
	Control_union.Tasks_t.DOORS = Open;
    309c:	89 81       	ldd	r24, Y+1	; 0x01
    309e:	81 70       	andi	r24, 0x01	; 1
    30a0:	81 70       	andi	r24, 0x01	; 1
    30a2:	98 2f       	mov	r25, r24
    30a4:	99 0f       	add	r25, r25
    30a6:	80 91 9e 03 	lds	r24, 0x039E
    30aa:	8d 7f       	andi	r24, 0xFD	; 253
    30ac:	89 2b       	or	r24, r25
    30ae:	80 93 9e 03 	sts	0x039E, r24
	MTIMER0_voidSetBusyWait(DELAY_LCD);//delay 350ms
    30b2:	8e e5       	ldi	r24, 0x5E	; 94
    30b4:	91 e0       	ldi	r25, 0x01	; 1
    30b6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <MTIMER0_voidSetBusyWait>
}
    30ba:	0f 90       	pop	r0
    30bc:	cf 91       	pop	r28
    30be:	df 91       	pop	r29
    30c0:	08 95       	ret

000030c2 <CONTROL_LDR>:


void CONTROL_LDR(u8 On){
    30c2:	df 93       	push	r29
    30c4:	cf 93       	push	r28
    30c6:	0f 92       	push	r0
    30c8:	cd b7       	in	r28, 0x3d	; 61
    30ca:	de b7       	in	r29, 0x3e	; 62
    30cc:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	61 e0       	ldi	r22, 0x01	; 1
    30d2:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
	if(On){
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
    30d8:	88 23       	and	r24, r24
    30da:	31 f0       	breq	.+12     	; 0x30e8 <CONTROL_LDR+0x26>
		LCD_WriteStringData((u8*) "LDR TURNED ON!",LCD_1);
    30dc:	80 ef       	ldi	r24, 0xF0	; 240
    30de:	91 e0       	ldi	r25, 0x01	; 1
    30e0:	61 e0       	ldi	r22, 0x01	; 1
    30e2:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
    30e6:	05 c0       	rjmp	.+10     	; 0x30f2 <CONTROL_LDR+0x30>
	}
	else{
		LCD_WriteStringData((u8*) "LDR TURNED OFF!",LCD_1);
    30e8:	8f ef       	ldi	r24, 0xFF	; 255
    30ea:	91 e0       	ldi	r25, 0x01	; 1
    30ec:	61 e0       	ldi	r22, 0x01	; 1
    30ee:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
	}
	Control_union.Tasks_t.LIGHTS = On;
    30f2:	89 81       	ldd	r24, Y+1	; 0x01
    30f4:	81 70       	andi	r24, 0x01	; 1
    30f6:	98 2f       	mov	r25, r24
    30f8:	91 70       	andi	r25, 0x01	; 1
    30fa:	80 91 9e 03 	lds	r24, 0x039E
    30fe:	8e 7f       	andi	r24, 0xFE	; 254
    3100:	89 2b       	or	r24, r25
    3102:	80 93 9e 03 	sts	0x039E, r24
	MTIMER0_voidSetBusyWait(DELAY_LCD);//delay 350ms
    3106:	8e e5       	ldi	r24, 0x5E	; 94
    3108:	91 e0       	ldi	r25, 0x01	; 1
    310a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <MTIMER0_voidSetBusyWait>
}
    310e:	0f 90       	pop	r0
    3110:	cf 91       	pop	r28
    3112:	df 91       	pop	r29
    3114:	08 95       	ret

00003116 <CONTROL_Music>:


void CONTROL_Music(u8 On){
    3116:	df 93       	push	r29
    3118:	cf 93       	push	r28
    311a:	0f 92       	push	r0
    311c:	cd b7       	in	r28, 0x3d	; 61
    311e:	de b7       	in	r29, 0x3e	; 62
    3120:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	61 e0       	ldi	r22, 0x01	; 1
    3126:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
	if(On){
    312a:	89 81       	ldd	r24, Y+1	; 0x01
    312c:	88 23       	and	r24, r24
    312e:	31 f0       	breq	.+12     	; 0x313c <CONTROL_Music+0x26>
		LCD_WriteStringData((u8*) "MUSIC TURNED ON!",LCD_1);
    3130:	8f e0       	ldi	r24, 0x0F	; 15
    3132:	92 e0       	ldi	r25, 0x02	; 2
    3134:	61 e0       	ldi	r22, 0x01	; 1
    3136:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
    313a:	05 c0       	rjmp	.+10     	; 0x3146 <CONTROL_Music+0x30>
	}
	else{
		LCD_WriteStringData((u8*) "MUSIC TURNED OFF!",LCD_1);
    313c:	80 e2       	ldi	r24, 0x20	; 32
    313e:	92 e0       	ldi	r25, 0x02	; 2
    3140:	61 e0       	ldi	r22, 0x01	; 1
    3142:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
	}
	Control_union.Tasks_t.SOUND = On;
    3146:	89 81       	ldd	r24, Y+1	; 0x01
    3148:	81 70       	andi	r24, 0x01	; 1
    314a:	81 70       	andi	r24, 0x01	; 1
    314c:	98 2f       	mov	r25, r24
    314e:	99 0f       	add	r25, r25
    3150:	99 0f       	add	r25, r25
    3152:	80 91 9e 03 	lds	r24, 0x039E
    3156:	8b 7f       	andi	r24, 0xFB	; 251
    3158:	89 2b       	or	r24, r25
    315a:	80 93 9e 03 	sts	0x039E, r24
	MTIMER0_voidSetBusyWait(DELAY_LCD);//delay 350ms
    315e:	8e e5       	ldi	r24, 0x5E	; 94
    3160:	91 e0       	ldi	r25, 0x01	; 1
    3162:	0e 94 1a 0c 	call	0x1834	; 0x1834 <MTIMER0_voidSetBusyWait>
}
    3166:	0f 90       	pop	r0
    3168:	cf 91       	pop	r28
    316a:	df 91       	pop	r29
    316c:	08 95       	ret

0000316e <Change_TempThreshold>:


void Change_TempThreshold(){
    316e:	df 93       	push	r29
    3170:	cf 93       	push	r28
    3172:	0f 92       	push	r0
    3174:	cd b7       	in	r28, 0x3d	; 61
    3176:	de b7       	in	r29, 0x3e	; 62
	u8 input = 0;
    3178:	19 82       	std	Y+1, r1	; 0x01
	LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	61 e0       	ldi	r22, 0x01	; 1
    317e:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
	LCD_WriteStringData((u8*) "NEW THRESHOLD: ",LCD_1);
    3182:	82 e3       	ldi	r24, 0x32	; 50
    3184:	92 e0       	ldi	r25, 0x02	; 2
    3186:	61 e0       	ldi	r22, 0x01	; 1
    3188:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
	input = LCD_ReadInput(LCD_1);
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_ReadInput>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	89 83       	std	Y+1, r24	; 0x01
	if(input <= 30){
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	8f 31       	cpi	r24, 0x1F	; 31
    319c:	68 f4       	brcc	.+26     	; 0x31b8 <Change_TempThreshold+0x4a>
		Temp_Threshold= input;
    319e:	89 81       	ldd	r24, Y+1	; 0x01
    31a0:	80 93 91 03 	sts	0x0391, r24
		LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	61 e0       	ldi	r22, 0x01	; 1
    31a8:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
		LCD_WriteStringData((u8*) "THRESHOLD UPDATED!",LCD_1);
    31ac:	82 e4       	ldi	r24, 0x42	; 66
    31ae:	92 e0       	ldi	r25, 0x02	; 2
    31b0:	61 e0       	ldi	r22, 0x01	; 1
    31b2:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
    31b6:	09 c0       	rjmp	.+18     	; 0x31ca <Change_TempThreshold+0x5c>
	}
	else{
		LCD_WriteCommand(DISPLAY_CLEAR,LCD_1);
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	61 e0       	ldi	r22, 0x01	; 1
    31bc:	0e 94 fd 11 	call	0x23fa	; 0x23fa <LCD_WriteCommand>
		LCD_WriteStringData((u8*) "INCORRECT THRESHOLD!",LCD_1);
    31c0:	85 e5       	ldi	r24, 0x55	; 85
    31c2:	92 e0       	ldi	r25, 0x02	; 2
    31c4:	61 e0       	ldi	r22, 0x01	; 1
    31c6:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
	}

	MTIMER0_voidSetBusyWait(DELAY_LCD);//delay 350ms
    31ca:	8e e5       	ldi	r24, 0x5E	; 94
    31cc:	91 e0       	ldi	r25, 0x01	; 1
    31ce:	0e 94 1a 0c 	call	0x1834	; 0x1834 <MTIMER0_voidSetBusyWait>
}
    31d2:	0f 90       	pop	r0
    31d4:	cf 91       	pop	r28
    31d6:	df 91       	pop	r29
    31d8:	08 95       	ret

000031da <Control_SendUART>:


void Control_SendUART(){
    31da:	df 93       	push	r29
    31dc:	cf 93       	push	r28
    31de:	cd b7       	in	r28, 0x3d	; 61
    31e0:	de b7       	in	r29, 0x3e	; 62
    31e2:	2a 97       	sbiw	r28, 0x0a	; 10
    31e4:	0f b6       	in	r0, 0x3f	; 63
    31e6:	f8 94       	cli
    31e8:	de bf       	out	0x3e, r29	; 62
    31ea:	0f be       	out	0x3f, r0	; 63
    31ec:	cd bf       	out	0x3d, r28	; 61
	static u8 flag=0, flag2=0, flag3=0;
	u8 sent_Data = Control_union.TASK_REG;
    31ee:	80 91 9e 03 	lds	r24, 0x039E
    31f2:	8a 83       	std	Y+2, r24	; 0x02
	u8 rec_Data;
	if(flag == 0){
    31f4:	80 91 9d 03 	lds	r24, 0x039D
    31f8:	88 23       	and	r24, r24
    31fa:	c9 f4       	brne	.+50     	; 0x322e <Control_SendUART+0x54>
		if(flag2 == 1){
    31fc:	80 91 9c 03 	lds	r24, 0x039C
    3200:	81 30       	cpi	r24, 0x01	; 1
    3202:	41 f4       	brne	.+16     	; 0x3214 <Control_SendUART+0x3a>
			UART_transmit_Char(sent_Data);
    3204:	8a 81       	ldd	r24, Y+2	; 0x02
    3206:	88 2f       	mov	r24, r24
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <UART_transmit_Char>
			flag2 = 0;
    320e:	10 92 9c 03 	sts	0x039C, r1
    3212:	09 c0       	rjmp	.+18     	; 0x3226 <Control_SendUART+0x4c>
		}
		else{
			UART_transmit_Char(Temp_Threshold);
    3214:	80 91 91 03 	lds	r24, 0x0391
    3218:	88 2f       	mov	r24, r24
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <UART_transmit_Char>
			flag2 = 1;
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	80 93 9c 03 	sts	0x039C, r24
		}
		flag=1;
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	80 93 9d 03 	sts	0x039D, r24
    322c:	8c c0       	rjmp	.+280    	; 0x3346 <Control_SendUART+0x16c>
	}else{

		rec_Data = UART_recieve_Char();
    322e:	0e 94 0c 0a 	call	0x1418	; 0x1418 <UART_recieve_Char>
    3232:	89 83       	std	Y+1, r24	; 0x01
		if(flag3 == 0){
    3234:	80 91 9b 03 	lds	r24, 0x039B
    3238:	88 23       	and	r24, r24
    323a:	99 f4       	brne	.+38     	; 0x3262 <Control_SendUART+0x88>
			LCD_GoToPosition(0,6,LCD_2);
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	66 e0       	ldi	r22, 0x06	; 6
    3240:	42 e0       	ldi	r20, 0x02	; 2
    3242:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
			LCD_WriteIntData(rec_Data,LCD_2);//display temperature degree
    3246:	89 81       	ldd	r24, Y+1	; 0x01
    3248:	88 2f       	mov	r24, r24
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	a0 e0       	ldi	r26, 0x00	; 0
    324e:	b0 e0       	ldi	r27, 0x00	; 0
    3250:	bc 01       	movw	r22, r24
    3252:	cd 01       	movw	r24, r26
    3254:	42 e0       	ldi	r20, 0x02	; 2
    3256:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_WriteIntData>
			flag3 = 1;
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	80 93 9b 03 	sts	0x039B, r24
    3260:	70 c0       	rjmp	.+224    	; 0x3342 <Control_SendUART+0x168>
		}
		else{
			LCD_GoToPosition(0,16,LCD_2);
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	60 e1       	ldi	r22, 0x10	; 16
    3266:	42 e0       	ldi	r20, 0x02	; 2
    3268:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
			LCD_WriteStringData(DATA_CHECK(GET_BIT(rec_Data,0)),LCD_2);//display LDR status
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	88 2f       	mov	r24, r24
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	81 70       	andi	r24, 0x01	; 1
    3274:	90 70       	andi	r25, 0x00	; 0
    3276:	88 23       	and	r24, r24
    3278:	29 f0       	breq	.+10     	; 0x3284 <Control_SendUART+0xaa>
    327a:	8a e6       	ldi	r24, 0x6A	; 106
    327c:	92 e0       	ldi	r25, 0x02	; 2
    327e:	9a 87       	std	Y+10, r25	; 0x0a
    3280:	89 87       	std	Y+9, r24	; 0x09
    3282:	04 c0       	rjmp	.+8      	; 0x328c <Control_SendUART+0xb2>
    3284:	8e e6       	ldi	r24, 0x6E	; 110
    3286:	92 e0       	ldi	r25, 0x02	; 2
    3288:	9a 87       	std	Y+10, r25	; 0x0a
    328a:	89 87       	std	Y+9, r24	; 0x09
    328c:	89 85       	ldd	r24, Y+9	; 0x09
    328e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3290:	62 e0       	ldi	r22, 0x02	; 2
    3292:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

			LCD_GoToPosition(1,6,LCD_2);
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	66 e0       	ldi	r22, 0x06	; 6
    329a:	42 e0       	ldi	r20, 0x02	; 2
    329c:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
			LCD_WriteStringData(DATA_CHECK(GET_BIT(rec_Data,1)),LCD_2);//display Door status
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	86 95       	lsr	r24
    32a4:	88 2f       	mov	r24, r24
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	81 70       	andi	r24, 0x01	; 1
    32aa:	90 70       	andi	r25, 0x00	; 0
    32ac:	88 23       	and	r24, r24
    32ae:	29 f0       	breq	.+10     	; 0x32ba <Control_SendUART+0xe0>
    32b0:	8a e6       	ldi	r24, 0x6A	; 106
    32b2:	92 e0       	ldi	r25, 0x02	; 2
    32b4:	98 87       	std	Y+8, r25	; 0x08
    32b6:	8f 83       	std	Y+7, r24	; 0x07
    32b8:	04 c0       	rjmp	.+8      	; 0x32c2 <Control_SendUART+0xe8>
    32ba:	8e e6       	ldi	r24, 0x6E	; 110
    32bc:	92 e0       	ldi	r25, 0x02	; 2
    32be:	98 87       	std	Y+8, r25	; 0x08
    32c0:	8f 83       	std	Y+7, r24	; 0x07
    32c2:	8f 81       	ldd	r24, Y+7	; 0x07
    32c4:	98 85       	ldd	r25, Y+8	; 0x08
    32c6:	62 e0       	ldi	r22, 0x02	; 2
    32c8:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

			LCD_GoToPosition(1,16,LCD_2);
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	60 e1       	ldi	r22, 0x10	; 16
    32d0:	42 e0       	ldi	r20, 0x02	; 2
    32d2:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
			LCD_WriteStringData(DATA_CHECK(GET_BIT(rec_Data,2)),LCD_2);//display Music status
    32d6:	89 81       	ldd	r24, Y+1	; 0x01
    32d8:	86 95       	lsr	r24
    32da:	86 95       	lsr	r24
    32dc:	88 2f       	mov	r24, r24
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	81 70       	andi	r24, 0x01	; 1
    32e2:	90 70       	andi	r25, 0x00	; 0
    32e4:	88 23       	and	r24, r24
    32e6:	29 f0       	breq	.+10     	; 0x32f2 <Control_SendUART+0x118>
    32e8:	8a e6       	ldi	r24, 0x6A	; 106
    32ea:	92 e0       	ldi	r25, 0x02	; 2
    32ec:	9e 83       	std	Y+6, r25	; 0x06
    32ee:	8d 83       	std	Y+5, r24	; 0x05
    32f0:	04 c0       	rjmp	.+8      	; 0x32fa <Control_SendUART+0x120>
    32f2:	8e e6       	ldi	r24, 0x6E	; 110
    32f4:	92 e0       	ldi	r25, 0x02	; 2
    32f6:	9e 83       	std	Y+6, r25	; 0x06
    32f8:	8d 83       	std	Y+5, r24	; 0x05
    32fa:	8d 81       	ldd	r24, Y+5	; 0x05
    32fc:	9e 81       	ldd	r25, Y+6	; 0x06
    32fe:	62 e0       	ldi	r22, 0x02	; 2
    3300:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>

			LCD_GoToPosition(2,6,LCD_2);
    3304:	82 e0       	ldi	r24, 0x02	; 2
    3306:	66 e0       	ldi	r22, 0x06	; 6
    3308:	42 e0       	ldi	r20, 0x02	; 2
    330a:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_GoToPosition>
			LCD_WriteStringData(DATA_CHECK(GET_BIT(rec_Data,3)),LCD_2);//display Smoke status
    330e:	89 81       	ldd	r24, Y+1	; 0x01
    3310:	86 95       	lsr	r24
    3312:	86 95       	lsr	r24
    3314:	86 95       	lsr	r24
    3316:	88 2f       	mov	r24, r24
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	81 70       	andi	r24, 0x01	; 1
    331c:	90 70       	andi	r25, 0x00	; 0
    331e:	88 23       	and	r24, r24
    3320:	29 f0       	breq	.+10     	; 0x332c <Control_SendUART+0x152>
    3322:	8a e6       	ldi	r24, 0x6A	; 106
    3324:	92 e0       	ldi	r25, 0x02	; 2
    3326:	9c 83       	std	Y+4, r25	; 0x04
    3328:	8b 83       	std	Y+3, r24	; 0x03
    332a:	04 c0       	rjmp	.+8      	; 0x3334 <Control_SendUART+0x15a>
    332c:	8e e6       	ldi	r24, 0x6E	; 110
    332e:	92 e0       	ldi	r25, 0x02	; 2
    3330:	9c 83       	std	Y+4, r25	; 0x04
    3332:	8b 83       	std	Y+3, r24	; 0x03
    3334:	8b 81       	ldd	r24, Y+3	; 0x03
    3336:	9c 81       	ldd	r25, Y+4	; 0x04
    3338:	62 e0       	ldi	r22, 0x02	; 2
    333a:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_WriteStringData>
			flag3 = 0;
    333e:	10 92 9b 03 	sts	0x039B, r1
		}
		flag=0;
    3342:	10 92 9d 03 	sts	0x039D, r1
	}
}
    3346:	2a 96       	adiw	r28, 0x0a	; 10
    3348:	0f b6       	in	r0, 0x3f	; 63
    334a:	f8 94       	cli
    334c:	de bf       	out	0x3e, r29	; 62
    334e:	0f be       	out	0x3f, r0	; 63
    3350:	cd bf       	out	0x3d, r28	; 61
    3352:	cf 91       	pop	r28
    3354:	df 91       	pop	r29
    3356:	08 95       	ret

00003358 <main>:
/**********************************************************************************************************************
 *  Functions Definitions
 *********************************************************************************************************************/

/*Main function of Application layer*/
int main(){
    3358:	df 93       	push	r29
    335a:	cf 93       	push	r28
    335c:	cd b7       	in	r28, 0x3d	; 61
    335e:	de b7       	in	r29, 0x3e	; 62

	Program_Init(); /*All required initializations*/
    3360:	0e 94 09 11 	call	0x2212	; 0x2212 <Program_Init>
	while(1){
		/*Check if user entered ID and Password correctly*/
		if(Login_CheckInputs()){
    3364:	0e 94 26 11 	call	0x224c	; 0x224c <Login_CheckInputs>
    3368:	88 23       	and	r24, r24
    336a:	e1 f3       	breq	.-8      	; 0x3364 <main+0xc>
			USER_MODE_Init(); /*To enter the main screen to choose: Display options - Change password - Logout*/
    336c:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <USER_MODE_Init>
    3370:	f9 cf       	rjmp	.-14     	; 0x3364 <main+0xc>

00003372 <__mulsi3>:
    3372:	62 9f       	mul	r22, r18
    3374:	d0 01       	movw	r26, r0
    3376:	73 9f       	mul	r23, r19
    3378:	f0 01       	movw	r30, r0
    337a:	82 9f       	mul	r24, r18
    337c:	e0 0d       	add	r30, r0
    337e:	f1 1d       	adc	r31, r1
    3380:	64 9f       	mul	r22, r20
    3382:	e0 0d       	add	r30, r0
    3384:	f1 1d       	adc	r31, r1
    3386:	92 9f       	mul	r25, r18
    3388:	f0 0d       	add	r31, r0
    338a:	83 9f       	mul	r24, r19
    338c:	f0 0d       	add	r31, r0
    338e:	74 9f       	mul	r23, r20
    3390:	f0 0d       	add	r31, r0
    3392:	65 9f       	mul	r22, r21
    3394:	f0 0d       	add	r31, r0
    3396:	99 27       	eor	r25, r25
    3398:	72 9f       	mul	r23, r18
    339a:	b0 0d       	add	r27, r0
    339c:	e1 1d       	adc	r30, r1
    339e:	f9 1f       	adc	r31, r25
    33a0:	63 9f       	mul	r22, r19
    33a2:	b0 0d       	add	r27, r0
    33a4:	e1 1d       	adc	r30, r1
    33a6:	f9 1f       	adc	r31, r25
    33a8:	bd 01       	movw	r22, r26
    33aa:	cf 01       	movw	r24, r30
    33ac:	11 24       	eor	r1, r1
    33ae:	08 95       	ret

000033b0 <__divmodsi4>:
    33b0:	97 fb       	bst	r25, 7
    33b2:	09 2e       	mov	r0, r25
    33b4:	05 26       	eor	r0, r21
    33b6:	0e d0       	rcall	.+28     	; 0x33d4 <__divmodsi4_neg1>
    33b8:	57 fd       	sbrc	r21, 7
    33ba:	04 d0       	rcall	.+8      	; 0x33c4 <__divmodsi4_neg2>
    33bc:	14 d0       	rcall	.+40     	; 0x33e6 <__udivmodsi4>
    33be:	0a d0       	rcall	.+20     	; 0x33d4 <__divmodsi4_neg1>
    33c0:	00 1c       	adc	r0, r0
    33c2:	38 f4       	brcc	.+14     	; 0x33d2 <__divmodsi4_exit>

000033c4 <__divmodsi4_neg2>:
    33c4:	50 95       	com	r21
    33c6:	40 95       	com	r20
    33c8:	30 95       	com	r19
    33ca:	21 95       	neg	r18
    33cc:	3f 4f       	sbci	r19, 0xFF	; 255
    33ce:	4f 4f       	sbci	r20, 0xFF	; 255
    33d0:	5f 4f       	sbci	r21, 0xFF	; 255

000033d2 <__divmodsi4_exit>:
    33d2:	08 95       	ret

000033d4 <__divmodsi4_neg1>:
    33d4:	f6 f7       	brtc	.-4      	; 0x33d2 <__divmodsi4_exit>
    33d6:	90 95       	com	r25
    33d8:	80 95       	com	r24
    33da:	70 95       	com	r23
    33dc:	61 95       	neg	r22
    33de:	7f 4f       	sbci	r23, 0xFF	; 255
    33e0:	8f 4f       	sbci	r24, 0xFF	; 255
    33e2:	9f 4f       	sbci	r25, 0xFF	; 255
    33e4:	08 95       	ret

000033e6 <__udivmodsi4>:
    33e6:	a1 e2       	ldi	r26, 0x21	; 33
    33e8:	1a 2e       	mov	r1, r26
    33ea:	aa 1b       	sub	r26, r26
    33ec:	bb 1b       	sub	r27, r27
    33ee:	fd 01       	movw	r30, r26
    33f0:	0d c0       	rjmp	.+26     	; 0x340c <__udivmodsi4_ep>

000033f2 <__udivmodsi4_loop>:
    33f2:	aa 1f       	adc	r26, r26
    33f4:	bb 1f       	adc	r27, r27
    33f6:	ee 1f       	adc	r30, r30
    33f8:	ff 1f       	adc	r31, r31
    33fa:	a2 17       	cp	r26, r18
    33fc:	b3 07       	cpc	r27, r19
    33fe:	e4 07       	cpc	r30, r20
    3400:	f5 07       	cpc	r31, r21
    3402:	20 f0       	brcs	.+8      	; 0x340c <__udivmodsi4_ep>
    3404:	a2 1b       	sub	r26, r18
    3406:	b3 0b       	sbc	r27, r19
    3408:	e4 0b       	sbc	r30, r20
    340a:	f5 0b       	sbc	r31, r21

0000340c <__udivmodsi4_ep>:
    340c:	66 1f       	adc	r22, r22
    340e:	77 1f       	adc	r23, r23
    3410:	88 1f       	adc	r24, r24
    3412:	99 1f       	adc	r25, r25
    3414:	1a 94       	dec	r1
    3416:	69 f7       	brne	.-38     	; 0x33f2 <__udivmodsi4_loop>
    3418:	60 95       	com	r22
    341a:	70 95       	com	r23
    341c:	80 95       	com	r24
    341e:	90 95       	com	r25
    3420:	9b 01       	movw	r18, r22
    3422:	ac 01       	movw	r20, r24
    3424:	bd 01       	movw	r22, r26
    3426:	cf 01       	movw	r24, r30
    3428:	08 95       	ret

0000342a <__prologue_saves__>:
    342a:	2f 92       	push	r2
    342c:	3f 92       	push	r3
    342e:	4f 92       	push	r4
    3430:	5f 92       	push	r5
    3432:	6f 92       	push	r6
    3434:	7f 92       	push	r7
    3436:	8f 92       	push	r8
    3438:	9f 92       	push	r9
    343a:	af 92       	push	r10
    343c:	bf 92       	push	r11
    343e:	cf 92       	push	r12
    3440:	df 92       	push	r13
    3442:	ef 92       	push	r14
    3444:	ff 92       	push	r15
    3446:	0f 93       	push	r16
    3448:	1f 93       	push	r17
    344a:	cf 93       	push	r28
    344c:	df 93       	push	r29
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
    3452:	ca 1b       	sub	r28, r26
    3454:	db 0b       	sbc	r29, r27
    3456:	0f b6       	in	r0, 0x3f	; 63
    3458:	f8 94       	cli
    345a:	de bf       	out	0x3e, r29	; 62
    345c:	0f be       	out	0x3f, r0	; 63
    345e:	cd bf       	out	0x3d, r28	; 61
    3460:	09 94       	ijmp

00003462 <__epilogue_restores__>:
    3462:	2a 88       	ldd	r2, Y+18	; 0x12
    3464:	39 88       	ldd	r3, Y+17	; 0x11
    3466:	48 88       	ldd	r4, Y+16	; 0x10
    3468:	5f 84       	ldd	r5, Y+15	; 0x0f
    346a:	6e 84       	ldd	r6, Y+14	; 0x0e
    346c:	7d 84       	ldd	r7, Y+13	; 0x0d
    346e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3470:	9b 84       	ldd	r9, Y+11	; 0x0b
    3472:	aa 84       	ldd	r10, Y+10	; 0x0a
    3474:	b9 84       	ldd	r11, Y+9	; 0x09
    3476:	c8 84       	ldd	r12, Y+8	; 0x08
    3478:	df 80       	ldd	r13, Y+7	; 0x07
    347a:	ee 80       	ldd	r14, Y+6	; 0x06
    347c:	fd 80       	ldd	r15, Y+5	; 0x05
    347e:	0c 81       	ldd	r16, Y+4	; 0x04
    3480:	1b 81       	ldd	r17, Y+3	; 0x03
    3482:	aa 81       	ldd	r26, Y+2	; 0x02
    3484:	b9 81       	ldd	r27, Y+1	; 0x01
    3486:	ce 0f       	add	r28, r30
    3488:	d1 1d       	adc	r29, r1
    348a:	0f b6       	in	r0, 0x3f	; 63
    348c:	f8 94       	cli
    348e:	de bf       	out	0x3e, r29	; 62
    3490:	0f be       	out	0x3f, r0	; 63
    3492:	cd bf       	out	0x3d, r28	; 61
    3494:	ed 01       	movw	r28, r26
    3496:	08 95       	ret

00003498 <_exit>:
    3498:	f8 94       	cli

0000349a <__stop_program>:
    349a:	ff cf       	rjmp	.-2      	; 0x349a <__stop_program>
